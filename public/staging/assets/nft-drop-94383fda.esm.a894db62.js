import{aZ as v,av as w,aw as r,ax as f,b8 as b,az as C,aA as y,aB as T,b9 as W,aF as A,aG as E,aD as I,aH as k,b6 as x,ba as N,bb as R,aI as S,aL as U,aK as M,aV as c,aY as u,aM as F,aN as O,bc as L,bd as B}from"./index.c3f8b9a9.js";class l extends v{constructor(t,a,n){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,d=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new w(t,a,s,e);super(d,n,i),r(this,"abi",void 0),r(this,"encoder",void 0),r(this,"estimator",void 0),r(this,"metadata",void 0),r(this,"sales",void 0),r(this,"platformFees",void 0),r(this,"events",void 0),r(this,"roles",void 0),r(this,"interceptor",void 0),r(this,"royalties",void 0),r(this,"claimConditions",void 0),r(this,"revealer",void 0),r(this,"checkout",void 0),r(this,"erc721",void 0),r(this,"owner",void 0),this.abi=s,this.metadata=new f(this.contractWrapper,b,this.storage),this.roles=new C(this.contractWrapper,l.contractRoles),this.royalties=new y(this.contractWrapper,this.metadata),this.sales=new T(this.contractWrapper),this.claimConditions=new W(this.contractWrapper,this.metadata,this.storage),this.encoder=new A(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.events=new I(this.contractWrapper),this.platformFees=new k(this.contractWrapper),this.erc721=new x(this.contractWrapper,this.storage,i),this.revealer=new N(this.contractWrapper,this.storage,R.name,()=>this.erc721.nextTokenIdToMint()),this.interceptor=new S(this.contractWrapper),this.owner=new U(this.contractWrapper),this.checkout=new M(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async totalSupply(){const t=await this.totalClaimedSupply(),a=await this.totalUnclaimedSupply();return t.add(a)}async getAllClaimed(t){const a=c.from(t?.start||0).toNumber(),n=c.from(t?.count||u).toNumber(),e=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),a+n);return await Promise.all(Array.from(Array(e).keys()).map(s=>this.get(s.toString())))}async getAllUnclaimed(t){const a=c.from(t?.start||0).toNumber(),n=c.from(t?.count||u).toNumber(),e=c.from(Math.max((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),a)),s=c.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),e.toNumber()+n));return await Promise.all(Array.from(Array(s.sub(e).toNumber()).keys()).map(i=>this.erc721.getTokenMetadata(e.add(i).toString())))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(F("transfer"),O)}async createBatch(t,a){const n=await this.contractWrapper.readContract.nextTokenIdToMint(),e=await L(t,this.storage,n.toNumber(),a),s=e[0].substring(0,e[0].lastIndexOf("/"));for(let o=0;o<e.length;o++){const p=e[o].substring(0,e[o].lastIndexOf("/"));if(s!==p)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${s}' but got '${p}'`)}const i=await this.contractWrapper.sendTransaction("lazyMint",[e.length,s.endsWith("/")?s:`${s}/`,B("")]),d=this.contractWrapper.parseLogs("TokensLazyMinted",i?.logs),m=d[0].args.startTokenId,g=d[0].args.endTokenId,h=[];for(let o=m;o.lte(g);o=o.add(1))h.push({id:o,receipt:i,data:()=>this.erc721.getTokenMetadata(o)});return h}async getClaimTransaction(t,a){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return this.erc721.getClaimTransaction(t,a,{checkERC20Allowance:n})}async claimTo(t,a){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return this.erc721.claimTo(t,a,{checkERC20Allowance:n})}async claim(t){let a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return this.claimTo(await this.contractWrapper.getSignerAddress(),t,a)}async burn(t){return this.erc721.burn(t)}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,a){return this.erc721.isApproved(t,a)}async transfer(t,a){return this.erc721.transfer(t,a)}async setApprovalForAll(t,a){return this.erc721.setApprovalForAll(t,a)}async setApprovalForToken(t,a){return{receipt:await this.contractWrapper.sendTransaction("approve",[t,a])}}async call(t){for(var a=arguments.length,n=new Array(a>1?a-1:0),e=1;e<a;e++)n[e-1]=arguments[e];return this.contractWrapper.call(t,...n)}}r(l,"contractRoles",["admin","minter","transfer"]);export{l as NFTDrop};

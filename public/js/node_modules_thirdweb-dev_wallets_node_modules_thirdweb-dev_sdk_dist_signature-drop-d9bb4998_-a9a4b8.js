"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_thirdweb-dev_wallets_node_modules_thirdweb-dev_sdk_dist_signature-drop-d9bb4998_-a9a4b8"],{

/***/ "./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-7b47bd46.browser.esm.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-7b47bd46.browser.esm.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ StandardErc721)\n/* harmony export */ });\n/* harmony import */ var _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contract-publisher-f8af509d.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/contract-publisher-f8af509d.browser.esm.js\");\n\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.aD(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await (0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.cG)(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await (0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.cG)(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */(0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.dt)(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */(0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.dt)(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */(0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.dt)(async (operator, tokenId) => {\n    return _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await (0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.cG)(operator), tokenId]\n    });\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi93YWxsZXRzL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3Nkay9kaXN0L2VyYy03MjEtc3RhbmRhcmQtN2I0N2JkNDYuYnJvd3Nlci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUo7O0FBRXJKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsa0JBQWtCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkVBQU07QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0VBQWM7QUFDMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwrRUFBYztBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGdCQUFnQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixnQkFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0VBQXdCO0FBQ3BEO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywrRUFBd0I7QUFDN0Q7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLCtFQUF3QjtBQUMvRCxXQUFXLDJFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxtQkFBbUIsK0VBQWM7QUFDakMsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi93YWxsZXRzL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3Nkay9kaXN0L2VyYy03MjEtc3RhbmRhcmQtN2I0N2JkNDYuYnJvd3Nlci5lc20uanM/NjRmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhRCBhcyBFcmM3MjEsIGNHIGFzIHJlc29sdmVBZGRyZXNzLCBkdCBhcyBidWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24sIGFXIGFzIFRyYW5zYWN0aW9uIH0gZnJvbSAnLi9jb250cmFjdC1wdWJsaXNoZXItZjhhZjUwOWQuYnJvd3Nlci5lc20uanMnO1xuXG4vKipcbiAqIFN0YW5kYXJkIEVSQzcyMSBORlQgZnVuY3Rpb25zXG4gKiBAcmVtYXJrcyBCYXNpYyBmdW5jdGlvbmFsaXR5IGZvciBhIEVSQzcyMSBjb250cmFjdCB0aGF0IGhhbmRsZXMgSVBGUyBzdG9yYWdlIGZvciB5b3UuXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgY29udHJhY3QgPSBhd2FpdCBzZGsuZ2V0Q29udHJhY3QoXCJ7e2NvbnRyYWN0X2FkZHJlc3N9fVwiKTtcbiAqIGF3YWl0IGNvbnRyYWN0Lm5mdC50cmFuc2Zlcih3YWxsZXRBZGRyZXNzLCB0b2tlbklkKTtcbiAqIGBgYFxuICogQHB1YmxpY1xuICovXG5jbGFzcyBTdGFuZGFyZEVyYzcyMSB7XG4gIGdldCBjaGFpbklkKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGFpbklkO1xuICB9XG4gIGNvbnN0cnVjdG9yKGNvbnRyYWN0V3JhcHBlciwgc3RvcmFnZSwgY2hhaW5JZCkge1xuICAgIHRoaXMuY29udHJhY3RXcmFwcGVyID0gY29udHJhY3RXcmFwcGVyO1xuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgdGhpcy5lcmM3MjEgPSBuZXcgRXJjNzIxKHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLnN0b3JhZ2UsIGNoYWluSWQpO1xuICAgIHRoaXMuX2NoYWluSWQgPSBjaGFpbklkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgb25OZXR3b3JrVXBkYXRlZChuZXR3b3JrKSB7XG4gICAgdGhpcy5jb250cmFjdFdyYXBwZXIudXBkYXRlU2lnbmVyT3JQcm92aWRlcihuZXR3b3JrKTtcbiAgfVxuICBnZXRBZGRyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRyYWN0V3JhcHBlci5yZWFkQ29udHJhY3QuYWRkcmVzcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIE5GVHNcbiAgICpcbiAgICogQHJlbWFya3MgR2V0IGFsbCB0aGUgZGF0YSBhc3NvY2lhdGVkIHdpdGggZXZlcnkgTkZUIGluIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHJldHVybnMgdGhlIGZpcnN0IDEwMCBORlRzLCB1c2UgcXVlcnlQYXJhbXMgdG8gZmV0Y2ggbW9yZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBuZnRzID0gYXdhaXQgY29udHJhY3QuZ2V0QWxsKCk7XG4gICAqIGNvbnNvbGUubG9nKG5mdHMpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHF1ZXJ5UGFyYW1zIC0gb3B0aW9uYWwgZmlsdGVyaW5nIHRvIG9ubHkgZmV0Y2ggYSBzdWJzZXQgb2YgcmVzdWx0cy5cbiAgICogQHJldHVybnMgVGhlIE5GVCBtZXRhZGF0YSBmb3IgYWxsIE5GVHMgcXVlcmllZC5cbiAgICovXG4gIGFzeW5jIGdldEFsbChxdWVyeVBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS5nZXRBbGwocXVlcnlQYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgTkZUcyBvd25lZCBieSBhIHNwZWNpZmljIHdhbGxldFxuICAgKlxuICAgKiBAcmVtYXJrcyBHZXQgYWxsIHRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgTkZUcyBvd25lZCBieSBhIHNwZWNpZmljIHdhbGxldC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiAvLyBBZGRyZXNzIG9mIHRoZSB3YWxsZXQgdG8gZ2V0IHRoZSBORlRzIG9mXG4gICAqIGNvbnN0IGFkZHJlc3MgPSBcInt7d2FsbGV0X2FkZHJlc3N9fVwiO1xuICAgKiBjb25zdCBuZnRzID0gYXdhaXQgY29udHJhY3QuZ2V0T3duZWQoYWRkcmVzcyk7XG4gICAqIGNvbnNvbGUubG9nKG5mdHMpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHdhbGxldEFkZHJlc3MgLSB0aGUgd2FsbGV0IGFkZHJlc3MgdG8gcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjb25uZWN0ZWQgd2FsbGV0XG4gICAqIEByZXR1cm5zIFRoZSBORlQgbWV0YWRhdGEgZm9yIGFsbCBORlRzIGluIHRoZSBjb250cmFjdC5cbiAgICovXG4gIGFzeW5jIGdldE93bmVkKHdhbGxldEFkZHJlc3MpIHtcbiAgICBpZiAod2FsbGV0QWRkcmVzcykge1xuICAgICAgd2FsbGV0QWRkcmVzcyA9IGF3YWl0IHJlc29sdmVBZGRyZXNzKHdhbGxldEFkZHJlc3MpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lcmM3MjEuZ2V0T3duZWQod2FsbGV0QWRkcmVzcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IE93bmVkIFRva2VuIElkc1xuICAgKiBAcmVtYXJrcyBHZXQgYWxsIHRoZSB0b2tlbiBpZHMgb2YgTkZUcyBvd25lZCBieSBhIHNwZWNpZmljIHdhbGxldCAobm8gbWV0YWRhdGEpXG4gICAqL1xuICBhc3luYyBnZXRPd25lZFRva2VuSWRzKHdhbGxldEFkZHJlc3MpIHtcbiAgICBpZiAod2FsbGV0QWRkcmVzcykge1xuICAgICAgd2FsbGV0QWRkcmVzcyA9IGF3YWl0IHJlc29sdmVBZGRyZXNzKHdhbGxldEFkZHJlc3MpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lcmM3MjEuZ2V0T3duZWRUb2tlbklkcyh3YWxsZXRBZGRyZXNzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdG90YWwgbWludGVkIHN1cHBseSBjb3VudFxuICAgKi9cbiAgYXN5bmMgdG90YWxTdXBwbHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLnRvdGFsQ2lyY3VsYXRpbmdTdXBwbHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzaW5nbGUgTkZUXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgdG9rZW5JZCA9IDA7XG4gICAqIGNvbnN0IG5mdCA9IGF3YWl0IGNvbnRyYWN0LmdldCh0b2tlbklkKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB0b2tlbklkIC0gdGhlIHRva2VuSWQgb2YgdGhlIE5GVCB0byByZXRyaWV2ZVxuICAgKiBAcmV0dXJucyBUaGUgTkZUIG1ldGFkYXRhXG4gICAqL1xuICBhc3luYyBnZXQodG9rZW5JZCkge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS5nZXQodG9rZW5JZCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IG93bmVyIG9mIGEgZ2l2ZW4gTkZUIHdpdGhpbiB0aGlzIENvbnRyYWN0XG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbklkIC0gdGhlIHRva2VuSWQgb2YgdGhlIE5GVFxuICAgKiBAcmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgb3duZXJcbiAgICovXG4gIGFzeW5jIG93bmVyT2YodG9rZW5JZCkge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS5vd25lck9mKHRva2VuSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBORlQgQmFsYW5jZVxuICAgKlxuICAgKiBAcmVtYXJrcyBHZXQgYSB3YWxsZXRzIE5GVCBiYWxhbmNlIChudW1iZXIgb2YgTkZUcyBpbiB0aGlzIGNvbnRyYWN0IG93bmVkIGJ5IHRoZSB3YWxsZXQpLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHdhbGxldEFkZHJlc3MgPSBcInt7d2FsbGV0X2FkZHJlc3N9fVwiO1xuICAgKiBjb25zdCBiYWxhbmNlID0gYXdhaXQgY29udHJhY3QuYmFsYW5jZU9mKHdhbGxldEFkZHJlc3MpO1xuICAgKiBjb25zb2xlLmxvZyhiYWxhbmNlKTtcbiAgICogYGBgXG4gICAqL1xuICBhc3luYyBiYWxhbmNlT2YoYWRkcmVzcykge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS5iYWxhbmNlT2YoYWRkcmVzcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IE5GVCBCYWxhbmNlIGZvciB0aGUgY3VycmVudGx5IGNvbm5lY3RlZCB3YWxsZXRcbiAgICovXG4gIGFzeW5jIGJhbGFuY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLmJhbGFuY2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGlzIHdhbGxldCBoYXMgYXBwcm92ZWQgdHJhbnNmZXJzIGZyb20gdGhlIGdpdmVuIG9wZXJhdG9yXG4gICAqIEBwYXJhbSBhZGRyZXNzIC0gdGhlIHdhbGxldCBhZGRyZXNzXG4gICAqIEBwYXJhbSBvcGVyYXRvciAtIHRoZSBvcGVyYXRvciBhZGRyZXNzXG4gICAqL1xuICBhc3luYyBpc0FwcHJvdmVkKGFkZHJlc3MsIG9wZXJhdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLmlzQXBwcm92ZWQoYWRkcmVzcywgb3BlcmF0b3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZmVyIGFuIE5GVFxuICAgKlxuICAgKiBAcmVtYXJrcyBUcmFuc2ZlciBhbiBORlQgZnJvbSB0aGUgY29ubmVjdGVkIHdhbGxldCB0byBhbm90aGVyIHdhbGxldC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCB3YWxsZXRBZGRyZXNzID0gXCJ7e3dhbGxldF9hZGRyZXNzfX1cIjtcbiAgICogY29uc3QgdG9rZW5JZCA9IDA7XG4gICAqIGF3YWl0IGNvbnRyYWN0LnRyYW5zZmVyKHdhbGxldEFkZHJlc3MsIHRva2VuSWQpO1xuICAgKiBgYGBcbiAgICovXG4gIHRyYW5zZmVyID0gLyogQF9fUFVSRV9fICovYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uKGFzeW5jICh0bywgdG9rZW5JZCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS50cmFuc2Zlci5wcmVwYXJlKHRvLCB0b2tlbklkKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFwcHJvdmUgb3IgcmVtb3ZlIG9wZXJhdG9yIGFzIGFuIG9wZXJhdG9yIGZvciB0aGUgY2FsbGVyLiBPcGVyYXRvcnMgY2FuIGNhbGwgdHJhbnNmZXJGcm9tIG9yIHNhZmVUcmFuc2ZlckZyb20gZm9yIGFueSB0b2tlbiBvd25lZCBieSB0aGUgY2FsbGVyLlxuICAgKiBAcGFyYW0gb3BlcmF0b3IgLSB0aGUgb3BlcmF0b3IncyBhZGRyZXNzXG4gICAqIEBwYXJhbSBhcHByb3ZlZCAtIHdoZXRoZXIgdG8gYXBwcm92ZSBvciByZW1vdmVcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzZXRBcHByb3ZhbEZvckFsbCA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAob3BlcmF0b3IsIGFwcHJvdmVkKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLnNldEFwcHJvdmFsRm9yQWxsLnByZXBhcmUob3BlcmF0b3IsIGFwcHJvdmVkKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFwcHJvdmUgYW4gb3BlcmF0b3IgZm9yIHRoZSBORlQgb3duZXIuIE9wZXJhdG9ycyBjYW4gY2FsbCB0cmFuc2ZlckZyb20gb3Igc2FmZVRyYW5zZmVyRnJvbSBmb3IgdGhlIHNwZWNpZmllZCB0b2tlbi5cbiAgICogQHBhcmFtIG9wZXJhdG9yIC0gdGhlIG9wZXJhdG9yJ3MgYWRkcmVzc1xuICAgKiBAcGFyYW0gdG9rZW5JZCAtIHRoZSB0b2tlbklkIHRvIGdpdmUgYXBwcm92YWwgZm9yXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgc2V0QXBwcm92YWxGb3JUb2tlbiA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAob3BlcmF0b3IsIHRva2VuSWQpID0+IHtcbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbUNvbnRyYWN0V3JhcHBlcih7XG4gICAgICBjb250cmFjdFdyYXBwZXI6IHRoaXMuY29udHJhY3RXcmFwcGVyLFxuICAgICAgbWV0aG9kOiBcImFwcHJvdmVcIixcbiAgICAgIGFyZ3M6IFthd2FpdCByZXNvbHZlQWRkcmVzcyhvcGVyYXRvciksIHRva2VuSWRdXG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBTdGFuZGFyZEVyYzcyMSBhcyBTIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-7b47bd46.browser.esm.js\n");

/***/ }),

/***/ "./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/signature-drop-d9bb4998.browser.esm.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/signature-drop-d9bb4998.browser.esm.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignatureDrop: () => (/* binding */ SignatureDrop)\n/* harmony export */ });\n/* harmony import */ var _QueryParams_39bcad7a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./QueryParams-39bcad7a.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/QueryParams-39bcad7a.browser.esm.js\");\n/* harmony import */ var _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./contract-publisher-f8af509d.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/contract-publisher-f8af509d.browser.esm.js\");\n/* harmony import */ var _erc_721_standard_7b47bd46_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./erc-721-standard-7b47bd46.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-7b47bd46.browser.esm.js\");\n/* harmony import */ var _thirdweb_checkout_39011b2a_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./thirdweb-checkout-39011b2a.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-39011b2a.browser.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! merkletreejs */ \"./node_modules/merkletreejs/dist/index.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/@thirdweb-dev/wallets/node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Setup a collection of NFTs where when it comes to minting, you can authorize\n * some external party to mint tokens on your contract, and specify what exactly\n * will be minted by that external party..\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"signature-drop\");\n * ```\n *\n * @public\n */\nclass SignatureDrop extends _erc_721_standard_7b47bd46_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.S {\n  static contractRoles = _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dG;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const claimCondition = {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   * };\n   * await contract.claimConditions.set([claimCondition]);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ds(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.e.parse(abi || []);\n    this.metadata = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ah(this.contractWrapper, _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dz, this.storage);\n    this.app = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.b0(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ai(this.contractWrapper, SignatureDrop.contractRoles);\n    this.royalties = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aj(this.contractWrapper, this.metadata);\n    this.sales = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ak(this.contractWrapper);\n    this.encoder = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ag(this.contractWrapper);\n    this.estimator = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aQ(this.contractWrapper);\n    this.events = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aR(this.contractWrapper);\n    this.platformFees = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aT(this.contractWrapper);\n    this.interceptor = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aS(this.contractWrapper);\n    this.claimConditions = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.am(this.contractWrapper, this.metadata, this.storage);\n    this.signature = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aE(this.contractWrapper, this.storage);\n    this.revealer = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.al(this.contractWrapper, this.storage, _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dS.name, () => this.erc721.nextTokenIdToMint());\n    this.signature = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aE(this.contractWrapper, this.storage);\n    this.owner = new _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aV(this.contractWrapper);\n    this.checkout = new _thirdweb_checkout_39011b2a_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(queryParams?.count || _QueryParams_39bcad7a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.D).toNumber();\n    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(queryParams?.count || _QueryParams_39bcad7a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.D).toNumber();\n    const firstTokenId = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));\n    const maxId = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the claimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole((0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.bI)(\"transfer\"), ethers__WEBPACK_IMPORTED_MODULE_12__.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */(0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dt)(async (metadatas, options) => {\n    return this.erc721.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claimTo = /* @__PURE__ */(0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dt)(async (destinationAddress, quantity, options) => {\n    return this.erc721.claimTo.prepare(destinationAddress, quantity, options);\n  });\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claim = /* @__PURE__ */(0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dt)(async (quantity, options) => {\n    return this.erc721.claim.prepare(quantity, options);\n  });\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  burn = /* @__PURE__ */(0,_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dt)(async tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/signature-drop-d9bb4998.browser.esm.js\n");

/***/ }),

/***/ "./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-39011b2a.browser.esm.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-39011b2a.browser.esm.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: () => (/* binding */ PAPER_API_URL),\n/* harmony export */   a: () => (/* binding */ PaperCheckout),\n/* harmony export */   c: () => (/* binding */ createCheckoutLinkIntent),\n/* harmony export */   f: () => (/* binding */ fetchRegisteredCheckoutId),\n/* harmony export */   p: () => (/* binding */ parseChainIdToPaperChain)\n/* harmony export */ });\n/* harmony import */ var _contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contract-publisher-f8af509d.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/contract-publisher-f8af509d.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n\n\n\nconst PAPER_API_BASE = `https://paper.xyz/api`;\nconst PAPER_API_VERSION = `2022-08-12`;\n\n/**\n * @internal\n */\nconst PAPER_API_URL = `${PAPER_API_BASE}/${PAPER_API_VERSION}/platform/thirdweb`;\nconst PAPER_CHAIN_ID_MAP = {\n  [_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.cM.Mainnet]: \"Ethereum\",\n  [_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.cM.Goerli]: \"Goerli\",\n  [_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.cM.Polygon]: \"Polygon\",\n  [_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.cM.Mumbai]: \"Mumbai\",\n  [_contract_publisher_f8af509d_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.cM.Avalanche]: \"Avalanche\"\n};\n\n/**\n * @internal\n */\nfunction parseChainIdToPaperChain(chainId) {\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(chainId in PAPER_CHAIN_ID_MAP, `chainId not supported by paper: ${chainId}`);\n  return PAPER_CHAIN_ID_MAP[chainId];\n}\n/**\n *\n * @param contractAddress\n * @param chainId\n * @internal\n * @returns the paper xyz contract id\n * @throws if the contract is not registered on paper xyz\n */\nasync function fetchRegisteredCheckoutId(contractAddress, chainId) {\n  const paperChain = parseChainIdToPaperChain(chainId);\n  const res = await fetch(`${PAPER_API_URL}/register-contract?contractAddress=${contractAddress}&chain=${paperChain}`);\n  const json = await res.json();\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(json.result.id, \"Contract is not registered with paper\");\n  return json.result.id;\n}\n\n/**\n * The parameters for creating a paper.xyz checkout link.\n * @public\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\nconst DEFAULT_PARAMS = {\n  expiresInMinutes: 15,\n  feeBearer: \"BUYER\",\n  sendEmailOnSuccess: true,\n  redirectAfterPayment: false\n};\n\n/**\n * @internal\n */\nasync function createCheckoutLinkIntent(contractId, params) {\n  const res = await fetch(`${PAPER_API_URL}/checkout-link-intent`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      contractId,\n      ...DEFAULT_PARAMS,\n      ...params,\n      metadata: {\n        ...params.metadata,\n        via_platform: \"thirdweb\"\n      },\n      // overrides that are hard coded\n      hideNativeMint: true,\n      hidePaperWallet: !!params.walletAddress,\n      hideExternalWallet: true,\n      hidePayWithCrypto: true,\n      usePaperKey: false\n    })\n  });\n  const json = await res.json();\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(json.checkoutLinkIntentUrl, \"Failed to create checkout link intent\");\n  return json.checkoutLinkIntentUrl;\n}\n\n/**\n * @internal\n */\nclass PaperCheckout {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  async getCheckoutId() {\n    return fetchRegisteredCheckoutId(this.contractWrapper.address, await this.contractWrapper.getChainID());\n  }\n  async isEnabled() {\n    try {\n      return !!(await this.getCheckoutId());\n    } catch (err) {\n      return false;\n    }\n  }\n  async createLinkIntent(params) {\n    return await createCheckoutLinkIntent(await this.getCheckoutId(), params);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi93YWxsZXRzL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3Nkay9kaXN0L3RoaXJkd2ViLWNoZWNrb3V0LTM5MDExYjJhLmJyb3dzZXIuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBNkU7QUFDdEM7O0FBRXZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGVBQWUsR0FBRyxrQkFBa0I7QUFDN0Q7QUFDQSxHQUFHLDJFQUFPO0FBQ1YsR0FBRywyRUFBTztBQUNWLEdBQUcsMkVBQU87QUFDVixHQUFHLDJFQUFPO0FBQ1YsR0FBRywyRUFBTztBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSwwREFBUyxtRUFBbUUsUUFBUTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsY0FBYyxxQ0FBcUMsZ0JBQWdCLFNBQVMsV0FBVztBQUNwSDtBQUNBLEVBQUUsMERBQVM7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGNBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxFQUFFLDBEQUFTO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi93YWxsZXRzL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3Nkay9kaXN0L3RoaXJkd2ViLWNoZWNrb3V0LTM5MDExYjJhLmJyb3dzZXIuZXNtLmpzP2QyYjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY00gYXMgQ2hhaW5JZCB9IGZyb20gJy4vY29udHJhY3QtcHVibGlzaGVyLWY4YWY1MDlkLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5jb25zdCBQQVBFUl9BUElfQkFTRSA9IGBodHRwczovL3BhcGVyLnh5ei9hcGlgO1xuY29uc3QgUEFQRVJfQVBJX1ZFUlNJT04gPSBgMjAyMi0wOC0xMmA7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IFBBUEVSX0FQSV9VUkwgPSBgJHtQQVBFUl9BUElfQkFTRX0vJHtQQVBFUl9BUElfVkVSU0lPTn0vcGxhdGZvcm0vdGhpcmR3ZWJgO1xuY29uc3QgUEFQRVJfQ0hBSU5fSURfTUFQID0ge1xuICBbQ2hhaW5JZC5NYWlubmV0XTogXCJFdGhlcmV1bVwiLFxuICBbQ2hhaW5JZC5Hb2VybGldOiBcIkdvZXJsaVwiLFxuICBbQ2hhaW5JZC5Qb2x5Z29uXTogXCJQb2x5Z29uXCIsXG4gIFtDaGFpbklkLk11bWJhaV06IFwiTXVtYmFpXCIsXG4gIFtDaGFpbklkLkF2YWxhbmNoZV06IFwiQXZhbGFuY2hlXCJcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ2hhaW5JZFRvUGFwZXJDaGFpbihjaGFpbklkKSB7XG4gIGludmFyaWFudChjaGFpbklkIGluIFBBUEVSX0NIQUlOX0lEX01BUCwgYGNoYWluSWQgbm90IHN1cHBvcnRlZCBieSBwYXBlcjogJHtjaGFpbklkfWApO1xuICByZXR1cm4gUEFQRVJfQ0hBSU5fSURfTUFQW2NoYWluSWRdO1xufVxuLyoqXG4gKlxuICogQHBhcmFtIGNvbnRyYWN0QWRkcmVzc1xuICogQHBhcmFtIGNoYWluSWRcbiAqIEBpbnRlcm5hbFxuICogQHJldHVybnMgdGhlIHBhcGVyIHh5eiBjb250cmFjdCBpZFxuICogQHRocm93cyBpZiB0aGUgY29udHJhY3QgaXMgbm90IHJlZ2lzdGVyZWQgb24gcGFwZXIgeHl6XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoUmVnaXN0ZXJlZENoZWNrb3V0SWQoY29udHJhY3RBZGRyZXNzLCBjaGFpbklkKSB7XG4gIGNvbnN0IHBhcGVyQ2hhaW4gPSBwYXJzZUNoYWluSWRUb1BhcGVyQ2hhaW4oY2hhaW5JZCk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke1BBUEVSX0FQSV9VUkx9L3JlZ2lzdGVyLWNvbnRyYWN0P2NvbnRyYWN0QWRkcmVzcz0ke2NvbnRyYWN0QWRkcmVzc30mY2hhaW49JHtwYXBlckNoYWlufWApO1xuICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgaW52YXJpYW50KGpzb24ucmVzdWx0LmlkLCBcIkNvbnRyYWN0IGlzIG5vdCByZWdpc3RlcmVkIHdpdGggcGFwZXJcIik7XG4gIHJldHVybiBqc29uLnJlc3VsdC5pZDtcbn1cblxuLyoqXG4gKiBUaGUgcGFyYW1ldGVycyBmb3IgY3JlYXRpbmcgYSBwYXBlci54eXogY2hlY2tvdXQgbGluay5cbiAqIEBwdWJsaWNcbiAqL1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuY29uc3QgREVGQVVMVF9QQVJBTVMgPSB7XG4gIGV4cGlyZXNJbk1pbnV0ZXM6IDE1LFxuICBmZWVCZWFyZXI6IFwiQlVZRVJcIixcbiAgc2VuZEVtYWlsT25TdWNjZXNzOiB0cnVlLFxuICByZWRpcmVjdEFmdGVyUGF5bWVudDogZmFsc2Vcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNoZWNrb3V0TGlua0ludGVudChjb250cmFjdElkLCBwYXJhbXMpIHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7UEFQRVJfQVBJX1VSTH0vY2hlY2tvdXQtbGluay1pbnRlbnRgLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgY29udHJhY3RJZCxcbiAgICAgIC4uLkRFRkFVTFRfUEFSQU1TLFxuICAgICAgLi4ucGFyYW1zLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgLi4ucGFyYW1zLm1ldGFkYXRhLFxuICAgICAgICB2aWFfcGxhdGZvcm06IFwidGhpcmR3ZWJcIlxuICAgICAgfSxcbiAgICAgIC8vIG92ZXJyaWRlcyB0aGF0IGFyZSBoYXJkIGNvZGVkXG4gICAgICBoaWRlTmF0aXZlTWludDogdHJ1ZSxcbiAgICAgIGhpZGVQYXBlcldhbGxldDogISFwYXJhbXMud2FsbGV0QWRkcmVzcyxcbiAgICAgIGhpZGVFeHRlcm5hbFdhbGxldDogdHJ1ZSxcbiAgICAgIGhpZGVQYXlXaXRoQ3J5cHRvOiB0cnVlLFxuICAgICAgdXNlUGFwZXJLZXk6IGZhbHNlXG4gICAgfSlcbiAgfSk7XG4gIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICBpbnZhcmlhbnQoanNvbi5jaGVja291dExpbmtJbnRlbnRVcmwsIFwiRmFpbGVkIHRvIGNyZWF0ZSBjaGVja291dCBsaW5rIGludGVudFwiKTtcbiAgcmV0dXJuIGpzb24uY2hlY2tvdXRMaW5rSW50ZW50VXJsO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBQYXBlckNoZWNrb3V0IHtcbiAgY29uc3RydWN0b3IoY29udHJhY3RXcmFwcGVyKSB7XG4gICAgdGhpcy5jb250cmFjdFdyYXBwZXIgPSBjb250cmFjdFdyYXBwZXI7XG4gIH1cbiAgYXN5bmMgZ2V0Q2hlY2tvdXRJZCgpIHtcbiAgICByZXR1cm4gZmV0Y2hSZWdpc3RlcmVkQ2hlY2tvdXRJZCh0aGlzLmNvbnRyYWN0V3JhcHBlci5hZGRyZXNzLCBhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRDaGFpbklEKCkpO1xuICB9XG4gIGFzeW5jIGlzRW5hYmxlZCgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhKGF3YWl0IHRoaXMuZ2V0Q2hlY2tvdXRJZCgpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgY3JlYXRlTGlua0ludGVudChwYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgY3JlYXRlQ2hlY2tvdXRMaW5rSW50ZW50KGF3YWl0IHRoaXMuZ2V0Q2hlY2tvdXRJZCgpLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBBUEVSX0FQSV9VUkwgYXMgUCwgUGFwZXJDaGVja291dCBhcyBhLCBjcmVhdGVDaGVja291dExpbmtJbnRlbnQgYXMgYywgZmV0Y2hSZWdpc3RlcmVkQ2hlY2tvdXRJZCBhcyBmLCBwYXJzZUNoYWluSWRUb1BhcGVyQ2hhaW4gYXMgcCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-39011b2a.browser.esm.js\n");

/***/ })

}]);
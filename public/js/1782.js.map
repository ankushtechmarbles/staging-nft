{"version":3,"file":"js/1782.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-4e9cb063.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-6f8989ff.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/Vote-3b66775c.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/vote-9e48e128.browser.esm.js"],"sourcesContent":["import { am as isExtensionEnabled, bn as AbiSchema, d1 as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, b1 as EventType, d2 as FEATURE_APPURI } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { utils } from 'ethers';\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param featureName - The feature name to check\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  return isExtensionEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param functionName - The function name to check\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns the metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns a function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const [price, gasUnits] = await Promise.all([this.contractWrapper.getProvider().getGasPrice(), this.contractWrapper.estimateGas(fn, args)]);\n    return utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns the current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns the appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h };\n","/**\n * Allows overriding transaction behavior for this contract\n * @public\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","let VoteType = /*#__PURE__*/function (VoteType) {\n  VoteType[VoteType[\"Against\"] = 0] = \"Against\";\n  VoteType[VoteType[\"For\"] = 1] = \"For\";\n  VoteType[VoteType[\"Abstain\"] = 2] = \"Abstain\";\n  return VoteType;\n}({});\n\nexport { VoteType as V };\n","import { BigNumber, utils, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue, f as fetchCurrencyMetadata } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { cu as ContractWrapper, bn as AbiSchema, cr as VoteContractSchema, aP as resolveAddress } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-6f8989ff.browser.esm.js';\nimport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\nclass Vote {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  async getAll() {\n    const _proposals = (await this.contractWrapper.read(\"getAllProposals\", [])) ?? [];\n    const _items = await Promise.all(_proposals.map(item => Promise.all([this.contractWrapper.read(\"state\", [item.proposalId]), this.getProposalVotes(item.proposalId)])));\n    return _items.map((_ref, index) => {\n      let [state, votes] = _ref;\n      const data = _proposals[index];\n      return {\n        proposalId: data.proposalId,\n        proposer: data.proposer,\n        description: data.description,\n        startBlock: data.startBlock,\n        endBlock: data.endBlock,\n        state: state,\n        votes: votes,\n        executions: data[3].map((c, i) => ({\n          toAddress: data.targets[i],\n          nativeTokenValue: c,\n          transactionData: data.calldatas[i]\n        }))\n      };\n    });\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.read(\"proposalVotes\", [proposalId]);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.read(\"hasVoted\", [proposalId, await resolveAddress(account)]);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.getProvider().getBalance(this.contractWrapper.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(await resolveAddress(tokenAddress), ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.read(\"state\", [proposalId]);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.read(\"votingDelay\", []), this.contractWrapper.read(\"votingPeriod\", []), this.contractWrapper.read(\"token\", []), this.contractWrapper.read(\"quorumNumerator\", []), this.contractWrapper.read(\"proposalThreshold\", [])]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to set up in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal and the transaction receipt.\n   */\n  propose = /* @__PURE__ */buildTransactionFunction(async (description, executions) => {\n    if (!executions) {\n      executions = [{\n        toAddress: this.contractWrapper.address,\n        nativeTokenValue: 0,\n        transactionData: \"0x\"\n      }];\n    }\n    const tos = executions.map(p => p.toAddress);\n    const values = executions.map(p => p.nativeTokenValue);\n    const datas = executions.map(p => p.transactionData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"propose\",\n      args: [tos, values, datas, description],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n        return {\n          id: event[0].args.proposalId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  vote = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (proposalId, voteType) {\n      let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      await _this.ensureExists(proposalId);\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"castVoteWithReason\",\n        args: [proposalId, voteType, reason]\n      });\n    };\n  })());\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  execute = /* @__PURE__ */buildTransactionFunction(async proposalId => {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"execute\",\n      args: [tos, values, datas, descriptionHash]\n    });\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Vote };\n"],"names":["detectContractFeature","contractWrapper","featureName","parse","abi","hasFunction","functionName","readContract","functions","ContractMetadata","name","constructor","schema","storage","this","parseOutputMetadata","metadata","output","parseAsync","parseInputMetadata","input","get","data","supportsContractMetadata","uri","read","includes","downloadJSON","contractName","contractSymbol","publishedMetadata","err","address","getProvider","options","symbol","description","info","title","e","Error","set","async","_parseAndUploadMetadata","wrapper","T","fromContractWrapper","method","args","receipt","update","prepare","parsedMetadata","upload","ContractEvents","addTransactionListener","listener","addListener","Transaction","removeTransactionListener","off","addEventListener","eventName","event","interface","getEvent","filter","topics","getEventTopic","wrappedListener","log","parsedLog","parseLog","toContractEvent","eventFragment","on","listenToAllEvents","console","error","removeEventListener","removeAllListeners","getAllEvents","filters","arguments","length","undefined","fromBlock","toBlock","order","orderedEvents","queryFilter","sort","a","b","blockNumber","parseEvents","getEvents","eventInterface","inputs","map","events","transaction","Object","fromEntries","entries","slice","key","value","rawLog","results","forEach","param","index","Array","isArray","components","arr","type","objArray","i","tuple","obj","j","push","GasCostEstimator","gasCostOf","fn","price","gasUnits","Promise","all","getGasPrice","estimateGas","mul","gasLimitOf","currentGasPriceInGwei","ContractAppURI","app_uri","getGatewayUrls","appURI","ContractInterceptor","overrideNextTransaction","hook","withTransactionOverride","VoteType","Vote","chainId","_chainId","network","C","app","encoder","estimator","G","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","proposalId","proposals","getAll","p","eq","from","_proposals","item","getProposalVotes","_ref","state","votes","proposer","startBlock","endBlock","executions","c","toAddress","targets","nativeTokenValue","transactionData","calldatas","Against","label","count","againstVotes","For","forVotes","Abstain","abstainVotes","hasVoted","account","getSignerAddress","canExecute","ensureExists","proposal","tos","values","datas","descriptionHash","callStatic","execute","balance","getBalance","decimals","displayValue","balanceOfToken","tokenAddress","ERC20Abi","default","erc20","balanceOf","settings","votingDelay","votingPeriod","votingTokenAddress","votingQuorumFraction","proposalTokenThreshold","votingTokenMetadata","f","toString","propose","id","parseLogs","logs","vote","_this","voteType","reason","overrides","call"],"sourceRoot":""}
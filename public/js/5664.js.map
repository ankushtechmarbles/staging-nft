{"version":3,"file":"js/5664.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/dist/errors-3055a99c.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/dist/url-bc88b2b6.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","function normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { getValidChainRPCs } from '@thirdweb-dev/chains';\n\nfunction isTwUrl(url) {\n  const host = new URL(url).hostname;\n  return host.endsWith(\".thirdweb.com\") || host === \"localhost\" || host === \"0.0.0.0\";\n}\nfunction getValidPublicRPCUrl(chain) {\n  return getValidChainRPCs(chain).map(rpc => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch (e) {\n      return rpc;\n    }\n  });\n}\n\nexport { getValidPublicRPCUrl as g, isTwUrl as i };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-3055a99c.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nfunction getInjectedName(ethereum) {\n  if (!ethereum) {\n    return \"Injected\";\n  }\n  const getName = provider => {\n    if (provider.isAvalanche) {\n      return \"Core Wallet\";\n    }\n    if (provider.isBitKeep) {\n      return \"BitKeep\";\n    }\n    if (provider.isBraveWallet) {\n      return \"Brave Wallet\";\n    }\n    if (provider.isCoinbaseWallet) {\n      return \"Coinbase Wallet\";\n    }\n    if (provider.isExodus) {\n      return \"Exodus\";\n    }\n    if (provider.isFrame) {\n      return \"Frame\";\n    }\n    if (provider.isKuCoinWallet) {\n      return \"KuCoin Wallet\";\n    }\n    if (provider.isMathWallet) {\n      return \"MathWallet\";\n    }\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) {\n      return \"1inch Wallet\";\n    }\n    if (provider.isOpera) {\n      return \"Opera\";\n    }\n    if (provider.isPortal) {\n      return \"Ripio Portal\";\n    }\n    if (provider.isTally) {\n      return \"Tally\";\n    }\n    if (provider.isTokenPocket) {\n      return \"TokenPocket\";\n    }\n    if (provider.isTokenary) {\n      return \"Tokenary\";\n    }\n    if (provider.isTrust || provider.isTrustWallet) {\n      return \"Trust Wallet\";\n    }\n    if (provider.isMetaMask) {\n      return \"MetaMask\";\n    }\n  };\n\n  // Some injected providers detect multiple other providers and create a list at `ethers.providers`\n  if (ethereum.providers?.length) {\n    // Deduplicate names using Set\n    // Coinbase Wallet puts multiple providers in `ethereum.providers`\n    const nameSet = new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) {\n      return names;\n    }\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\nvar _provider = /*#__PURE__*/new WeakMap();\nclass InjectedConnector extends WagmiConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      shimDisconnect: true,\n      getProvider: () => {\n        if (assertWindowEthereum(globalThis.window)) {\n          return globalThis.window.ethereum;\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options\n    });\n    /**\n     * Name of the injected connector\n     */\n    /**\n     * Whether the connector is ready to be used\n     *\n     * `true` if the injected provider is found\n     */\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    /**\n     * handles the `accountsChanged` event from the provider\n     * * emits `change` event if connected to a different account\n     * * emits `disconnect` event if no accounts available\n     */\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    /**\n     * handles the `chainChanged` event from the provider\n     * * emits `change` event if connected to a different chain\n     */\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    /**\n     * handles the `disconnect` event from the provider\n     * * emits `disconnect` event\n     */\n    _defineProperty(this, \"onDisconnect\", async error => {\n      // We need this as MetaMask can emit the \"disconnect\" event upon switching chains.\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          try {\n            const isAuthorized = await this.getAccount();\n            if (isAuthorized) {\n              return;\n            }\n          } catch {\n            // If we can't get the account anymore, continue with disconnect\n          }\n        }\n      }\n      this.emit(\"disconnect\");\n\n      // Remove `shimDisconnect` => it signals that wallet is disconnected\n      if (this.options.shimDisconnect) {\n        await this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    const _provider2 = options.getProvider();\n\n    // set the name of the connector\n    if (typeof options.name === \"string\") {\n      // if name is given, use that\n      this.name = options.name;\n    } else if (_provider2) {\n      // if injected provider is detected, get name from it\n      const detectedName = getInjectedName(_provider2);\n      if (options.name) {\n        this.name = options.name(detectedName);\n      } else {\n        if (typeof detectedName === \"string\") {\n          this.name = detectedName;\n        } else {\n          this.name = detectedName[0];\n        }\n      }\n    } else {\n      // else default to \"Injected\"\n      this.name = \"Injected\";\n    }\n    this.id = \"injected\";\n    this.ready = !!_provider2;\n    this.connectorStorage = arg.connectorStorage;\n  }\n\n  /**\n   * * Connect to the injected provider\n   * * switch to the given chain if `chainId` is specified as an argument\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // request account addresses from injected provider\n      const accountAddresses = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // get the first account address\n      const firstAccountAddress = utils.getAddress(accountAddresses[0]);\n\n      // Switch to given chain if a chainId is specified\n      let connectedChainId = await this.getChainId();\n      // Check if currently connected chain is unsupported\n      // chainId is considered unsupported if chainId is not in the list of this.chains array\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is specified and it is not the same as the currently connected chain\n      if (options.chainId && connectedChainId !== options.chainId) {\n        // switch to the given chain\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate connectedChainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id: ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options.shimDisconnect) {\n        // add the shim shimDisconnectKey => it signals that wallet is connected\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        account: firstAccountAddress,\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * disconnect from the injected provider\n   */\n  async disconnect() {\n    // perform cleanup\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n\n    // if shimDisconnect is enabled\n    if (this.options.shimDisconnect) {\n      // Remove the shimDisconnectKey => it signals that wallet is disconnected\n      await this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n\n  /**\n   * @returns The first account address from the injected provider\n   */\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n\n    // return checksum address\n    // https://docs.ethers.org/v5/api/utils/address/#utils-getAddress\n    return utils.getAddress(accounts[0]);\n  }\n\n  /**\n   * @returns The `chainId` of the currently connected chain from injected provider normalized to a `number`\n   */\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n\n  /**\n   * get the injected provider\n   */\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) {\n      _classPrivateFieldSet(this, _provider, provider);\n      // setting listeners\n    }\n\n    return _classPrivateFieldGet(this, _provider);\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n\n  /**\n   *\n   * @returns `true` if the connector is connected and address is available, else `false`\n   */\n  async isAuthorized() {\n    try {\n      // `false` if connector is disconnected\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      // `false` if no account address available, else `true`\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      // `false` if any error thrown\n      return false;\n    }\n  }\n\n  /**\n   * switch to given chain\n   */\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      // request provider to switch to given chainIdHex\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      });\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (chain) {\n        return chain;\n      }\n      return {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (error) {\n      // if could not switch to given chainIdHex\n\n      // if tried to connect to a chain that is not configured\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // if chain is not added to provider\n      if (error.code === 4902 ||\n      // Unwrapping for MetaMask Mobile\n      // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n      error?.data?.originalError?.code === 4902) {\n        try {\n          // request provider to add chain\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addError)) {\n            throw new UserRejectedRequestError(error);\n          }\n\n          // else other error\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n}\n\nexport { InjectedConnector };\n"],"names":["WagmiConnector","constructor","_ref","chains","options","super","this","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","RpcError","Error","message","cause","code","data","Number","isInteger","JSON","stringify","ProviderRpcError","AddChainError","arguments","_","ChainNotConfiguredError","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","normalizeChainId","parseInt","trim","substring","isTwUrl","host","URL","hostname","endsWith","getValidPublicRPCUrl","rpc","pathname","search","toString","e","_provider","WeakMap","InjectedConnector","W","arg","shimDisconnect","getProvider","a","globalThis","window","ethereum","writable","value","async","accounts","emit","account","id","n","unsupported","error","getAccount","connectorStorage","removeItem","shimDisconnectKey","_provider2","name","detectedName","getName","provider","isAvalanche","isBitKeep","isBraveWallet","isCoinbaseWallet","isExodus","isFrame","isKuCoinWallet","isMathWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPortal","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isMetaMask","providers","nameSet","Set","unknownCount","add","names","getInjectedName","ready","connect","setupListeners","type","accountAddresses","request","method","firstAccountAddress","connectedChainId","getChainId","isUnsupported","switchChain","console","setItem","connectionInfo","isUserRejectedRequestError","U","R","disconnect","removeListener","onAccountsChanged","onChainChanged","onDisconnect","then","getSigner","Promise","all","isAuthorized","Boolean","getItem","chainIdHex","params","find","_chain","slug","nativeCurrency","decimals","symbol","shortName","testnet","C","originalError","chainName","rpcUrls","g","blockExplorerUrls","addError","A","S","on"],"sourceRoot":""}
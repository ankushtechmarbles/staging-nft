{"version":3,"file":"js/7611.js","mappings":"oFAAA,SAASA,EAAiBC,GACxB,MAAuB,iBAAZA,EACFC,OAAOC,SAASF,EAA4C,OAAnCA,EAAQG,OAAOC,UAAU,EAAG,GAAc,GAAK,IAE1D,iBAAZJ,EACFC,OAAOD,GAETA,CACT,C,0HCDIK,G,SAAyB,IAAIC,SAC7BC,EAAuB,IAAID,QAC/B,MAAME,UAAwB,EAAAC,EAC5B,WAAAC,CAAYC,GACVC,SACA,IAAAC,GAA2BC,KAAMT,EAAW,CAC1CU,UAAU,EACVC,WAAO,KAET,IAAAH,GAA2BC,KAAMP,EAAS,CACxCQ,UAAU,EACVC,WAAO,KAET,IAAAH,GAAgBC,KAAM,kBAAkBd,IACtC,MAAMiB,GAAK,IAAAC,GAAiBlB,GACtBmB,GAAeL,KAAKH,QAAQS,OAAOC,MAAKC,GAAKA,EAAEtB,UAAYiB,IACjEH,KAAKS,KAAK,SAAU,CAClBC,MAAO,CACLP,KACAE,gBAEF,IAEJL,KAAKH,QAAUA,CACjB,CACA,aAAMc,CAAQC,GACRA,EAAK1B,SACPc,KAAKa,YAAYD,EAAK1B,SAExB,MAAM4B,QAAed,KAAKe,YAE1B,aADsBD,EAAOE,YAE/B,CACA,gBAAMC,IACJ,OAAsBjB,KAAMT,OAAW2B,IACvC,OAAsBlB,KAAMP,OAASyB,EACvC,CACA,gBAAMF,GACJ,MAAMF,QAAed,KAAKe,YAC1B,IAAKD,EACH,MAAM,IAAIK,MAAM,mBAElB,aAAaL,EAAOE,YACtB,CACA,iBAAMI,GACJ,IAEE,cADmBpB,KAAKgB,YAE1B,CAAE,MACA,OAAO,CACT,CACF,CACA,iBAAMK,GAOJ,OANK,OAAsBrB,KAAMT,KAC/B,OAAsBS,KAAMT,GAAW,QAAiBS,KAAKH,QAAQa,MAAO,CAC1EY,SAAUtB,KAAKH,QAAQyB,SACvBC,UAAWvB,KAAKH,QAAQ0B,cAGrB,OAAsBvB,KAAMT,EACrC,CACA,eAAMwB,GACJ,KAAK,OAAsBf,KAAMP,GAAU,CACzC,MAAM+B,QAAiBxB,KAAKqB,eAC5B,OAAsBrB,KAAMP,EAASgC,EAAiBzB,KAAKH,QAAQiB,OAAQU,GAC7E,CACA,OAAO,OAAsBxB,KAAMP,EACrC,CACA,iBAAMoB,CAAY3B,GAChB,MAAMwB,EAAQV,KAAKH,QAAQS,OAAOC,MAAKC,GAAKA,EAAEtB,UAAYA,IAC1D,IAAKwB,EACH,MAAM,IAAIS,MAAM,+BAA+BjC,sEAEjD,OAAsBc,KAAMT,GAAW,QAAiBmB,EAAO,CAC7DY,SAAUtB,KAAKH,QAAQyB,SACvBC,UAAWvB,KAAKH,QAAQ0B,cAE1B,OAAsBvB,KAAMP,EAASgC,EAAiBzB,KAAKH,QAAQiB,QAAQ,OAAsBd,KAAMT,KACvGS,KAAK0B,eAAexC,EACtB,CACA,oBAAMyC,GAAkB,CACxB,YAAAC,CAAatB,GACXN,KAAKH,QAAQS,OAASA,CACxB,EAEF,SAASmB,EAAiBX,EAAQU,GAChC,OAAIA,EACKV,EAAOH,QAAQa,GAEjBV,CACT,C","sources":["webpack:///./node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js"],"sourcesContent":["function normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { getChainProvider } from '@thirdweb-dev/sdk';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport 'eventemitter3';\n\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _signer = /*#__PURE__*/new WeakMap();\nclass SignerConnector extends Connector {\n  constructor(options) {\n    super();\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = !this.options.chains.find(c => c.chainId === id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    this.options = options;\n  }\n  async connect(args) {\n    if (args.chainId) {\n      this.switchChain(args.chainId);\n    }\n    const signer = await this.getSigner();\n    const address = await signer.getAddress();\n    return address;\n  }\n  async disconnect() {\n    _classPrivateFieldSet(this, _provider, undefined);\n    _classPrivateFieldSet(this, _signer, undefined);\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    if (!signer) {\n      throw new Error(\"No signer found\");\n    }\n    return await signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch {\n      return false;\n    }\n  }\n  async getProvider() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      _classPrivateFieldSet(this, _provider, getChainProvider(this.options.chain, {\n        clientId: this.options.clientId,\n        secretKey: this.options.secretKey\n      }));\n    }\n    return _classPrivateFieldGet(this, _provider);\n  }\n  async getSigner() {\n    if (!_classPrivateFieldGet(this, _signer)) {\n      const provider = await this.getProvider();\n      _classPrivateFieldSet(this, _signer, getUpdatedSigner(this.options.signer, provider));\n    }\n    return _classPrivateFieldGet(this, _signer);\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);\n    }\n    _classPrivateFieldSet(this, _provider, getChainProvider(chain, {\n      clientId: this.options.clientId,\n      secretKey: this.options.secretKey\n    }));\n    _classPrivateFieldSet(this, _signer, getUpdatedSigner(this.options.signer, _classPrivateFieldGet(this, _provider)));\n    this.onChainChanged(chainId);\n  }\n  async setupListeners() {}\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n}\nfunction getUpdatedSigner(signer, provider) {\n  if (provider) {\n    return signer.connect(provider);\n  }\n  return signer;\n}\n\nexport { SignerConnector };\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","_provider","WeakMap","_signer","SignerConnector","C","constructor","options","super","_","this","writable","value","id","n","unsupported","chains","find","c","emit","chain","connect","args","switchChain","signer","getSigner","getAddress","disconnect","undefined","Error","isConnected","getProvider","clientId","secretKey","provider","getUpdatedSigner","onChainChanged","setupListeners","updateChains"],"sourceRoot":""}
{"version":3,"file":"js/6044.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/dist/errors-3055a99c.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/dist/url-bc88b2b6.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","import { getValidChainRPCs } from '@thirdweb-dev/chains';\n\nfunction isTwUrl(url) {\n  const host = new URL(url).hostname;\n  return host.endsWith(\".thirdweb.com\") || host === \"localhost\" || host === \"0.0.0.0\";\n}\nfunction getValidPublicRPCUrl(chain) {\n  return getValidChainRPCs(chain).map(rpc => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch (e) {\n      return rpc;\n    }\n  });\n}\n\nexport { getValidPublicRPCUrl as g, isTwUrl as i };\n","import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-006a648a.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-3055a99c.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _initProviderPromise = /*#__PURE__*/new WeakMap();\nvar _storage = /*#__PURE__*/new WeakMap();\nvar _createProvider = /*#__PURE__*/new WeakSet();\nvar _initProvider = /*#__PURE__*/new WeakSet();\nvar _isChainsStale = /*#__PURE__*/new WeakSet();\nvar _removeListeners = /*#__PURE__*/new WeakSet();\nvar _setRequestedChainsIds = /*#__PURE__*/new WeakSet();\nvar _getRequestedChainsIds = /*#__PURE__*/new WeakSet();\nvar _getNamespaceChainsIds = /*#__PURE__*/new WeakSet();\nvar _getNamespaceMethods = /*#__PURE__*/new WeakSet();\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _classPrivateMethodInitSpec(this, _getNamespaceMethods);\n    _classPrivateMethodInitSpec(this, _getNamespaceChainsIds);\n    _classPrivateMethodInitSpec(this, _getRequestedChainsIds);\n    _classPrivateMethodInitSpec(this, _setRequestedChainsIds);\n    _classPrivateMethodInitSpec(this, _removeListeners);\n    /**\n     * Checks if the target chains match the chains that were\n     * initially requested by the connector for the WalletConnect session.\n     * If there is a mismatch, this means that the chains on the connector\n     * are considered stale, and need to be revalidated at a later point (via\n     * connection).\n     *\n     * There may be a scenario where a dapp adds a chain to the\n     * connector later on, however, this chain will not have been approved or rejected\n     * by the wallet. In this case, the chain is considered stale.\n     *\n     * There are exceptions however:\n     * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n     *    then the chain is not considered stale.\n     * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n     *    not considered stale.\n     *\n     * For the above cases, chain validation occurs dynamically when the user\n     * attempts to switch chain.\n     *\n     * Also check that dapp supports at least 1 chain from previously approved session.\n     */\n    _classPrivateMethodInitSpec(this, _isChainsStale);\n    _classPrivateMethodInitSpec(this, _initProvider);\n    _classPrivateMethodInitSpec(this, _createProvider);\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _initProviderPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _storage, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: utils.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await _classPrivateFieldGet(this, _storage).setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);\n      await _classPrivateFieldGet(this, _storage).removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: _classPrivateFieldGet(this, _provider)\n      });\n    });\n    _classPrivateFieldSet(this, _storage, config.options.storage);\n    _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await _classPrivateFieldGet(this, _storage).getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.filteredChains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);\n\n      // If there is an active session with stale chains, disconnect the current session.\n      if (provider.session && isChainsStale) {\n        await provider.disconnect();\n      }\n\n      // If there no active session, or the chains are stale, connect.\n      if (!provider.session || isChainsStale) {\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!_classPrivateFieldGet(this, _provider)) {\n      await _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!_classPrivateFieldGet(this, _provider)) {\n      throw new Error(\"No provider found.\");\n    }\n    return _classPrivateFieldGet(this, _provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(`Chain with ID: ${chainId}, not found on connector.`);\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);\n      const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);\n        requestedChains.push(chainId);\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      return;\n    }\n    _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n    _classPrivateFieldGet(this, _provider).on(\"accountsChanged\", this.onAccountsChanged);\n    _classPrivateFieldGet(this, _provider).on(\"chainChanged\", this.onChainChanged);\n    _classPrivateFieldGet(this, _provider).on(\"disconnect\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"session_delete\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"display_uri\", this.onDisplayUri);\n    _classPrivateFieldGet(this, _provider).on(\"connect\", this.onConnect);\n  }\n}\nasync function _createProvider2() {\n  if (!_classPrivateFieldGet(this, _initProviderPromise) && \"object\" !== \"undefined\") {\n    _classPrivateFieldSet(this, _initProviderPromise, _classPrivateMethodGet(this, _initProvider, _initProvider2).call(this));\n  }\n  return _classPrivateFieldGet(this, _initProviderPromise);\n}\nasync function _initProvider2() {\n  const {\n    default: EthereumProvider,\n    OPTIONAL_EVENTS,\n    OPTIONAL_METHODS\n  } = await import('@walletconnect/ethereum-provider');\n  const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n    let {\n      chainId\n    } = _ref2;\n    return chainId;\n  });\n  if (defaultChain) {\n    // EthereumProvider populates & deduplicates required methods and events internally\n    _classPrivateFieldSet(this, _provider, await EthereumProvider.init({\n      showQrModal: this.options.qrcode !== false,\n      projectId: this.options.projectId,\n      optionalMethods: OPTIONAL_METHODS,\n      optionalEvents: OPTIONAL_EVENTS,\n      chains: [defaultChain],\n      optionalChains: optionalChains,\n      metadata: {\n        name: this.options.dappMetadata.name,\n        description: this.options.dappMetadata.description || \"\",\n        url: this.options.dappMetadata.url,\n        icons: [this.options.dappMetadata.logoUrl || \"\"]\n      },\n      rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n      ])),\n\n      qrModalOptions: this.options.qrModalOptions\n    }));\n  }\n}\nasync function _isChainsStale2() {\n  const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);\n  if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n    return false;\n  }\n  if (!this.options.isNewChainsStale) {\n    return false;\n  }\n  const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);\n  const connectorChains = this.filteredChains.map(_ref3 => {\n    let {\n      chainId\n    } = _ref3;\n    return chainId;\n  });\n  const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);\n  if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n    return false;\n  }\n  return !connectorChains.every(id => requestedChains.includes(id));\n}\nfunction _removeListeners2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return;\n  }\n  _classPrivateFieldGet(this, _provider).removeListener(\"accountsChanged\", this.onAccountsChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"chainChanged\", this.onChainChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"disconnect\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"session_delete\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"display_uri\", this.onDisplayUri);\n  _classPrivateFieldGet(this, _provider).removeListener(\"connect\", this.onConnect);\n}\nasync function _setRequestedChainsIds2(chains) {\n  await _classPrivateFieldGet(this, _storage).setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n}\nasync function _getRequestedChainsIds2() {\n  const data = await _classPrivateFieldGet(this, _storage).getItem(REQUESTED_CHAINS_KEY);\n  return data ? JSON.parse(data) : [];\n}\nfunction _getNamespaceChainsIds2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return [];\n  }\n  const chainIds = _classPrivateFieldGet(this, _provider).session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n  return chainIds ?? [];\n}\nfunction _getNamespaceMethods2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return [];\n  }\n  const methods = _classPrivateFieldGet(this, _provider).session?.namespaces[NAMESPACE]?.methods;\n  return methods ?? [];\n}\n\nexport { WalletConnectConnector };\n"],"names":["WagmiConnector","constructor","_ref","chains","options","super","this","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","RpcError","Error","message","cause","code","data","Number","isInteger","JSON","stringify","ProviderRpcError","AddChainError","arguments","_","ChainNotConfiguredError","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","isTwUrl","host","URL","hostname","endsWith","getValidPublicRPCUrl","rpc","pathname","search","toString","e","chainsToRequest","Set","NAMESPACE","REQUESTED_CHAINS_KEY","ADD_ETH_CHAIN_METHOD","LAST_USED_CHAIN_ID","_provider","WeakMap","_initProviderPromise","_storage","_createProvider","WeakSet","_initProvider","_isChainsStale","_removeListeners","_setRequestedChainsIds","_getRequestedChainsIds","_getNamespaceChainsIds","_getNamespaceMethods","WalletConnectConnector","W","config","isNewChainsStale","w","walletConnect","writable","value","accounts","emit","account","async","id","unsupported","setItem","String","_setRequestedChainsIds2","call","removeItem","uri","type","provider","storage","_createProvider2","filteredChains","filter","c","has","connect","chainIdP","pairingTopic","targetChainId","lastUsedChainIdStr","getItem","lastUsedChainId","parseInt","getProvider","setupListeners","isChainsStale","_isChainsStale2","session","disconnect","optionalChains","optionalChain","enable","getChainId","error","test","U","cleanup","localStorage","key","startsWith","_removeListeners2","disconnectProvider","getAccount","switchChain","getSigner","Promise","all","isAuthorized","find","chain_","S","namespaceChains","_getNamespaceChainsIds2","namespaceMethods","_getNamespaceMethods2","includes","firstExplorer","blockExplorerUrls","request","method","params","chainName","name","nativeCurrency","rpcUrls","g","requestedChains","_getRequestedChainsIds2","push","on","onAccountsChanged","onChainChanged","onDisconnect","onDisplayUri","onConnect","_initProvider2","default","EthereumProvider","OPTIONAL_EVENTS","OPTIONAL_METHODS","defaultChain","_ref2","init","showQrModal","qrcode","projectId","optionalMethods","optionalEvents","metadata","dappMetadata","description","icons","logoUrl","rpcMap","Object","fromEntries","qrModalOptions","connectorChains","_ref3","every","removeListener","parse","chainIds","namespaces","split","methods"],"sourceRoot":""}
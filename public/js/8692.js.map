{"version":3,"file":"js/8692.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js"],"sourcesContent":["function normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { RecoveryShareManagement, UserStatus } from '@paperxyz/embedded-wallet-service-sdk';\nimport { utils } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-006a648a.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport 'eventemitter3';\n\nvar _signer = /*#__PURE__*/new WeakMap();\nclass PaperWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Paper Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getPaperSDK() {\n    if (!this.paper) {\n      this.paper = new Promise(async (resolve, reject) => {\n        const recoveryMethod = this.options.advancedOptions?.recoveryShareManagement;\n        try {\n          const {\n            PaperEmbeddedWalletSdk\n          } = await import('@paperxyz/embedded-wallet-service-sdk');\n          const methodToEnum = {\n            AWS_MANAGED: RecoveryShareManagement.AWS_MANAGED,\n            USER_MANAGED: RecoveryShareManagement.USER_MANAGED\n          };\n          const recoveryShareManagement = recoveryMethod ? methodToEnum[recoveryMethod] : undefined;\n          resolve(new PaperEmbeddedWalletSdk({\n            advancedOptions: {\n              recoveryShareManagement\n            },\n            clientId: this.options.clientId,\n            chain: \"Ethereum\",\n            styles: this.options.styles,\n            onAuthSuccess: this.options.onAuthSuccess\n          }));\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n    return this.paper;\n  }\n  async connect(options) {\n    const paperSDK = await this.getPaperSDK();\n    if (!paperSDK) {\n      throw new Error(\"Paper SDK not initialized\");\n    }\n    const user = await paperSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n\n          // Show Google popup\n          if (options?.googleLogin) {\n            const arg = options.googleLogin;\n            authResult = await paperSDK.auth.loginWithGoogle(typeof arg === \"object\" ? arg : undefined);\n          }\n\n          // Headless\n          else if (options?.email && options?.otp) {\n            authResult = await paperSDK.auth.verifyPaperEmailLoginOtp({\n              email: options.email,\n              otp: options.otp,\n              recoveryCode: options.recoveryCode\n            });\n          }\n\n          // Show OTP modal\n          else if (options?.email) {\n            authResult = await paperSDK.auth.loginWithPaperEmailOtp({\n              email: options.email\n            });\n          }\n\n          // Show Full Modal\n          else {\n            authResult = await paperSDK.auth.loginWithPaperModal();\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          if (typeof options?.googleLogin === \"object\") {\n            if (options.googleLogin.closeOpenedWindow && options.googleLogin.openedWindow) {\n              options.googleLogin.closeOpenedWindow(options.googleLogin.openedWindow);\n            }\n          }\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    if (options?.chainId) {\n      this.switchChain(options.chainId);\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await this.paper;\n    await paper?.auth.logout();\n    _classPrivateFieldSet(this, _signer, undefined);\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const paperSDK = await this.getPaperSDK();\n      const user = await paperSDK.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: \"Ethereum\"\n    }); // just pass Ethereum no matter what chain we are going to connect\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    }));\n\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n\n  // private getUser() {\n  //   if (!this.user) {\n  //     throw new Error(\"User not found\");\n  //   }\n  //   return this.user;\n  // }\n\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getEmail() {\n    await this.getProvider();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\n\nexport { PaperWalletConnector };\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","_signer","WeakMap","PaperWalletConnector","C","constructor","options","super","_","this","w","paper","writable","value","async","accounts","length","onDisconnect","emit","account","id","n","unsupported","chains","findIndex","c","chain","getPaperSDK","Promise","resolve","reject","recoveryMethod","advancedOptions","recoveryShareManagement","PaperEmbeddedWalletSdk","methodToEnum","AWS_MANAGED","USER_MANAGED","undefined","clientId","styles","onAuthSuccess","err","connect","paperSDK","Error","user","getUser","status","LOGGED_OUT","authResult","googleLogin","arg","auth","loginWithGoogle","email","otp","verifyPaperEmailLoginOtp","recoveryCode","loginWithPaperEmailOtp","loginWithPaperModal","LOGGED_IN_WALLET_INITIALIZED","closeOpenedWindow","openedWindow","switchChain","setupListeners","getAddress","disconnect","logout","getSigner","isConnected","e","getProvider","signer","provider","wallet","getEthersJsSigner","rpcEndpoint","rpc","isAuthorized","find","setChain","on","onAccountsChanged","onChainChanged","updateChains","getEmail","authDetails"],"sourceRoot":""}
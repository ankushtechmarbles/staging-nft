{"version":3,"file":"js/3314.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-4e9cb063.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-6f8989ff.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-roles-94655dc4.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/split-e9f9927d.browser.esm.js"],"sourcesContent":["import { am as isExtensionEnabled, bn as AbiSchema, d1 as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, b1 as EventType, d2 as FEATURE_APPURI } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { utils } from 'ethers';\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param featureName - The feature name to check\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  return isExtensionEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param functionName - The function name to check\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns the metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns a function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const [price, gasUnits] = await Promise.all([this.contractWrapper.getProvider().getGasPrice(), this.contractWrapper.estimateGas(fn, args)]);\n    return utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns the current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns the appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h };\n","/**\n * Allows overriding transaction behavior for this contract\n * @public\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import invariant from 'tiny-invariant';\nimport { d3 as FEATURE_PERMISSIONS, H as getRoleHash, aP as resolveAddress, o as MissingRoleError } from './index-827e427d.browser.esm.js';\nimport { h as hasFunction } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractRoles {\n  featureName = FEATURE_PERMISSIONS.name;\n\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Get all members of all roles\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature PermissionsEnumerable\n   */\n  async getAll() {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    const entries = Object.entries(this.roles);\n    (await Promise.all(entries.map(_ref => {\n      let [, role] = _ref;\n      return this.get(role);\n    }))).forEach((item, index) => roles[entries[index][1]] = item);\n    return roles;\n  }\n\n  /**\n   * Get all members of a specific role\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.read(\"getRoleMemberCount\", [roleHash])).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.read(\"getRoleMember\", [roleHash, i])));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n\n  /**\n   * Overwrite the list of members for specific roles\n   *\n   * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   * @twfeature Permissions\n   *\n   * */\n  setAll = /* @__PURE__ */buildTransactionFunction(async rolesWithAddresses => {\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n    const currentRoles = await this.getAll();\n    const encoded = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const [addresses, currentAddresses] = await Promise.all([Promise.all(rolesWithAddresses[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || []), Promise.all(currentRoles[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || [])]);\n      const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n      const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n      if (toAdd.length) {\n        toAdd.forEach(address => {\n          encoded.push(contractEncoder.encode(\"grantRole\", [getRoleHash(role), address]));\n        });\n      }\n      if (toRemove.length) {\n        const revokeFunctionNames = await Promise.all(toRemove.map(address => this.getRevokeRoleFunctionName(address)));\n        revokeFunctionNames.forEach((revokeFunctionName, index) => encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), toRemove[index]])));\n      }\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const [members, resolvedAddress] = await Promise.all([this.get(role), resolveAddress(address)]);\n      if (!members.map(a => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {\n        throw new MissingRoleError(resolvedAddress, role);\n      }\n    }));\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Grant a role to a specific address\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  grant = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"grantRole\",\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /**\n   * Revoke a role from a specific address\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: revokeFunctionName,\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const [resolvedAddress, signerAddress] = await Promise.all([resolveAddress(address), this.contractWrapper.getSignerAddress()]);\n    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\nexport { ContractRoles as C };\n","import { BigNumber, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { dF as ADMIN_ROLE, cu as ContractWrapper, bn as AbiSchema, c9 as SplitsContractSchema, aP as resolveAddress } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-6f8989ff.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-94655dc4.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const [resolvedToken, recipients] = await Promise.all([resolveAddress(tokenAddress), this.getAllRecipients()]);\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([resolveAddress(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const [resolvedToken, resolvedWallet] = await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)]);\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [resolvedToken]), this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)])\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const [resolvedAddress, totalShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", [])]);\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [resolvedAddress]));\n    const totalRoyaltyAvailable = addressReceived.div(totalShares);\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Split };\n"],"names":["detectContractFeature","contractWrapper","featureName","parse","abi","hasFunction","functionName","readContract","functions","ContractMetadata","name","constructor","schema","storage","this","parseOutputMetadata","metadata","output","parseAsync","parseInputMetadata","input","get","data","supportsContractMetadata","uri","read","includes","downloadJSON","contractName","contractSymbol","publishedMetadata","err","address","getProvider","options","symbol","description","info","title","e","Error","set","async","_parseAndUploadMetadata","wrapper","T","fromContractWrapper","method","args","receipt","update","prepare","parsedMetadata","upload","ContractEvents","addTransactionListener","listener","addListener","Transaction","removeTransactionListener","off","addEventListener","eventName","event","interface","getEvent","filter","topics","getEventTopic","wrappedListener","log","parsedLog","parseLog","toContractEvent","eventFragment","on","listenToAllEvents","console","error","removeEventListener","removeAllListeners","getAllEvents","filters","arguments","length","undefined","fromBlock","toBlock","order","orderedEvents","queryFilter","sort","a","b","blockNumber","parseEvents","getEvents","eventInterface","inputs","map","events","transaction","Object","fromEntries","entries","slice","key","value","rawLog","results","forEach","param","index","Array","isArray","components","arr","type","objArray","i","tuple","obj","j","push","GasCostEstimator","gasCostOf","fn","price","gasUnits","Promise","all","getGasPrice","estimateGas","mul","gasLimitOf","currentGasPriceInGwei","ContractAppURI","app_uri","getGatewayUrls","appURI","ContractInterceptor","overrideNextTransaction","hook","withTransactionOverride","ContractRoles","roles","getAll","_ref","role","item","h","roleHash","count","toNumber","from","keys","setAll","contractEncoder","C","rolesWithAddresses","every","currentRoles","encoded","sortedRoles","addresses","currentAddresses","addressOrEns","toAdd","toRemove","encode","getRevokeRoleFunctionName","revokeFunctionName","verify","members","resolvedAddress","toLowerCase","grant","revoke","signerAddress","getSignerAddress","Split","static","chainId","_chainId","network","app","contractRoles","encoder","estimator","G","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","getAllRecipients","recipients","totalRecipients","lt","recipientAddress","getRecipientSplitPercentage","add","balanceOfAllRecipients","balances","recipient","balanceOf","balanceOfTokenAllRecipients","tokenAddress","resolvedToken","balanceOfToken","walletBalance","totalReleased","getBalance","totalReceived","_pendingPayment","walletAddress","resolvedWallet","ERC20Abi","default","erc20","alreadyReleased","totalShares","walletsShares","splitPercentage","div","withdraw","withdrawToken","distribute","distributeToken","sub","overrides","call"],"sourceRoot":""}
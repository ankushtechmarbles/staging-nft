{"version":3,"file":"js/3806.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/assertEnabled-ea837eec.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-4e9cb063.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-6f8989ff.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-dba35fa6.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-roles-94655dc4.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-sales-51f40eba.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/drop-claim-conditions-6a7767e6.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/erc-20-e1bc30a0.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-c06c2912.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-7df9a12a.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/merkletree/dist/thirdweb-dev-merkletree.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/signature-ab20f9e3.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/token-drop-bd80ada0.browser.esm.js","webpack:///./node_modules/buffer-reverse/index.js","webpack:///./node_modules/treeify/treeify.js"],"sourcesContent":["import { BigNumber } from 'ethers';\nimport { z } from 'zod';\nimport { x as ExtensionNotImplementedError } from './index-827e427d.browser.esm.js';\n\nconst RawDateSchema = /* @__PURE__ */(() => z.union([z.date().transform(i => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n}), z.number().transform(i => {\n  return BigNumber.from(i);\n})]))();\n\n/**\n * Default to now\n */\nconst StartDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(0)))();\n\n/**\n * Default to 10 years from now\n */\nconst EndDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10)))();\n\n/**\n * Checks whether the given DetectableFeature is defined\n * @internal\n * @param namespace - The namespace to check\n * @param feature - The corresponding feature\n */\nfunction assertEnabled(namespace, feature) {\n  if (!namespace) {\n    throw new ExtensionNotImplementedError(feature);\n  }\n  return namespace;\n}\n\nexport { EndDateSchema as E, RawDateSchema as R, StartDateSchema as S, assertEnabled as a };\n","import { am as isExtensionEnabled, bn as AbiSchema, d1 as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, b1 as EventType, d2 as FEATURE_APPURI } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { utils } from 'ethers';\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param featureName - The feature name to check\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  return isExtensionEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param functionName - The function name to check\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns the metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns a function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const [price, gasUnits] = await Promise.all([this.contractWrapper.getProvider().getGasPrice(), this.contractWrapper.estimateGas(fn, args)]);\n    return utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns the current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns the appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h };\n","/**\n * Allows overriding transaction behavior for this contract\n * @public\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { dn as FEATURE_PLATFORM_FEE, bJ as CommonPlatformFeeSchema } from './index-827e427d.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import invariant from 'tiny-invariant';\nimport { d3 as FEATURE_PERMISSIONS, H as getRoleHash, aP as resolveAddress, o as MissingRoleError } from './index-827e427d.browser.esm.js';\nimport { h as hasFunction } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractRoles {\n  featureName = FEATURE_PERMISSIONS.name;\n\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Get all members of all roles\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature PermissionsEnumerable\n   */\n  async getAll() {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    const entries = Object.entries(this.roles);\n    (await Promise.all(entries.map(_ref => {\n      let [, role] = _ref;\n      return this.get(role);\n    }))).forEach((item, index) => roles[entries[index][1]] = item);\n    return roles;\n  }\n\n  /**\n   * Get all members of a specific role\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.read(\"getRoleMemberCount\", [roleHash])).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.read(\"getRoleMember\", [roleHash, i])));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n\n  /**\n   * Overwrite the list of members for specific roles\n   *\n   * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   * @twfeature Permissions\n   *\n   * */\n  setAll = /* @__PURE__ */buildTransactionFunction(async rolesWithAddresses => {\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n    const currentRoles = await this.getAll();\n    const encoded = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const [addresses, currentAddresses] = await Promise.all([Promise.all(rolesWithAddresses[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || []), Promise.all(currentRoles[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || [])]);\n      const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n      const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n      if (toAdd.length) {\n        toAdd.forEach(address => {\n          encoded.push(contractEncoder.encode(\"grantRole\", [getRoleHash(role), address]));\n        });\n      }\n      if (toRemove.length) {\n        const revokeFunctionNames = await Promise.all(toRemove.map(address => this.getRevokeRoleFunctionName(address)));\n        revokeFunctionNames.forEach((revokeFunctionName, index) => encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), toRemove[index]])));\n      }\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const [members, resolvedAddress] = await Promise.all([this.get(role), resolveAddress(address)]);\n      if (!members.map(a => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {\n        throw new MissingRoleError(resolvedAddress, role);\n      }\n    }));\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Grant a role to a specific address\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  grant = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"grantRole\",\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /**\n   * Revoke a role from a specific address\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: revokeFunctionName,\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const [resolvedAddress, signerAddress] = await Promise.all([resolveAddress(address), this.contractWrapper.getSignerAddress()]);\n    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\nexport { ContractRoles as C };\n","import { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { d6 as FEATURE_PRIMARY_SALE } from './index-827e427d.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns the wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { utils, BigNumber, constants } from 'ethers';\nimport deepEqual from 'fast-deep-equal';\nimport { aP as resolveAddress, cz as AmountSchema, B as includesErrorMessage, d7 as isNode, cu as ContractWrapper } from './index-827e427d.browser.esm.js';\nimport { v as transformResultToClaimCondition, w as legacyContractModelToAbstract, x as newContractModelToAbstract, C as ClaimEligibility, y as convertQuantityToBigNumber, f as fetchSnapshotEntryForAddress, z as prepareClaim, A as SnapshotFormatVersion, D as processClaimConditionInputs, E as abstractContractModelToLegacy, F as abstractContractModelToNew, H as updateExistingClaimConditions } from './signature-ab20f9e3.browser.esm.js';\nimport { i as isNativeToken, C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { d as detectContractFeature, h as hasFunction } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\n\n/**\n * Manages claim conditions for NFT Drop contracts\n * @public\n */\nclass DropClaimConditions {\n  constructor(contractWrapper, metadata, storage) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  async getActive(options) {\n    const [cc, metadata, tokenDecimals] = await Promise.all([this.get(), this.metadata.get(), this.getTokenDecimals()]);\n    return await transformResultToClaimCondition(cc, tokenDecimals, this.contractWrapper.getProvider(), metadata.merkle || {}, this.storage, options?.withAllowList || false);\n  }\n  async get(conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", []);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [id]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", []);\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [id]);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  async getAll(options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const [currentStartId, countBn] = await this.contractWrapper.read(\"claimCondition\", []);\n      const startId = currentStartId.toNumber();\n      const count = countBn.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(this.get(i));\n      }\n      const [metadata, decimals, ...fetchedConditions] = await Promise.all([this.metadata.get(), this.getTokenDecimals(), ...conditions]);\n      return Promise.all(fetchedConditions.map(c => transformResultToClaimCondition(c, decimals, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false)));\n    } else {\n      return [await this.getActive(options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    if (addressToCheck) {\n      addressToCheck = await resolveAddress(addressToCheck);\n    }\n    return (await this.getClaimIneligibilityReasons(quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    const [resolvedAddress, decimals] = await Promise.all([resolveAddress(addressToCheck), this.getTokenDecimals()]);\n    const quantityWithDecimals = utils.parseUnits(AmountSchema.parse(quantity), decimals);\n    try {\n      claimCondition = await this.getActive();\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      console.warn(\"failed to get active claim condition\", err);\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      const supplyWithDecimals = utils.parseUnits(claimCondition.availableSupply, decimals);\n      if (supplyWithDecimals.lt(quantityWithDecimals)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n        return reasons;\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(resolvedAddress);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(quantity, false, decimals, resolvedAddress);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [activeConditionIndex, resolvedAddress, quantity, claimVerification.proofs, claimVerification.maxClaimable]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [resolvedAddress, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            }]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.read(\"verifyClaim\", [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n            await this.contractWrapper.read(\"verifyClaim\", [activeConditionIndex, resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason : e);\n          const reason = e.reason;\n          switch (reason) {\n            case \"!Qty\":\n              reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n              break;\n            case \"!PriceOrCurrency\":\n              reasons.push(ClaimEligibility.WrongPriceOrCurrency);\n              break;\n            case \"!MaxSupply\":\n              reasons.push(ClaimEligibility.NotEnoughSupply);\n              break;\n            case \"cant claim yet\":\n              reasons.push(ClaimEligibility.ClaimPhaseNotStarted);\n              break;\n            default:\n              {\n                reasons.push(ClaimEligibility.AddressNotAllowed);\n                break;\n              }\n          }\n          return reasons;\n        }\n      }\n    }\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      let claimedSupply = BigNumber.from(0);\n      let maxClaimable = convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, decimals);\n      try {\n        claimedSupply = await this.getSupplyClaimedByWallet(resolvedAddress);\n      } catch (e) {\n        // no-op\n      }\n      if (allowListEntry) {\n        maxClaimable = convertQuantityToBigNumber(allowListEntry.maxClaimable, decimals);\n      }\n      if (maxClaimable.gt(0) && maxClaimable.lt(claimedSupply.add(quantityWithDecimals))) {\n        reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n        return reasons;\n      }\n\n      // if there is no allowlist, or if there is an allowlist and the address is not in it\n      // if maxClaimable is 0, we consider it as the address is not allowed\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (maxClaimable.lte(claimedSupply) || maxClaimable.eq(0)) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims (ONLY FOR LEGACY)\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      let [lastClaimedTimestamp, timestampForNextClaim] = [BigNumber.from(0), BigNumber.from(0)];\n      if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n        activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [activeConditionIndex, resolvedAddress]);\n      } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n        // check for claim timestamp between claims\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [resolvedAddress]);\n      }\n      const now = BigNumber.from(Date.now()).div(1000);\n      if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n        // contract will return MaxUint256 if user has already claimed and cannot claim again\n        if (timestampForNextClaim.eq(constants.MaxUint256)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        } else {\n          reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n        }\n        return reasons;\n      }\n    }\n\n    // if not within a browser context, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(BigNumber.from(quantity));\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(resolvedAddress);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, ERC20Abi, {}, this.storage);\n        const balance = await erc20.read(\"balanceOf\", [resolvedAddress]);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const [metadata, resolvedAddress] = await Promise.all([this.metadata.get(), resolveAddress(claimerAddress)]);\n      return await fetchSnapshotEntryForAddress(resolvedAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the total supply claimed by a specific wallet\n   * @param walletAddress - the wallet address to check\n   * @returns the total supply claimed\n   */\n  async getSupplyClaimedByWallet(walletAddress) {\n    const resolvedAddress = await resolveAddress(walletAddress);\n    if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [resolvedAddress]);\n    }\n    if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const activeClaimConditionId = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [activeClaimConditionId, resolvedAddress]);\n    }\n    throw new Error(\"This contract does not support the getSupplyClaimedByWallet function\");\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions\n   *\n   * @remarks Sets the public mint conditions that need to be fullfiled by users to claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * await dropContract.claimConditions.set(claimConditions);\n   * ```\n   *\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  set = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (claimConditionInputs) {\n      let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let claimConditionsProcessed = claimConditionInputs;\n      if (_this.isLegacySinglePhaseDrop(_this.contractWrapper) || _this.isNewSinglePhaseDrop(_this.contractWrapper)) {\n        resetClaimEligibilityForAll = true;\n        if (claimConditionInputs.length === 0) {\n          claimConditionsProcessed = [{\n            startTime: new Date(0),\n            currencyAddress: constants.AddressZero,\n            price: 0,\n            maxClaimableSupply: 0,\n            maxClaimablePerWallet: 0,\n            waitInSeconds: 0,\n            merkleRootHash: utils.hexZeroPad([0], 32),\n            snapshot: []\n          }];\n        } else if (claimConditionInputs.length > 1) {\n          throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n        }\n      }\n\n      // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n      if (_this.isNewSinglePhaseDrop(_this.contractWrapper) || _this.isNewMultiphaseDrop(_this.contractWrapper)) {\n        claimConditionsProcessed.forEach(cc => {\n          if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n            throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Example: Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\\n\" + \"contract.claimConditions.set([{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n          }\n          if (cc.snapshot && cc.snapshot.length > 0 && cc.maxClaimablePerWallet?.toString() === \"0\" && cc.snapshot.map(s => {\n            if (typeof s === \"string\") {\n              return 0;\n            } else {\n              return Number(s.maxClaimable?.toString() || 0);\n            }\n          }).reduce((acc, current) => {\n            return acc + current;\n          }, 0) === 0) {\n            throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n          }\n        });\n      }\n\n      // process inputs\n      const {\n        snapshotInfos,\n        sortedConditions\n      } = await processClaimConditionInputs(claimConditionsProcessed, await _this.getTokenDecimals(), _this.contractWrapper.getProvider(), _this.storage, _this.getSnapshotFormatVersion());\n      const merkleInfo = {};\n      snapshotInfos.forEach(s => {\n        merkleInfo[s.merkleRoot] = s.snapshotUri;\n      });\n      const metadata = await _this.metadata.get();\n      const encoded = [];\n\n      // upload new merkle roots to snapshot URIs if updated\n      if (!deepEqual(metadata.merkle, merkleInfo)) {\n        const mergedMetadata = await _this.metadata.parseInputMetadata({\n          ...metadata,\n          merkle: merkleInfo\n        });\n        // using internal method to just upload, avoids one contract call\n        const contractURI = await _this.metadata._parseAndUploadMetadata(mergedMetadata);\n\n        // TODO (cc) we could write the merkle tree info on the claim condition metadata instead\n        // TODO (cc) but we still need to maintain the behavior here for older contracts\n        if (hasFunction(\"setContractURI\", _this.contractWrapper)) {\n          const contractEncoder = new ContractEncoder(_this.contractWrapper);\n          encoded.push(contractEncoder.encode(\"setContractURI\", [contractURI]));\n        } else {\n          throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n        }\n      }\n      const cw = _this.contractWrapper;\n      const baseContractEncoder = new ContractEncoder(cw);\n      if (_this.isLegacySinglePhaseDrop(cw)) {\n        const contractEncoderLegacy = new ContractEncoder(cw);\n        encoded.push(contractEncoderLegacy.encode(\"setClaimConditions\", [abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n      } else if (_this.isLegacyMultiPhaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n      } else if (_this.isNewSinglePhaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n      } else if (_this.isNewMultiphaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n      } else {\n        throw new Error(\"Contract does not support claim conditions\");\n      }\n      if (hasFunction(\"multicall\", _this.contractWrapper)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this.contractWrapper,\n          method: \"multicall\",\n          args: [encoded]\n        });\n      }\n      throw new Error(\"Contract does not support multicall\");\n    };\n  })());\n\n  /**\n   * Update a single claim condition with new data.\n   *\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (index, claimConditionInput) => {\n    const existingConditions = await this.getAll();\n    const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n    return await this.set.prepare(newConditionInputs);\n  });\n\n  /** ***************************************\n   * PRIVATE FUNCTIONS\n   *****************************************/\n\n  async getTokenDecimals() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return this.contractWrapper.read(\"decimals\", []);\n    } else {\n      return Promise.resolve(0);\n    }\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   * @internal\n   */\n  async prepareClaim(quantity, checkERC20Allowance) {\n    let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let address = arguments.length > 3 ? arguments[3] : undefined;\n    const [addressToClaim, activeClaimConditions] = await Promise.all([address ? address : this.contractWrapper.getSignerAddress(), this.getActive()]);\n    return prepareClaim(addressToClaim, quantity, activeClaimConditions, async () => (await this.metadata.get()).merkle, decimals, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(destinationAddress, quantity, claimVerification) {\n    const resolvedAddress = await resolveAddress(destinationAddress);\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, utils.toUtf8Bytes(\"\")];\n    }\n    return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - The address to claim to\n   * @param quantity - The quantity to claim\n   * @param options - Options to override the claim transaction\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    // TODO: Transaction Sequence Pattern\n    if (options?.pricePerToken) {\n      throw new Error(\"Price per token is be set via claim conditions by calling `contract.erc721.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(quantity, options?.checkERC20Allowance === undefined ? true : options.checkERC20Allowance, await this.getTokenDecimals());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: await this.getClaimArguments(destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\nexport { DropClaimConditions as D };\n","import { utils, BigNumber } from 'ethers';\nimport { C as ContractEncoder, f as fetchCurrencyMetadata, a as fetchCurrencyValue } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { cG as FEATURE_TOKEN_BATCH_MINTABLE, aP as resolveAddress, cH as FEATURE_TOKEN_BURNABLE, cI as FEATURE_TOKEN_CLAIM_CONDITIONS_V2, bk as CustomContractSchema, cJ as FEATURE_TOKEN_MINTABLE, cK as FEATURE_TOKEN_SIGNATURE_MINTABLE, cz as AmountSchema, cL as FEATURE_TOKEN } from './index-827e427d.browser.esm.js';\nimport { a as assertEnabled } from './assertEnabled-ea837eec.browser.esm.js';\nimport { C as ContractMetadata, d as detectContractFeature } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { D as DropClaimConditions } from './drop-claim-conditions-6a7767e6.browser.esm.js';\nimport invariant from 'tiny-invariant';\nimport { n as normalizePriceValue } from './normalizePriceValue-3b8bca4f.browser.esm.js';\nimport { s as setErc20Allowance } from './setErc20Allowance-7df9a12a.browser.esm.js';\nimport { S as Signature20PayloadInput, k as Signature20PayloadOutput, M as MintRequest20 } from './signature-ab20f9e3.browser.esm.js';\n\n/**\n * Mint Many ERC20 Tokens at once\n * @remarks Token batch minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\n\nclass Erc20BatchMintable {\n  featureName = FEATURE_TOKEN_BATCH_MINTABLE.name;\n  constructor(erc20, contractWrapper) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.token.mint.batch(data);\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async args => {\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const _items = await Promise.all(args.map(item => Promise.all([resolveAddress(item.toAddress), this.erc20.normalizeAmount(item.amount)])));\n    const encoded = _items.map(_ref => {\n      let [address, amount] = _ref;\n      return contractEncoder.encode(\"mintTo\", [address, amount]);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n}\n\nclass Erc20Burnable {\n  featureName = FEATURE_TOKEN_BURNABLE.name;\n  constructor(erc20, contractWrapper) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.token.burn.tokens(amount);\n   * ```\n   */\n  tokens = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burn\",\n      args: [await this.erc20.normalizeAmount(amount)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.token.burn.from(holderAddress, amount);\n   * ```\n   */\n  from = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burnFrom\",\n      args: await Promise.all([resolveAddress(holder), this.erc20.normalizeAmount(amount)])\n    });\n  });\n}\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\n\nclass Erc20ClaimableWithConditions {\n  featureName = FEATURE_TOKEN_CLAIM_CONDITIONS_V2.name;\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.token.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc20, contractWrapper, storage) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropClaimConditions(this.contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.token.drop.claim.to(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional, data to pass to the claim function\n   * @returns - The transaction receipt\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, amount, options) => {\n    const quantity = await this.erc20.normalizeAmount(amount);\n    return await this.conditions.getClaimTransaction(destinationAddress, quantity, options);\n  });\n}\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\n\nclass Erc20Droppable {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.nft.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc20, contractWrapper, storage) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.claim = new Erc20ClaimableWithConditions(this.erc20, this.contractWrapper, this.storage);\n  }\n}\n\n/**\n * Mint ERC20 Tokens\n * @remarks Token minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc20Mintable {\n  featureName = FEATURE_TOKEN_MINTABLE.name;\n\n  /**\n   * Batch mint Tokens to many addresses\n   */\n\n  constructor(erc20, contractWrapper) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.batch = this.detectErc20BatchMintable();\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.token.mint.to(toAddress, amount);\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return await this.getMintTransaction(to, amount);\n  });\n\n  /**\n   * @deprecated Use `contract.erc20.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: await Promise.all([resolveAddress(to), this.erc20.normalizeAmount(amount)])\n    });\n  }\n  detectErc20BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20BatchMintable\")) {\n      return new Erc20BatchMintable(this.erc20, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Enables generating ERC20 Tokens with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\n// TODO consolidate into a single class\n\nclass Erc20SignatureMintable {\n  featureName = FEATURE_TOKEN_SIGNATURE_MINTABLE.name;\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint tokens from a signature\n   *\n   * @remarks Mint a certain amount of tokens from a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc20.signature.generate(payload);\n   *\n   * // Use the signed payload to mint the tokens\n   * const tx = contract.erc20.signature.mint(signedPayload);\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc20SignatureMintable.generate}\n   * @twfeature ERC20SignatureMintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const [message, overrides] = await Promise.all([this.mapPayloadToContractStruct(mintRequest), this.contractWrapper.getCallOverrides()]);\n    // TODO: Transaction Sequence Pattern\n    await setErc20Allowance(this.contractWrapper, BigNumber.from(message.price), mintRequest.currencyAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintWithSignature\",\n      args: [message, signature],\n      overrides\n    });\n  });\n\n  /**\n   * Mint any number of generated tokens signatures at once\n   * @remarks Mint multiple token signatures in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC20SignatureMintable\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n    const messages = await Promise.all(signedPayloads.map(s => this.mapPayloadToContractStruct(s.payload)));\n    const contractPayloads = signedPayloads.map((s, index) => {\n      const message = messages[index];\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    });\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = contractPayloads.map(p => {\n      return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC20SignatureMintable\n   *\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = await contract.erc20.signature.generate(payload);\n   * // Now you can verify if the signed payload is valid\n   * const isValid = await contract.erc20.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a certain amount of tokens\n   *\n   * @remarks Takes in a quantity of tokens, some conditions for how it can be minted and signs it with your private key. The generated signature can then be used to mint those tokens using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = await contract.erc20.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc20.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC20SignatureMintable\n   */\n  async generate(mintRequest) {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many token signatures.\n   *\n   * @remarks See {@link Erc20SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC20SignatureMintable\n   */\n  async generateBatch(payloadsToSign) {\n    await this.roles?.verify([\"minter\"], await this.contractWrapper.getSignerAddress());\n    const [chainId, name, parsedRequests] = await Promise.all([this.contractWrapper.getChainID(), this.contractWrapper.read(\"name\", []),\n    // ERC20Permit (EIP-712) spec differs from signature mint 721, 1155. \n    Promise.all(payloadsToSign.map(m => Signature20PayloadInput.parseAsync(m)))]);\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    const finalPayloads = await Promise.all(parsedRequests.map(m => Signature20PayloadOutput.parseAsync(m)));\n    const contractStructs = await Promise.all(finalPayloads.map(payload => this.mapPayloadToContractStruct(payload)));\n    const signatures = await Promise.all(contractStructs.map(struct => this.contractWrapper.signTypedData(signer, {\n      name,\n      version: \"1\",\n      chainId,\n      verifyingContract: this.contractWrapper.address\n    }, {\n      MintRequest: MintRequest20\n    }, struct)));\n    return parsedRequests.map((m, index) => {\n      const finalPayload = finalPayloads[index];\n      const signature = signatures[index];\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    });\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const [normalizedPrice, decimals] = await Promise.all([normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress), this.contractWrapper.read(\"decimals\", [])]);\n    const amountWithDecimals = utils.parseUnits(mintRequest.quantity, decimals);\n    return {\n      to: mintRequest.to,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      quantity: amountWithDecimals,\n      price: normalizedPrice,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid\n    };\n  }\n}\n\nasync function normalizeAmount(contractWrapper, amount) {\n  const decimals = await contractWrapper.read(\"decimals\", []);\n  return utils.parseUnits(AmountSchema.parse(amount), decimals);\n}\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc20.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass Erc20 {\n  featureName = FEATURE_TOKEN.name;\n  /**\n   * Mint tokens\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.mintable = this.detectErc20Mintable();\n    this.burnable = this.detectErc20Burnable();\n    this.droppable = this.detectErc20Droppable();\n    this.signatureMintable = this.detectErc20SignatureMintable();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC20 Extension //////\n\n  /**\n   * Get the token metadata\n   * @remarks name, symbol, etc...\n   * @example\n   * ```javascript\n   * const token = await contract.erc20.get();\n   * ```\n   * @returns The token metadata\n   * @twfeature ERC20\n   */\n  async get() {\n    return await fetchCurrencyMetadata(this.contractWrapper.getProvider(), this.getAddress());\n  }\n\n  /**\n   * Get token balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.erc20.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   * @twfeature ERC20\n   */\n  async balance() {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get token balance for a specific wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.erc20.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   * @twfeature ERC20\n   */\n  async balanceOf(address) {\n    return this.getValue(await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address)]));\n  }\n\n  /**\n   * Get the total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.erc20.totalSupply();\n   * ```\n   * @twfeature ERC20\n   */\n  async totalSupply() {\n    return await this.getValue(await this.contractWrapper.read(\"totalSupply\", []));\n  }\n\n  /**\n   * Get token allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.erc20.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   * @twfeature ERC20\n   */\n  async allowance(spender) {\n    const [owner, spenderAddress] = await Promise.all([this.contractWrapper.getSignerAddress(), resolveAddress(spender)]);\n    return await this.allowanceOf(owner, spenderAddress);\n  }\n\n  /**\n   * Get token allowance of a specific wallet\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.erc20.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   * @twfeature ERC20\n   */\n  async allowanceOf(owner, spender) {\n    const args = await Promise.all([resolveAddress(owner), resolveAddress(spender)]);\n    return await this.getValue(await this.contractWrapper.read(\"allowance\", args));\n  }\n\n  /**\n   * Transfer tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.erc20.transfer(toAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"transfer\",\n      args: await Promise.all([resolveAddress(to), this.normalizeAmount(amount)])\n    });\n  });\n\n  /**\n   * Transfer tokens from a specific address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.erc20.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"transferFrom\",\n      args: await Promise.all([resolveAddress(from), resolveAddress(to), this.normalizeAmount(amount)])\n    });\n  });\n\n  /**\n   * Set token allowance\n   * @remarks Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.erc20.setAllowance(spenderAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: await Promise.all([resolveAddress(spender), this.normalizeAmount(amount)])\n    });\n  });\n\n  /**\n   * Transfer tokens to many wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.erc20.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = (await Promise.all(args.map(arg => Promise.all([this.normalizeAmount(arg.amount), resolveAddress(arg.toAddress)])))).map(_ref => {\n      let [amountWithDecimals, address] = _ref;\n      return contractEncoder.encode(\"transfer\", [address, amountWithDecimals]);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  ////// ERC20 Mintable Extension //////\n\n  /**\n   * Mint tokens\n   *\n   * @remarks Mint tokens to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.erc20.mint(amount);\n   * ```\n   * @twfeature ERC20Mintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), amount);\n  });\n\n  /**\n   * Mint tokens to a specific wallet\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.erc20.mintTo(toAddress, amount);\n   * ```\n   * @twfeature ERC20Mintable\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (receiver, amount) => {\n    return assertEnabled(this.mintable, FEATURE_TOKEN_MINTABLE).to.prepare(receiver, amount);\n  });\n\n  /**\n   * Construct a mint transaction without executing it\n   * @remarks This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.erc20.mint.prepare(...args)` instead\n   * @twfeature ERC20Mintable\n   */\n  async getMintTransaction(receiver, amount) {\n    return assertEnabled(this.mintable, FEATURE_TOKEN_MINTABLE).getMintTransaction(receiver, amount);\n  }\n\n  ////// ERC20 BatchMintable Extension //////\n\n  /**\n   * Mint tokens to many wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   * @twfeature ERC20BatchMintable\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async args => {\n    return assertEnabled(this.mintable?.batch, FEATURE_TOKEN_BATCH_MINTABLE).to.prepare(args);\n  });\n\n  ////// ERC20 Burnable Extension //////\n\n  /**\n   * Burn tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.erc20.burn(amount);\n   * ```\n   * @twfeature ERC20Burnable\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return assertEnabled(this.burnable, FEATURE_TOKEN_BURNABLE).tokens.prepare(amount);\n  });\n\n  /**\n   * Burn tokens from a specific wallet\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.erc20.burnFrom(holderAddress, amount);\n   * ```\n   * @twfeature ERC20Burnable\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return assertEnabled(this.burnable, FEATURE_TOKEN_BURNABLE).from.prepare(holder, amount);\n  });\n\n  ////// ERC20 Claimable Extension //////\n\n  /**\n   * Claim tokens\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.erc20.claim(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional, claim data\n   * @returns - The transaction receipt\n   * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n   */\n  claim = /* @__PURE__ */buildTransactionFunction(async (amount, options) => {\n    return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), amount, options);\n  });\n\n  /**\n   * Claim tokens to a specific wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.erc20.claim(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional, claim data\n   * @returns - The transaction receipt\n   * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, amount, options) => {\n    return assertEnabled(this.droppable?.claim, FEATURE_TOKEN_CLAIM_CONDITIONS_V2).to.prepare(destinationAddress, amount, options);\n  });\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc20.claimConditions.set(claimConditions);\n   * ```\n   * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n   */\n  get claimConditions() {\n    return assertEnabled(this.droppable?.claim, FEATURE_TOKEN_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC20 SignatureMint Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic tokens with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc20.signature.generate()` documentation\n   * const signedPayload = contract.erc20.signature().generate(payload);\n   *\n   * // now the payload can be used to mint tokens\n   * const tx = contract.erc20.signature.mint(signedPayload);\n   * ```\n   * @twfeature ERC20SignatureMintable\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_TOKEN_SIGNATURE_MINTABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * returns the wei amount from a token amount\n   * @internal\n   * @param amount - The token amount\n   */\n  async normalizeAmount(amount) {\n    return normalizeAmount(this.contractWrapper, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async getValue(value) {\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), this.getAddress(), BigNumber.from(value));\n  }\n  detectErc20Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20Mintable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20Burnable\")) {\n      return new Erc20Burnable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20Droppable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimPhasesV2\")) {\n      return new Erc20Droppable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc20SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20SignatureMintable\")) {\n      return new Erc20SignatureMintable(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\nexport { Erc20BatchMintable as E, Erc20Burnable as a, Erc20ClaimableWithConditions as b, Erc20Droppable as c, Erc20Mintable as d, Erc20SignatureMintable as e, Erc20 as f, normalizeAmount as n };\n","import { c as buildTransactionFunction } from './transactions-ec5ea12e.browser.esm.js';\nimport { f as Erc20 } from './erc-20-e1bc30a0.browser.esm.js';\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.transfer.prepare(to, amount);\n  });\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return this.erc20.transferFrom.prepare(from, to, amount);\n  });\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return this.erc20.setAllowance.prepare(spender, amount);\n  });\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.transferBatch.prepare(args);\n  });\n}\n\nexport { StandardErc20 as S };\n","import { cA as BigNumberTransformSchema, cB as FileOrBufferOrStringSchema, cC as HexColor, cu as ContractWrapper } from './index-827e427d.browser.esm.js';\nimport { z } from 'zod';\nimport { i as isNativeToken } from './fetchCurrencyValue-39f97190.browser.esm.js';\n\nconst PropertiesInput = /* @__PURE__ */(() => z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = /* @__PURE__ */(() => z.union([z.array(PropertiesInput), PropertiesInput]).optional().nullable())();\n\n/**\n * @internal\n */\nconst BasicNFTInput = /* @__PURE__ */(() => z.object({\n  name: z.union([z.string(), z.number()]).optional().nullable(),\n  description: z.string().nullable().optional().nullable(),\n  image: FileOrBufferOrStringSchema.nullable().optional(),\n  animation_url: FileOrBufferOrStringSchema.optional().nullable()\n}))();\n\n/**\n * @internal\n */\nconst CommonNFTInput = /* @__PURE__ */(() => BasicNFTInput.extend({\n  external_url: FileOrBufferOrStringSchema.nullable().optional(),\n  background_color: HexColor.optional().nullable(),\n  properties: OptionalPropertiesInput,\n  attributes: OptionalPropertiesInput\n}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst NFTInputOrUriSchema = /* @__PURE__ */(() => z.union([CommonNFTInput, z.string()]))();\n\n/**\n * @internal\n */\nconst CommonNFTOutput = /* @__PURE__ */(() => CommonNFTInput.extend({\n  id: z.string(),\n  uri: z.string(),\n  image: z.string().nullable().optional(),\n  external_url: z.string().nullable().optional(),\n  animation_url: z.string().nullable().optional()\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.address;\n    const allowance = await erc20.read(\"allowance\", [owner, spender]);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\nexport { BasicNFTInput as B, CommonNFTOutput as C, NFTInputOrUriSchema as N, CommonNFTInput as a, setErc20Allowance as s };\n","import { Buffer } from 'buffer';\nimport reverse from 'buffer-reverse';\nimport { asTree } from 'treeify';\n\n// ADAPTED FROM https://github.com/merkletreejs/merkletreejs\nclass Base {\n  /**\n   * print\n   * @desc Prints out a visual representation of the merkle tree.\n   * @example\n   *```js\n   *tree.print()\n   *```\n   */\n  print() {\n    Base.print(this);\n  }\n\n  /**\n   * bufferIndexOf\n   * @desc Returns the first index of which given buffer is found in array.\n   * @param {Buffer[]} haystack - Array of buffers.\n   * @param {Buffer} needle - Buffer to find.\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.bufferIndexOf(haystack, needle)\n   *```\n   */\n  bufferIndexOf(array, element) {\n    let isSorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (isSorted) {\n      return this.binarySearch(array, element, Buffer.compare);\n    }\n    const eqChecker = (buffer1, buffer2) => buffer1.equals(buffer2);\n    return this.linearSearch(array, element, eqChecker);\n  }\n\n  /**\n   * binarySearch\n   * @desc Returns the first index of which given item is found in array using binary search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} compareFunction\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = MerkleTree.binarySearch(array, element, Buffer.compare)\n   *```\n   */\n  static binarySearch(array, element, compareFunction) {\n    let start = 0;\n    let end = array.length - 1;\n\n    // Iterate while start not meets end\n    while (start <= end) {\n      // Find the mid index\n      const mid = Math.floor((start + end) / 2);\n\n      // Check if the mid value is greater than, equal to, or less than search element.\n      const ordering = compareFunction(array[mid], element);\n\n      // If element is present at mid, start iterating for searching first appearance.\n      if (ordering === 0) {\n        // Linear reverse iteration until the first matching item index is found.\n        for (let i = mid - 1; i >= 0; i--) {\n          if (compareFunction(array[i], element) === 0) {\n            continue;\n          }\n          return i + 1;\n        }\n        return 0;\n      } /* Else look in left or right half accordingly */else if (ordering < 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * binarySearch\n   * @desc Returns the first index of which given item is found in array using binary search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} compareFunction\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.binarySearch(array, element, Buffer.compare)\n   *```\n   */\n  binarySearch(array, element, compareFunction) {\n    return Base.binarySearch(array, element, compareFunction);\n  }\n\n  /**\n   * linearSearch\n   * @desc Returns the first index of which given item is found in array using linear search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} eqChecker\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = MerkleTree.linearSearch(array, element, (a, b) => a === b)\n   *```\n   */\n  static linearSearch(array, element, eqChecker) {\n    for (let i = 0; i < array.length; i++) {\n      if (eqChecker(array[i], element)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * linearSearch\n   * @desc Returns the first index of which given item is found in array using linear search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} eqChecker\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.linearSearch(array, element, (a, b) => a === b)\n   *```\n   */\n  linearSearch(array, element, eqChecker) {\n    return Base.linearSearch(array, element, eqChecker);\n  }\n\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer|ArrayBuffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = MerkleTree.bufferify('0x1234')\n   *```\n   */\n  static bufferify(value) {\n    if (!Buffer.isBuffer(value)) {\n      // crypto-js support\n      if (typeof value === \"object\" && value.words) {\n        return Buffer.from(value.toString(convertWordsToBuffer), \"hex\");\n      } else if (Base.isHexString(value)) {\n        return Buffer.from(value.replace(/^0x/, \"\"), \"hex\");\n      } else if (typeof value === \"string\") {\n        return Buffer.from(value);\n      } else if (typeof value === \"bigint\") {\n        return Buffer.from(value.toString(16), \"hex\");\n      } else if (value instanceof Uint8Array) {\n        return Buffer.from(value.buffer);\n      } else if (typeof value === \"number\") {\n        let s = value.toString();\n        if (s.length % 2) {\n          s = `0${s}`;\n        }\n        return Buffer.from(s, \"hex\");\n      } else if (ArrayBuffer.isView(value)) {\n        return Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n      }\n    }\n    return value;\n  }\n  bigNumberify(value) {\n    return Base.bigNumberify(value);\n  }\n  static bigNumberify(value) {\n    if (typeof value === \"bigint\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      if (value.startsWith(\"0x\") && Base.isHexString(value)) {\n        return BigInt(\"0x\" + value.replace(\"0x\", \"\").toString());\n      }\n      return BigInt(value);\n    }\n    if (Buffer.isBuffer(value)) {\n      return BigInt(\"0x\" + value.toString(\"hex\"));\n    }\n    if (value instanceof Uint8Array) {\n      return uint8ArrayToBigInt(value);\n    }\n    if (typeof value === \"number\") {\n      return BigInt(value);\n    }\n    throw new Error(\"cannot bigNumberify\");\n  }\n\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n  static isHexString(v) {\n    return typeof v === \"string\" && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n  }\n\n  /**\n   * print\n   * @desc Prints out a visual representation of the given merkle tree.\n   * @param {Object} tree - Merkle tree instance.\n   * @return {String}\n   * @example\n   *```js\n   *MerkleTree.print(tree)\n   *```\n   */\n  static print(tree) {\n    console.log(tree.toString());\n  }\n\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = tree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n  bufferToHex(value) {\n    let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Base.bufferToHex(value, withPrefix);\n  }\n\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n  static bufferToHex(value) {\n    let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return `${withPrefix ? \"0x\" : \"\"}${(value || Buffer.alloc(0)).toString(\"hex\")}`;\n  }\n\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = tree.bufferify('0x1234')\n   *```\n   */\n  bufferify(value) {\n    return Base.bufferify(value);\n  }\n\n  /**\n   * bufferifyFn\n   * @desc Returns a function that will bufferify the return value.\n   * @param {Function}\n   * @return {Function}\n   *\n   * @example\n   * ```js\n   *const fn = tree.bufferifyFn((value) => sha256(value))\n   *```\n   */\n  bufferifyFn(f) {\n    return value => {\n      const v = f(value);\n      if (Buffer.isBuffer(v)) {\n        return v;\n      }\n      if (this.isHexString(v)) {\n        return Buffer.from(v.replace(\"0x\", \"\"), \"hex\");\n      }\n      if (typeof v === \"string\") {\n        return Buffer.from(v);\n      }\n      if (typeof v === \"bigint\") {\n        return Buffer.from(value.toString(16), \"hex\");\n      }\n      if (ArrayBuffer.isView(v)) {\n        return Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n      }\n\n      // crypto-js support\n      const arrayBuffer = hexStringToArrayBuffer(value.toString(\"hex\"));\n      // Assuming f now works with ArrayBuffers\n      const processedBuffer = f(arrayBuffer);\n      const hexResult = arrayBufferToHexString(processedBuffer);\n      return Buffer.from(hexResult, \"hex\");\n    };\n  }\n\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n  isHexString(value) {\n    return Base.isHexString(value);\n  }\n\n  /**\n   * log2\n   * @desc Returns the log2 of number.\n   * @param {Number} value\n   * @return {Number}\n   */\n  log2(n) {\n    return n === 1 ? 0 : 1 + this.log2(n / 2 | 0);\n  }\n\n  /**\n   * zip\n   * @desc Returns true if value is a hex string.\n   * @param {String[]|Number[]|Buffer[]} a - first array\n   * @param {String[]|Number[]|Buffer[]} b -  second array\n   * @return {String[][]|Number[][]|Buffer[][]}\n   *\n   * @example\n   * ```js\n   *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n   *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n   *```\n   */\n  zip(a, b) {\n    return a.map((e, i) => [e, b[i]]);\n  }\n  static hexZeroPad(hexStr, length) {\n    return \"0x\" + hexStr.replace(\"0x\", \"\").padStart(length, \"0\");\n  }\n}\nvar Base$1 = Base;\n\n// UTILS\n\n// replaces CryptoJS.enc.Hex\nfunction convertWordsToBuffer(value) {\n  const wordArray = value.words;\n  const arrayBuffer = new ArrayBuffer(wordArray.length * 4); // 4 bytes per word\n  const uint8View = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < wordArray.length; i++) {\n    uint8View[i * 4] = wordArray[i] >> 24 & 0xff;\n    uint8View[i * 4 + 1] = wordArray[i] >> 16 & 0xff;\n    uint8View[i * 4 + 2] = wordArray[i] >> 8 & 0xff;\n    uint8View[i * 4 + 3] = wordArray[i] & 0xff;\n  }\n  return arrayBuffer;\n}\nfunction hexStringToArrayBuffer(hexString) {\n  const buffer = new Uint8Array(hexString.length / 2);\n  for (let i = 0; i < hexString.length; i += 2) {\n    buffer[i / 2] = parseInt(hexString.substring(i, i + 2), 16);\n  }\n  return buffer.buffer;\n}\nfunction arrayBufferToHexString(arrayBuffer) {\n  const uint8View = new Uint8Array(arrayBuffer);\n  return Array.from(uint8View).map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction uint8ArrayToBigInt(u8a) {\n  const hex = Array.from(u8a).map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n  return BigInt(`0x${hex}`);\n}\n\n// ADAPTED FROM https://github.com/merkletreejs/merkletreejs\n\n// TODO: Clean up and DRY up code\n// Disclaimer: The multiproof code is unaudited and may possibly contain serious issues. It's in a hacky state as is and needs to be rewritten.\n/**\n * Class reprensenting a Merkle Tree\n * @namespace MerkleTree\n */\nclass MerkleTree extends Base$1 {\n  duplicateOdd = false;\n  concatenator = Buffer.concat;\n  hashLeaves = false;\n  isBitcoinTree = false;\n  leaves = [];\n  layers = [];\n  sortLeaves = false;\n  sortPairs = false;\n  sort = false;\n  fillDefaultHash = null;\n  complete = false;\n\n  /**\n   * @desc Constructs a Merkle Tree.\n   * All nodes and leaves are stored as Buffers.\n   * Lonely leaf nodes are promoted to the next level up without being hashed again.\n   * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.\n   * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes\n   * @param {Object} options - Additional options\n   * @example\n   *```js\n   *const MerkleTree = require('merkletreejs')\n   *const crypto = require('crypto')\n   *\n   *function sha256(data) {\n   *  // returns Buffer\n   *  return crypto.createHash('sha256').update(data).digest()\n   *}\n   *\n   *const leaves = ['a', 'b', 'c'].map(value => keccak(value))\n   *\n   *const tree = new MerkleTree(leaves, sha256)\n   *```\n   */\n  constructor(leaves, hashFn) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    if (options.complete) {\n      if (options.isBitcoinTree) {\n        throw new Error('option \"complete\" is incompatible with \"isBitcoinTree\"');\n      }\n      if (options.duplicateOdd) {\n        throw new Error('option \"complete\" is incompatible with \"duplicateOdd\"');\n      }\n    }\n    this.isBitcoinTree = !!options.isBitcoinTree;\n    this.hashLeaves = !!options.hashLeaves;\n    this.sortLeaves = !!options.sortLeaves;\n    this.sortPairs = !!options.sortPairs;\n    this.complete = !!options.complete;\n    if (options.fillDefaultHash) {\n      if (typeof options.fillDefaultHash === \"function\") {\n        this.fillDefaultHash = options.fillDefaultHash;\n      } else if (Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === \"string\") {\n        this.fillDefaultHash = (idx, hashFn) => options.fillDefaultHash;\n      } else {\n        throw new Error('method \"fillDefaultHash\" must be a function, Buffer, or string');\n      }\n    }\n    this.sort = !!options.sort;\n    if (this.sort) {\n      this.sortLeaves = true;\n      this.sortPairs = true;\n    }\n    this.duplicateOdd = !!options.duplicateOdd;\n    if (options.concatenator) {\n      this.concatenator = options.concatenator;\n    }\n    this.hashFn = this.bufferifyFn(hashFn);\n    this.processLeaves(leaves);\n  }\n  getOptions() {\n    return {\n      complete: this.complete,\n      isBitcoinTree: this.isBitcoinTree,\n      hashLeaves: this.hashLeaves,\n      sortLeaves: this.sortLeaves,\n      sortPairs: this.sortPairs,\n      sort: this.sort,\n      fillDefaultHash: this.fillDefaultHash?.toString() ?? null,\n      duplicateOdd: this.duplicateOdd\n    };\n  }\n  processLeaves(leaves) {\n    if (this.hashLeaves) {\n      leaves = leaves.map(this.hashFn);\n    }\n    this.leaves = leaves.map(this.bufferify);\n    if (this.sortLeaves) {\n      this.leaves = this.leaves.sort(Buffer.compare);\n    }\n    if (this.fillDefaultHash) {\n      for (let i = this.leaves.length; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++) {\n        this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));\n      }\n    }\n    this.createHashes(this.leaves);\n  }\n  createHashes(nodes) {\n    this.layers = [nodes];\n    while (nodes.length > 1) {\n      const layerIndex = this.layers.length;\n      this.layers.push([]);\n      const layerLimit = this.complete && layerIndex === 1 && !Number.isInteger(Math.log2(nodes.length)) ? 2 * nodes.length - 2 ** Math.ceil(Math.log2(nodes.length)) : nodes.length;\n      for (let i = 0; i < nodes.length; i += 2) {\n        if (i >= layerLimit) {\n          this.layers[layerIndex].push(...nodes.slice(layerLimit));\n          break;\n        } else if (i + 1 === nodes.length) {\n          if (nodes.length % 2 === 1) {\n            const data = nodes[nodes.length - 1];\n            let hash = data;\n\n            // is bitcoin tree\n            if (this.isBitcoinTree) {\n              // Bitcoin method of duplicating the odd ending nodes\n              hash = this.hashFn(this.concatenator([reverse(data), reverse(data)]));\n              hash = reverse(this.hashFn(hash));\n              this.layers[layerIndex].push(hash);\n              continue;\n            } else {\n              if (this.duplicateOdd) ; else {\n                // push copy of hash and continue iteration\n                this.layers[layerIndex].push(nodes[i]);\n                continue;\n              }\n            }\n          }\n        }\n        const left = nodes[i];\n        const right = i + 1 === nodes.length ? left : nodes[i + 1];\n        let combined = null;\n        if (this.isBitcoinTree) {\n          combined = [reverse(left), reverse(right)];\n        } else {\n          combined = [left, right];\n        }\n        if (this.sortPairs) {\n          combined.sort(Buffer.compare);\n        }\n        let hash = this.hashFn(this.concatenator(combined));\n\n        // double hash if bitcoin tree\n        if (this.isBitcoinTree) {\n          hash = reverse(this.hashFn(hash));\n        }\n        this.layers[layerIndex].push(hash);\n      }\n      nodes = this.layers[layerIndex];\n    }\n  }\n\n  /**\n   * addLeaf\n   * @desc Adds a leaf to the tree and re-calculates layers.\n   * @param {String|Buffer} - Leaf\n   * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.\n   * @example\n   *```js\n   *tree.addLeaf(newLeaf)\n   *```\n   */\n  addLeaf(leaf) {\n    let shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (shouldHash) {\n      leaf = this.hashFn(leaf);\n    }\n    this.processLeaves(this.leaves.concat(leaf));\n  }\n\n  /**\n   * addLeaves\n   * @desc Adds multiple leaves to the tree and re-calculates layers.\n   * @param {String[]|Buffer[]} - Array of leaves\n   * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.\n   * @example\n   *```js\n   *tree.addLeaves(newLeaves)\n   *```\n   */\n  addLeaves(leaves) {\n    let shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (shouldHash) {\n      leaves = leaves.map(this.hashFn);\n    }\n    this.processLeaves(this.leaves.concat(leaves));\n  }\n\n  /**\n   * getLeaves\n   * @desc Returns array of leaves of Merkle Tree.\n   * @return {Buffer[]}\n   * @example\n   *```js\n   *const leaves = tree.getLeaves()\n   *```\n   */\n  getLeaves(values) {\n    if (Array.isArray(values)) {\n      if (this.hashLeaves) {\n        values = values.map(this.hashFn);\n        if (this.sortLeaves) {\n          values = values.sort(Buffer.compare);\n        }\n      }\n      return this.leaves.filter(\n      // @ts-expect-error - issue from original code\n      leaf => this.bufferIndexOf(values, leaf, this.sortLeaves) !== -1);\n    }\n    return this.leaves;\n  }\n\n  /**\n   * getLeaf\n   * @desc Returns the leaf at the given index.\n   * @param {Number} - Index number\n   * @return {Buffer}\n   * @example\n   *```js\n   *const leaf = tree.getLeaf(1)\n   *```\n   */\n  getLeaf(index) {\n    if (index < 0 || index > this.leaves.length - 1) {\n      return Buffer.from([]);\n    }\n    return this.leaves[index];\n  }\n\n  /**\n   * getLeafIndex\n   * @desc Returns the index of the given leaf, or -1 if the leaf is not found.\n   * @param {String|Buffer} - Target leaf\n   * @return {number}\n   * @example\n   *```js\n   *const leaf = Buffer.from('abc')\n   *const index = tree.getLeafIndex(leaf)\n   *```\n   */\n  getLeafIndex(target) {\n    target = this.bufferify(target);\n    const leaves = this.getLeaves();\n    for (let i = 0; i < leaves.length; i++) {\n      const leaf = leaves[i];\n      if (leaf.equals(target)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * getLeafCount\n   * @desc Returns the total number of leaves.\n   * @return {number}\n   * @example\n   *```js\n   *const count = tree.getLeafCount()\n   *```\n   */\n  getLeafCount() {\n    return this.leaves.length;\n  }\n\n  /**\n   * getHexLeaves\n   * @desc Returns array of leaves of Merkle Tree as hex strings.\n   * @return {String[]}\n   * @example\n   *```js\n   *const leaves = tree.getHexLeaves()\n   *```\n   */\n  getHexLeaves() {\n    return this.leaves.map(leaf => this.bufferToHex(leaf));\n  }\n\n  /**\n   * marshalLeaves\n   * @desc Returns array of leaves of Merkle Tree as a JSON string.\n   * @param {String[]|Buffer[]} - Merkle tree leaves\n   * @return {String} - List of leaves as JSON string\n   * @example\n   *```js\n   *const jsonStr = MerkleTree.marshalLeaves(leaves)\n   *```\n   */\n  static marshalLeaves(leaves) {\n    return JSON.stringify(leaves.map(leaf => MerkleTree.bufferToHex(leaf)), null, 2);\n  }\n\n  /**\n   * unmarshalLeaves\n   * @desc Returns array of leaves of Merkle Tree as a Buffers.\n   * @param {String|Object} - JSON stringified leaves\n   * @return {Buffer[]} - Unmarshalled list of leaves\n   * @example\n   *```js\n   *const leaves = MerkleTree.unmarshalLeaves(jsonStr)\n   *```\n   */\n  static unmarshalLeaves(jsonStr) {\n    let parsed = null;\n    if (typeof jsonStr === \"string\") {\n      parsed = JSON.parse(jsonStr);\n    } else if (jsonStr instanceof Object) {\n      parsed = jsonStr;\n    } else {\n      throw new Error(\"Expected type of string or object\");\n    }\n    if (!parsed) {\n      return [];\n    }\n    if (!Array.isArray(parsed)) {\n      throw new Error(\"Expected JSON string to be array\");\n    }\n    return parsed.map(MerkleTree.bufferify);\n  }\n\n  /**\n   * getLayers\n   * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.\n   * @return {Buffer[][]}\n   * @example\n   *```js\n   *const layers = tree.getLayers()\n   *```\n   */\n  getLayers() {\n    return this.layers;\n  }\n\n  /**\n   * getHexLayers\n   * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.\n   * @return {String[][]}\n   * @example\n   *```js\n   *const layers = tree.getHexLayers()\n   *```\n   */\n  getHexLayers() {\n    return this.layers.reduce((acc, item) => {\n      if (Array.isArray(item)) {\n        acc.push(item.map(layer => this.bufferToHex(layer)));\n      } else {\n        acc.push(item);\n      }\n      return acc;\n    }, []);\n  }\n\n  /**\n   * getLayersFlat\n   * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.\n   * @return {Buffer[]}\n   * @example\n   *```js\n   *const layers = tree.getLayersFlat()\n   *```\n   */\n  getLayersFlat() {\n    const layers = this.layers.reduce((acc, item) => {\n      if (Array.isArray(item)) {\n        acc.unshift(...item);\n      } else {\n        acc.unshift(item);\n      }\n      return acc;\n    }, []);\n    layers.unshift(Buffer.from([0]));\n    return layers;\n  }\n\n  /**\n   * getHexLayersFlat\n   * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.\n   * @return {String[]}\n   * @example\n   *```js\n   *const layers = tree.getHexLayersFlat()\n   *```\n   */\n  getHexLayersFlat() {\n    return this.getLayersFlat().map(layer => this.bufferToHex(layer));\n  }\n\n  /**\n   * getLayerCount\n   * @desc Returns the total number of layers.\n   * @return {number}\n   * @example\n   *```js\n   *const count = tree.getLayerCount()\n   *```\n   */\n  getLayerCount() {\n    return this.getLayers().length;\n  }\n\n  /**\n   * getRoot\n   * @desc Returns the Merkle root hash as a Buffer.\n   * @return {Buffer}\n   * @example\n   *```js\n   *const root = tree.getRoot()\n   *```\n   */\n  getRoot() {\n    if (this.layers.length === 0) {\n      return Buffer.from([]);\n    }\n    return this.layers[this.layers.length - 1][0] || Buffer.from([]);\n  }\n\n  /**\n   * getHexRoot\n   * @desc Returns the Merkle root hash as a hex string.\n   * @return {String}\n   * @example\n   *```js\n   *const root = tree.getHexRoot()\n   *```\n   */\n  getHexRoot() {\n    return this.bufferToHex(this.getRoot());\n  }\n\n  /**\n   * getProof\n   * @desc Returns the proof for a target leaf.\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {Object[]} - Array of objects containing a position property of type string\n   * with values of 'left' or 'right' and a data property of type Buffer.\n   * @example\n   * ```js\n   *const proof = tree.getProof(leaves[2])\n   *```\n   *\n   * @example\n   *```js\n   *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n   *const tree = new MerkleTree(leaves, keccak)\n   *const proof = tree.getProof(leaves[2], 2)\n   *```\n   */\n  getProof(leaf, index) {\n    if (typeof leaf === \"undefined\") {\n      throw new Error(\"leaf is required\");\n    }\n    leaf = this.bufferify(leaf);\n    const proof = [];\n    if (!Number.isInteger(index)) {\n      index = -1;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (Buffer.compare(leaf, this.leaves[i]) === 0) {\n          index = i;\n        }\n      }\n    }\n\n    // @ts-expect-error - issue from original code\n    if (index <= -1) {\n      return [];\n    }\n    for (let i = 0; i < this.layers.length; i++) {\n      const layer = this.layers[i];\n      // @ts-expect-error - issue from original code\n      const isRightNode = index % 2;\n      const pairIndex = isRightNode ?\n      // @ts-expect-error - issue from original code\n      index - 1 : this.isBitcoinTree && index === layer.length - 1 && i < this.layers.length - 1 ?\n      // Proof Generation for Bitcoin Trees\n      index :\n      // Proof Generation for Non-Bitcoin Trees\n      // @ts-expect-error - issue from original code\n      index + 1;\n      if (pairIndex < layer.length) {\n        proof.push({\n          position: isRightNode ? \"left\" : \"right\",\n          data: layer[pairIndex]\n        });\n      }\n\n      // set index to parent index\n      // @ts-expect-error - issue from original code\n      index = index / 2 | 0;\n    }\n\n    // @ts-expect-error - issue from original code\n    return proof;\n  }\n\n  /**\n   * getHexProof\n   * @desc Returns the proof for a target leaf as hex strings.\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {String[]} - Proof array as hex strings.\n   * @example\n   * ```js\n   *const proof = tree.getHexProof(leaves[2])\n   *```\n   */\n  getHexProof(leaf, index) {\n    return this.getProof(leaf, index).map(item => this.bufferToHex(item.data));\n  }\n\n  /**\n   * getProofs\n   * @desc Returns the proofs for all leaves.\n   * @return {Object[]} - Array of objects containing a position property of type string\n   * with values of 'left' or 'right' and a data property of type Buffer for all leaves.\n   * @example\n   * ```js\n   *const proofs = tree.getProofs()\n   *```\n   *\n   * @example\n   *```js\n   *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n   *const tree = new MerkleTree(leaves, keccak)\n   *const proofs = tree.getProofs()\n   *```\n   */\n  getProofs() {\n    // @ts-expect-error - issue from original code\n    const proof = [];\n    // @ts-expect-error - issue from original code\n    const proofs = [];\n\n    // @ts-expect-error - issue from original code\n    this.getProofsDFS(this.layers.length - 1, 0, proof, proofs);\n\n    // @ts-expect-error - issue from original code\n    return proofs;\n  }\n\n  /**\n   * getProofsDFS\n   * @desc Get all proofs through single traverse\n   * @param {Number} currentLayer - Current layer index in traverse.\n   * @param {Number} index - Current tarvese node index in traverse.\n   * @param {Object[]} proof - Proof chain for single leaf.\n   * @param {Object[]} proofs - Proofs for all leaves\n   * @example\n   * ```js\n   *const layers = tree.getLayers()\n   *const index = 0;\n   *let proof = [];\n   *let proofs = [];\n   *const proof = tree.getProofsDFS(layers, index, proof, proofs)\n   *```\n   */\n  // @ts-expect-error - issue from original code\n  getProofsDFS(currentLayer, index, proof, proofs) {\n    const isRightNode = index % 2;\n    if (currentLayer === -1) {\n      if (!isRightNode) {\n        proofs.push([...proof].reverse());\n      }\n      // @ts-expect-error - issue from original code\n      return;\n    }\n    if (index >= this.layers[currentLayer].length) {\n      // @ts-expect-error - issue from original code\n      return;\n    }\n    const layer = this.layers[currentLayer];\n    const pairIndex = isRightNode ? index - 1 : index + 1;\n    let pushed = false;\n    if (pairIndex < layer.length) {\n      pushed = true;\n      proof.push({\n        position: isRightNode ? \"left\" : \"right\",\n        data: layer[pairIndex]\n      });\n    }\n    const leftchildIndex = index * 2;\n    const rightchildIndex = index * 2 + 1;\n    this.getProofsDFS(currentLayer - 1, leftchildIndex, proof, proofs);\n    this.getProofsDFS(currentLayer - 1, rightchildIndex, proof, proofs);\n    if (pushed) {\n      proof.splice(proof.length - 1, 1);\n    }\n  }\n\n  /**\n   * getHexProofs\n   * @desc Returns the proofs for all leaves as hex strings.\n   * @return {String[]} - Proofs array as hex strings.\n   * @example\n   * ```js\n   *const proofs = tree.getHexProofs()\n   *```\n   */\n  getHexProofs() {\n    return this.getProofs().map(item => this.bufferToHex(item.data));\n  }\n\n  /**\n   * getPositionalHexProof\n   * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {(string | number)[][]} - Proof array as hex strings. position at index 0\n   * @example\n   * ```js\n   *const proof = tree.getPositionalHexProof(leaves[2])\n   *```\n   */\n  getPositionalHexProof(leaf, index) {\n    return this.getProof(leaf, index).map(item => {\n      return [item.position === \"left\" ? 0 : 1, this.bufferToHex(item.data)];\n    });\n  }\n\n  /**\n   * getProofIndices\n   * @desc Returns the proof indices for given tree indices.\n   * @param {Number[]} treeIndices - Tree indices\n   * @param {Number} depth - Tree depth; number of layers.\n   * @return {Number[]} - Proof indices\n   * @example\n   * ```js\n   *const proofIndices = tree.getProofIndices([2,5,6], 4)\n   *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]\n   *```\n   */\n  getProofIndices(treeIndices, depth) {\n    const leafCount = 2 ** depth;\n    let maximalIndices = new Set();\n    for (const index of treeIndices) {\n      let x = leafCount + index;\n      while (x > 1) {\n        maximalIndices.add(x ^ 1);\n        x = x / 2 | 0;\n      }\n    }\n    const a = treeIndices.map(index => leafCount + index);\n    const b = Array.from(maximalIndices).sort((x, y) => x - y).reverse();\n    maximalIndices = a.concat(b);\n    const redundantIndices = new Set();\n    const proof = [];\n    for (let index of maximalIndices) {\n      if (!redundantIndices.has(index)) {\n        proof.push(index);\n        while (index > 1) {\n          redundantIndices.add(index);\n          if (!redundantIndices.has(index ^ 1)) {\n            break;\n          }\n          index = index / 2 | 0;\n        }\n      }\n    }\n    return proof.filter(index => {\n      return !treeIndices.includes(index - leafCount);\n    });\n  }\n  getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {\n    const depth = Math.ceil(Math.log2(leavesCount));\n    const unevenLayers = [];\n    for (let index = 0; index < depth; index++) {\n      const unevenLayer = leavesCount % 2 !== 0;\n      if (unevenLayer) {\n        unevenLayers.push({\n          index,\n          leavesCount\n        });\n      }\n      leavesCount = Math.ceil(leavesCount / 2);\n    }\n    const proofIndices = [];\n    let layerNodes = sortedLeafIndices;\n    for (let layerIndex = 0; layerIndex < depth; layerIndex++) {\n      const siblingIndices = layerNodes.map(index => {\n        if (index % 2 === 0) {\n          return index + 1;\n        }\n        return index - 1;\n      });\n      let proofNodeIndices = siblingIndices.filter(index => !layerNodes.includes(index));\n      const unevenLayer = unevenLayers.find(_ref => {\n        let {\n          index\n        } = _ref;\n        return index === layerIndex;\n      });\n      if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {\n        proofNodeIndices = proofNodeIndices.slice(0, -1);\n      }\n      proofIndices.push(proofNodeIndices);\n      layerNodes = [...new Set(layerNodes.map(index => {\n        if (index % 2 === 0) {\n          return index / 2;\n        }\n        if (index % 2 === 0) {\n          return (index + 1) / 2;\n        }\n        return (index - 1) / 2;\n      }))];\n    }\n    return proofIndices;\n  }\n\n  /**\n   * getMultiProof\n   * @desc Returns the multiproof for given tree indices.\n   * @param {Number[]} indices - Tree indices.\n   * @return {Buffer[]} - Multiproofs\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getMultiProof(indices)\n   *```\n   */\n  getMultiProof(tree, indices) {\n    if (!this.complete) {\n      console.warn(\"Warning: For correct multiProofs it's strongly recommended to set complete: true\");\n    }\n    if (!indices) {\n      indices = tree;\n      tree = this.getLayersFlat();\n    }\n    const isUneven = this.isUnevenTree();\n    if (isUneven) {\n      // @ts-expect-error - issue from original code\n      if (indices.every(Number.isInteger)) {\n        return this.getMultiProofForUnevenTree(indices);\n      }\n    }\n    // @ts-expect-error - issue from original code\n    if (!indices.every(Number.isInteger)) {\n      let els = indices;\n      if (this.sortPairs) {\n        // @ts-expect-error - issue from original code\n        els = els.sort(Buffer.compare);\n      }\n\n      // @ts-expect-error - issue from original code\n      let ids = els.map(el => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n      if (!ids.every(idx => idx !== -1)) {\n        throw new Error(\"Element does not exist in Merkle tree\");\n      }\n\n      // @ts-expect-error - issue from original code\n      const hashes = [];\n      const proof = [];\n      let nextIds = [];\n      for (let i = 0; i < this.layers.length; i++) {\n        const layer = this.layers[i];\n        for (let j = 0; j < ids.length; j++) {\n          const idx = ids[j];\n          const pairElement = this.getPairNode(layer, idx);\n          hashes.push(layer[idx]);\n          if (pairElement) {\n            proof.push(pairElement);\n          }\n          nextIds.push(idx / 2 | 0);\n        }\n        ids = nextIds.filter((value, j, self) => self.indexOf(value) === j);\n        nextIds = [];\n      }\n\n      // @ts-expect-error - issue from original code\n      return proof.filter(value => !hashes.includes(value));\n    }\n\n    // @ts-expect-error - issue from original code\n    return this.getProofIndices(indices, Math.log2(tree.length / 2 | 0)).map(\n    // @ts-expect-error - issue from original code\n    index => tree[index]);\n  }\n  getMultiProofForUnevenTree(tree, indices) {\n    if (!indices) {\n      indices = tree;\n      tree = this.getLayers();\n    }\n    let proofHashes = [];\n    // @ts-expect-error - issue from original code\n    let currentLayerIndices = indices;\n    // @ts-expect-error - issue from original code\n    for (const treeLayer of tree) {\n      const siblings = [];\n      for (const index of currentLayerIndices) {\n        if (index % 2 === 0) {\n          const idx = index + 1;\n          if (!currentLayerIndices.includes(idx)) {\n            if (treeLayer[idx]) {\n              siblings.push(treeLayer[idx]);\n              continue;\n            }\n          }\n        }\n        const idx = index - 1;\n        if (!currentLayerIndices.includes(idx)) {\n          if (treeLayer[idx]) {\n            siblings.push(treeLayer[idx]);\n            continue;\n          }\n        }\n      }\n      proofHashes = proofHashes.concat(siblings);\n      const uniqueIndices = new Set();\n      for (const index of currentLayerIndices) {\n        if (index % 2 === 0) {\n          uniqueIndices.add(index / 2);\n          continue;\n        }\n        if (index % 2 === 0) {\n          uniqueIndices.add((index + 1) / 2);\n          continue;\n        }\n        uniqueIndices.add((index - 1) / 2);\n      }\n      currentLayerIndices = Array.from(uniqueIndices);\n    }\n    return proofHashes;\n  }\n\n  /**\n   * getHexMultiProof\n   * @desc Returns the multiproof for given tree indices as hex strings.\n   * @param {Number[]} indices - Tree indices.\n   * @return {String[]} - Multiproofs as hex strings.\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getHexMultiProof(indices)\n   *```\n   */\n  getHexMultiProof(tree, indices) {\n    return this.getMultiProof(tree, indices).map(x => this.bufferToHex(x));\n  }\n\n  /**\n   * getProofFlags\n   * @desc Returns list of booleans where proofs should be used instead of hashing.\n   * Proof flags are used in the Solidity multiproof verifiers.\n   * @param {Number[]|Buffer[]} leaves\n   * @param {Buffer[]} proofs\n   * @return {Boolean[]} - Boolean flags\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getMultiProof(indices)\n   *const proofFlags = tree.getProofFlags(leaves, proof)\n   *```\n   */\n  getProofFlags(leaves, proofs) {\n    if (!Array.isArray(leaves) || leaves.length <= 0) {\n      throw new Error(\"Invalid Inputs!\");\n    }\n    let ids;\n    if (leaves.every(Number.isInteger)) {\n      ids = [...leaves].sort((a, b) => a === b ? 0 : a > b ? 1 : -1); // Indices where passed\n    } else {\n      ids = leaves.map(el => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n    }\n    if (!ids.every(idx => idx !== -1)) {\n      throw new Error(\"Element does not exist in Merkle tree\");\n    }\n    const _proofs = proofs.map(item => this.bufferify(item));\n\n    // @ts-expect-error - issue from original code\n    const tested = [];\n    // @ts-expect-error - issue from original code\n    const flags = [];\n    for (let index = 0; index < this.layers.length; index++) {\n      const layer = this.layers[index];\n      ids = ids.reduce((ids_, idx) => {\n        // @ts-expect-error - issue from original code\n        const skipped = tested.includes(layer[idx]);\n        if (!skipped) {\n          const pairElement = this.getPairNode(layer, idx);\n          const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);\n          // eslint-disable-next-line no-unused-expressions\n          pairElement && flags.push(!proofUsed);\n          tested.push(layer[idx]);\n          tested.push(pairElement);\n        }\n        // @ts-expect-error - issue from original code\n        ids_.push(idx / 2 | 0);\n        return ids_;\n      }, []);\n    }\n\n    // @ts-expect-error - issue from original code\n    return flags;\n  }\n\n  /**\n   * verify\n   * @desc Returns true if the proof path (array of hashes) can connect the target node\n   * to the Merkle root.\n   * @param {Object[]} proof - Array of proof objects that should connect\n   * target node to Merkle root.\n   * @param {Buffer} targetNode - Target node Buffer\n   * @param {Buffer} root - Merkle root Buffer\n   * @return {Boolean}\n   * @example\n   *```js\n   *const root = tree.getRoot()\n   *const proof = tree.getProof(leaves[2])\n   *const verified = tree.verify(proof, leaves[2], root)\n   *```\n   */\n  verify(proof, targetNode, root) {\n    let hash = this.bufferify(targetNode);\n    root = this.bufferify(root);\n    if (!Array.isArray(proof) || !targetNode || !root) {\n      return false;\n    }\n    for (let i = 0; i < proof.length; i++) {\n      const node = proof[i];\n      let data = null;\n      let isLeftNode = null;\n\n      // case for when proof is hex values only\n      if (typeof node === \"string\") {\n        data = this.bufferify(node);\n        isLeftNode = true;\n      } else if (Array.isArray(node)) {\n        isLeftNode = node[0] === 0;\n        data = this.bufferify(node[1]);\n      } else if (Buffer.isBuffer(node)) {\n        data = node;\n        isLeftNode = true;\n      } else if (node instanceof Object) {\n        data = this.bufferify(node.data);\n        isLeftNode = node.position === \"left\";\n      } else {\n        throw new Error(\"Expected node to be of type string or object\");\n      }\n      const buffers = [];\n      if (this.isBitcoinTree) {\n        buffers.push(reverse(hash));\n        buffers[isLeftNode ? \"unshift\" : \"push\"](reverse(data));\n        hash = this.hashFn(this.concatenator(buffers));\n        hash = reverse(this.hashFn(hash));\n      } else {\n        if (this.sortPairs) {\n          if (Buffer.compare(hash, data) === -1) {\n            buffers.push(hash, data);\n            hash = this.hashFn(this.concatenator(buffers));\n          } else {\n            buffers.push(data, hash);\n            hash = this.hashFn(this.concatenator(buffers));\n          }\n        } else {\n          buffers.push(hash);\n          buffers[isLeftNode ? \"unshift\" : \"push\"](data);\n          hash = this.hashFn(this.concatenator(buffers));\n        }\n      }\n    }\n    return Buffer.compare(hash, root) === 0;\n  }\n\n  /**\n   * verifyMultiProof\n   * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.\n   * @param {Buffer} root - Merkle tree root\n   * @param {Number[]} proofIndices - Leave indices for proof\n   * @param {Buffer[]} proofLeaves - Leaf values at indices for proof\n   * @param {Number} leavesCount - Count of original leaves\n   * @param {Buffer[]} proof - Multiproofs given indices\n   * @return {Boolean}\n   * @example\n   *```js\n   *const leaves = tree.getLeaves()\n   *const root = tree.getRoot()\n   *const treeFlat = tree.getLayersFlat()\n   *const leavesCount = leaves.length\n   *const proofIndices = [2, 5, 6]\n   *const proofLeaves = proofIndices.map(i => leaves[i])\n   *const proof = tree.getMultiProof(treeFlat, indices)\n   *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)\n   *```\n   */\n  verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {\n    const isUneven = this.isUnevenTree();\n    if (isUneven) {\n      // TODO: combine these functions and simplify\n      return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);\n    }\n    const depth = Math.ceil(Math.log2(leavesCount));\n    root = this.bufferify(root);\n    proofLeaves = proofLeaves.map(leaf => this.bufferify(leaf));\n    proof = proof.map(leaf => this.bufferify(leaf));\n    const tree = {};\n    for (const [index, leaf] of this.zip(proofIndices, proofLeaves)) {\n      // @ts-expect-error - issue from original code\n      tree[2 ** depth + index] = leaf;\n    }\n    for (const [index, proofitem] of this.zip(this.getProofIndices(proofIndices, depth), proof)) {\n      // @ts-expect-error - issue from original code\n      tree[index] = proofitem;\n    }\n    let indexqueue = Object.keys(tree).map(value => Number(value)).sort((a, b) => a - b);\n    indexqueue = indexqueue.slice(0, indexqueue.length - 1);\n    let i = 0;\n    while (i < indexqueue.length) {\n      const index = indexqueue[i];\n      if (index >= 2 && {}.hasOwnProperty.call(tree, index ^ 1)) {\n        // @ts-expect-error - issue from original code\n        let pair = [tree[index - index % 2], tree[index - index % 2 + 1]];\n        if (this.sortPairs) {\n          pair = pair.sort(Buffer.compare);\n        }\n        const hash = pair[1] ? this.hashFn(this.concatenator(pair)) : pair[0];\n        // @ts-expect-error - issue from original code\n        tree[index / 2 | 0] = hash;\n        indexqueue.push(index / 2 | 0);\n      }\n      i += 1;\n    }\n    return !proofIndices.length ||\n    // @ts-expect-error - issue from original code\n    {}.hasOwnProperty.call(tree, 1) && tree[1].equals(root);\n  }\n  verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {\n    root = this.bufferify(root);\n    leaves = leaves.map(this.bufferify);\n    proofs = proofs.map(this.bufferify);\n    const leavesLen = leaves.length;\n    const totalHashes = proofFlag.length;\n    const hashes = [];\n    let leafPos = 0;\n    let hashPos = 0;\n    let proofPos = 0;\n    for (let i = 0; i < totalHashes; i++) {\n      const bufA = proofFlag[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proofs[proofPos++];\n      const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n      const buffers = [bufA, bufB].sort(Buffer.compare);\n      hashes[i] = this.hashFn(this.concatenator(buffers));\n    }\n    return Buffer.compare(hashes[totalHashes - 1], root) === 0;\n  }\n  verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {\n    root = this.bufferify(root);\n    leaves = leaves.map(leaf => this.bufferify(leaf));\n    proof = proof.map(leaf => this.bufferify(leaf));\n    const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);\n    return root.equals(computedRoot);\n  }\n\n  /**\n   * getDepth\n   * @desc Returns the tree depth (number of layers)\n   * @return {Number}\n   * @example\n   *```js\n   *const depth = tree.getDepth()\n   *```\n   */\n  getDepth() {\n    return this.getLayers().length - 1;\n  }\n\n  /**\n   * getLayersAsObject\n   * @desc Returns the layers as nested objects instead of an array.\n   * @example\n   *```js\n   *const layersObj = tree.getLayersAsObject()\n   *```\n   */\n  getLayersAsObject() {\n    const layers = this.getLayers().map(layer => layer.map(value => this.bufferToHex(value, false)));\n    const objs = [];\n    for (let i = 0; i < layers.length; i++) {\n      const arr = [];\n      for (let j = 0; j < layers[i].length; j++) {\n        const obj = {\n          [layers[i][j]]: null\n        };\n        if (objs.length) {\n          // @ts-expect-error - issue from original code\n          obj[layers[i][j]] = {};\n          const a = objs.shift();\n          // @ts-expect-error - issue from original code\n          const akey = Object.keys(a)[0];\n          // @ts-expect-error - issue from original code\n          obj[layers[i][j]][akey] = a[akey];\n          if (objs.length) {\n            const b = objs.shift();\n            // @ts-expect-error - issue from original code\n            const bkey = Object.keys(b)[0];\n            // @ts-expect-error - issue from original code\n            obj[layers[i][j]][bkey] = b[bkey];\n          }\n        }\n        arr.push(obj);\n      }\n      objs.push(...arr);\n    }\n    return objs[0];\n  }\n\n  /**\n   * resetTree\n   * @desc Resets the tree by clearing the leaves and layers.\n   * @example\n   *```js\n   *tree.resetTree()\n   *```\n   */\n  resetTree() {\n    this.leaves = [];\n    this.layers = [];\n  }\n\n  /**\n   * getPairNode\n   * @desc Returns the node at the index for given layer.\n   * @param {Buffer[]} layer - Tree layer\n   * @param {Number} index - Index at layer.\n   * @return {Buffer} - Node\n   *\n   *@example\n   * ```js\n   *const node = tree.getPairNode(layer, index)\n   *```\n   */\n  getPairNode(layer, idx) {\n    const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n    if (pairIdx < layer.length) {\n      return layer[pairIdx];\n    } else {\n      // @ts-expect-error - issue from original code\n      return null;\n    }\n  }\n\n  /**\n   * toTreeString\n   * @desc Returns a visual representation of the merkle tree as a string.\n   * @return {String}\n   * @example\n   *```js\n   *console.log(tree.toTreeString())\n   *```\n   */\n  toTreeString() {\n    const obj = this.getLayersAsObject();\n    return asTree(obj, true, false);\n  }\n\n  /**\n   * toString\n   * @desc Returns a visual representation of the merkle tree as a string.\n   * @example\n   *```js\n   *console.log(tree.toString())\n   *```\n   */\n  toString() {\n    return this.toTreeString();\n  }\n  isUnevenTree(treeLayers) {\n    const depth = treeLayers?.length || this.getDepth();\n    return !this.isPowOf2(depth);\n  }\n  isPowOf2(v) {\n    return v && !(v & v - 1);\n  }\n  calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {\n    const leafTuples = this.zip(leafIndices, leafHashes).sort((_ref2, _ref3) => {\n      let [indexA] = _ref2;\n      let [indexB] = _ref3;\n      return indexA - indexB;\n    });\n    const leafTupleIndices = leafTuples.map(_ref4 => {\n      let [index] = _ref4;\n      return index;\n    });\n    const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);\n    let nextSliceStart = 0;\n    const proofTuplesByLayers = [];\n    for (let i = 0; i < proofIndices.length; i++) {\n      const indices = proofIndices[i];\n      const sliceStart = nextSliceStart;\n      nextSliceStart += indices.length;\n      proofTuplesByLayers[i] = this.zip(indices, proofHashes.slice(sliceStart, nextSliceStart));\n    }\n    const tree = [leafTuples];\n    for (let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {\n      const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex])\n      // @ts-expect-error - issue from original code\n      .sort((_ref5, _ref6) => {\n        let [indexA] = _ref5;\n        let [indexB] = _ref6;\n        return indexA - indexB;\n      })\n      // @ts-expect-error - issue from original code\n      .map(_ref7 => {\n        let [, hash] = _ref7;\n        return hash;\n      });\n      const s = tree[layerIndex].map(_ref8 => {\n        let [layerIndex_] = _ref8;\n        return layerIndex_;\n      });\n      const parentIndices = [...new Set(s.map(index => {\n        if (index % 2 === 0) {\n          return index / 2;\n        }\n        if (index % 2 === 0) {\n          return (index + 1) / 2;\n        }\n        return (index - 1) / 2;\n      }))];\n      const parentLayer = [];\n      for (let i = 0; i < parentIndices.length; i++) {\n        const parentNodeTreeIndex = parentIndices[i];\n        const bufA = currentLayer[i * 2];\n        const bufB = currentLayer[i * 2 + 1];\n        const hash = bufB ? this.hashFn(this.concatenator([bufA, bufB])) : bufA;\n        parentLayer.push([parentNodeTreeIndex, hash]);\n      }\n      tree.push(parentLayer);\n    }\n    return tree[tree.length - 1][0][1];\n  }\n}\n\nexport { MerkleTree };\n","import { constants, utils, BigNumber } from 'ethers';\nimport { bO as SnapshotInputSchema, bP as SnapshotEntryWithProofSchema, bQ as SnapshotSchema, cu as ContractWrapper, b9 as BigNumberSchema, aZ as NATIVE_TOKEN_ADDRESS, cz as AmountSchema, cD as QuantitySchema, ba as BigNumberishSchema, cE as BytesLikeSchema, s as DuplicateLeafsError, bd as AddressOrEnsSchema, bc as AddressSchema, cF as BasisPointsSchema } from './index-827e427d.browser.esm.js';\nimport { f as fetchCurrencyMetadata, i as isNativeToken, a as fetchCurrencyValue } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-3b8bca4f.browser.esm.js';\nimport { MerkleTree } from '@thirdweb-dev/merkletree';\nimport { S as StartDateSchema, E as EndDateSchema } from './assertEnabled-ea837eec.browser.esm.js';\nimport { z } from 'zod';\nimport { N as NFTInputOrUriSchema } from './setErc20Allowance-7df9a12a.browser.esm.js';\nimport { v4 } from 'uuid';\n\nfunction abstractContractModelToLegacy(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerTransaction: model.maxClaimablePerWallet,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims || 0\n  };\n}\n\nfunction abstractContractModelToNew(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerWallet: model.maxClaimablePerWallet,\n    metadata: model.metadata || \"\"\n  };\n}\n\n/**\n * @internal\n * @param quantity - The quantity to convert\n * @param tokenDecimals - The token decimals to use\n */\nfunction convertQuantityToBigNumber(quantity, tokenDecimals) {\n  if (quantity === \"unlimited\") {\n    return constants.MaxUint256;\n  } else {\n    return utils.parseUnits(quantity, tokenDecimals);\n  }\n}\n\nasync function parseSnapshotInputs(inputs) {\n  const chunkSize = 25000;\n  const chunks = Array.from({\n    length: Math.ceil(inputs.length / chunkSize)\n  }, (_, i) => inputs.slice(i * chunkSize, i * chunkSize + chunkSize));\n  const results = [];\n  const parsedChunks = await Promise.all(chunks.map(chunk => SnapshotInputSchema.parseAsync(chunk)));\n  for (const chunk of parsedChunks) {\n    results.push(...chunk);\n  }\n  return results;\n}\n\n// shard using the first 2 hex character of the address\n// this splits the merkle tree into 256 shards\n// shard files will be 00.json, 01.json, 02.json, ..., ff.json\nconst SHARD_NYBBLES = 2;\nlet SnapshotFormatVersion = /*#__PURE__*/function (SnapshotFormatVersion) {\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V1\"] = 1] = \"V1\";\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V2\"] = 2] = \"V2\";\n  return SnapshotFormatVersion;\n}({}); // address, maxClaimable, price, currencyAddress\nclass ShardedMerkleTree {\n  constructor(storage, baseUri, originalEntriesUri, shardNybbles, tokenDecimals) {\n    this.storage = storage;\n    this.shardNybbles = shardNybbles;\n    this.baseUri = baseUri;\n    this.originalEntriesUri = originalEntriesUri;\n    this.tokenDecimals = tokenDecimals;\n    this.shards = {};\n    this.trees = {};\n  }\n  static async fromUri(uri, storage) {\n    try {\n      const shardedMerkleTreeInfo = await storage.downloadJSON(uri);\n      if (shardedMerkleTreeInfo.isShardedMerkleTree) {\n        return ShardedMerkleTree.fromShardedMerkleTreeInfo(shardedMerkleTreeInfo, storage);\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n  static async fromShardedMerkleTreeInfo(info, storage) {\n    return new ShardedMerkleTree(storage, info.baseUri, info.originalEntriesUri, info.shardNybbles, info.tokenDecimals);\n  }\n  static hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion) {\n    switch (snapshotFormatVersion) {\n      case SnapshotFormatVersion.V1:\n        return utils.solidityKeccak256([\"address\", \"uint256\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals)]);\n      case SnapshotFormatVersion.V2:\n        return utils.solidityKeccak256([\"address\", \"uint256\", \"uint256\", \"address\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals), convertQuantityToBigNumber(entry.price || \"unlimited\", currencyDecimals), entry.currencyAddress || constants.AddressZero]);\n    }\n  }\n  static async fetchAndCacheDecimals(cache, provider, currencyAddress) {\n    if (!currencyAddress) {\n      return 18;\n    }\n    // cache decimals for each currency to avoid refetching for every address\n    let currencyDecimals = cache[currencyAddress];\n    if (currencyDecimals === undefined) {\n      const currencyMetadata = await fetchCurrencyMetadata(provider, currencyAddress);\n      currencyDecimals = currencyMetadata.decimals;\n      cache[currencyAddress] = currencyDecimals;\n    }\n    return currencyDecimals;\n  }\n  static async buildAndUpload(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n    let shardNybbles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : SHARD_NYBBLES;\n    const inputs = await parseSnapshotInputs(snapshotInput);\n\n    // TODO Could also derive shardNybbles from input size\n    const shards = {};\n    for (const snapshotEntry of inputs) {\n      const shard = snapshotEntry.address.slice(2, 2 + shardNybbles).toLowerCase();\n      if (shards[shard] === undefined) {\n        shards[shard] = [];\n      }\n      shards[shard].push(snapshotEntry);\n    }\n    const currencyDecimalMap = {};\n    // create shard => subtree root map\n    const subTrees = await Promise.all(Object.entries(shards).map(async _ref => {\n      let [shard, entries] = _ref;\n      return [shard, new MerkleTree(await Promise.all(entries.map(async entry => {\n        // cache decimals for each currency to avoid refetching for every address\n        const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n        return ShardedMerkleTree.hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion);\n      })), utils.keccak256, {\n        sort: true\n      }).getHexRoot()];\n    }));\n    const roots = Object.fromEntries(subTrees);\n    // create master tree from shard => subtree root map\n    const tree = new MerkleTree(Object.values(roots), utils.keccak256, {\n      sort: true\n    });\n    const shardsToUpload = [];\n    for (const [shardId, entries] of Object.entries(shards)) {\n      const data = {\n        proofs: tree.getProof(roots[shardId]).map(value => \"0x\" + value.data.toString(\"hex\")),\n        entries\n      };\n      shardsToUpload.push({\n        data: JSON.stringify(data),\n        name: `${shardId}.json`\n      });\n    }\n    const uris = await storage.uploadBatch(shardsToUpload);\n    const baseUri = uris[0].slice(0, uris[0].lastIndexOf(\"/\"));\n    const originalEntriesUri = await storage.upload(inputs);\n    const shardedMerkleInfo = {\n      merkleRoot: tree.getHexRoot(),\n      baseUri,\n      originalEntriesUri,\n      shardNybbles,\n      tokenDecimals,\n      isShardedMerkleTree: true\n    };\n    const masterUri = await storage.upload(shardedMerkleInfo);\n    return {\n      shardedMerkleInfo,\n      uri: masterUri\n    };\n  }\n  async getProof(address, provider, snapshotFormatVersion) {\n    const shardId = address.slice(2, 2 + this.shardNybbles).toLowerCase();\n    let shard = this.shards[shardId];\n    const currencyDecimalMap = {};\n    if (shard === undefined) {\n      try {\n        const uri = this.baseUri.endsWith(\"/\") ? this.baseUri : `${this.baseUri}/`;\n        shard = this.shards[shardId] = await this.storage.downloadJSON(`${uri}${shardId}.json`);\n        const hashedEntries = await Promise.all(shard.entries.map(async entry => {\n          // cache decimals for each currency to avoid refetching for every address\n          const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n          return ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n        }));\n        this.trees[shardId] = new MerkleTree(hashedEntries, utils.keccak256, {\n          sort: true\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n    const entry = shard.entries.find(i => i.address.toLowerCase() === address.toLowerCase());\n    if (!entry) {\n      return null;\n    }\n    const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n    const leaf = ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n    const proof = this.trees[shardId].getProof(leaf).map(i => \"0x\" + i.data.toString(\"hex\"));\n    return SnapshotEntryWithProofSchema.parseAsync({\n      ...entry,\n      proof: proof.concat(shard.proofs)\n    });\n  }\n  async getAllEntries() {\n    try {\n      return await this.storage.downloadJSON(this.originalEntriesUri);\n    } catch (e) {\n      console.warn(\"Could not fetch original snapshot entries\", e);\n      return [];\n    }\n  }\n}\n\nasync function fetchSnapshotEntryForAddress(address, merkleRoot, merkleMetadata, provider, storage, snapshotFormatVersion) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const merkleTree = await ShardedMerkleTree.fromShardedMerkleTreeInfo(raw, storage);\n      return await merkleTree.getProof(address, provider, snapshotFormatVersion);\n    }\n    // legacy non-sharded, just fetch it all and filter out\n    const snapshotData = await SnapshotSchema.parseAsync(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      return snapshotData.claims.find(c => c.address.toLowerCase() === address.toLowerCase()) || null;\n    }\n  }\n  return null;\n}\n\nfunction legacyContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims\n  };\n}\n\nfunction newContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerWallet,\n    waitTimeInSecondsBetweenClaims: 0,\n    metadata: model.metadata\n  };\n}\n\nasync function approveErc20Allowance(contractToApprove, currencyAddress, price, quantity, tokenDecimals) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n  const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  const totalPrice = BigNumber.from(price).mul(BigNumber.from(quantity)).div(utils.parseUnits(\"1\", tokenDecimals));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [spender, allowance.add(totalPrice)]);\n  }\n}\n\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns - `overrides` and `proofs` as an object.\n */\nasync function prepareClaim(addressToClaim, quantity, activeClaimCondition, merkleMetadataFetcher, tokenDecimals, contractWrapper, storage, checkERC20Allowance, snapshotFormatVersion) {\n  let maxClaimable = convertQuantityToBigNumber(activeClaimCondition.maxClaimablePerWallet, tokenDecimals);\n  let proofs = [utils.hexZeroPad([0], 32)];\n  let priceInProof = activeClaimCondition.price; // the price to send to the contract in claim proofs\n  let currencyAddressInProof = activeClaimCondition.currencyAddress;\n  try {\n    if (!activeClaimCondition.merkleRootHash.toString().startsWith(constants.AddressZero)) {\n      const snapshotEntry = await fetchSnapshotEntryForAddress(addressToClaim, activeClaimCondition.merkleRootHash.toString(), await merkleMetadataFetcher(), contractWrapper.getProvider(), storage, snapshotFormatVersion);\n      if (snapshotEntry) {\n        proofs = snapshotEntry.proof;\n        // override only if not default values (unlimited for quantity, zero addr for currency)\n        maxClaimable = snapshotEntry.maxClaimable === \"unlimited\" ? constants.MaxUint256 : utils.parseUnits(snapshotEntry.maxClaimable, tokenDecimals);\n        priceInProof = snapshotEntry.price === undefined || snapshotEntry.price === \"unlimited\" ? constants.MaxUint256 : await normalizePriceValue(contractWrapper.getProvider(), snapshotEntry.price, snapshotEntry.currencyAddress || constants.AddressZero);\n        currencyAddressInProof = snapshotEntry.currencyAddress || constants.AddressZero;\n      } else {\n        // if no snapshot entry, and it's a v1 format (exclusive allowlist) then address can't claim\n        if (snapshotFormatVersion === SnapshotFormatVersion.V1) {\n          throw new Error(\"No claim found for this address\");\n        }\n        // but if its snapshot v2 (override list behavior) then address can still claim with default settings\n      }\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if (e?.message === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\"failed to check claim condition merkle root hash, continuing anyways\", e);\n  }\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  // the actual price to check allowance against\n  // if proof price is unlimited, then we use the price from the claim condition\n  // this mimics the contract behavior\n  const pricePerToken = priceInProof.toString() !== constants.MaxUint256.toString() ? priceInProof : activeClaimCondition.price;\n  // same for currency address\n  const currencyAddress = currencyAddressInProof !== constants.AddressZero ? currencyAddressInProof : activeClaimCondition.currencyAddress;\n  if (pricePerToken.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = BigNumber.from(pricePerToken).mul(quantity).div(utils.parseUnits(\"1\", tokenDecimals));\n    } else if (checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currencyAddress, pricePerToken, quantity, tokenDecimals);\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxClaimable,\n    price: pricePerToken,\n    currencyAddress: currencyAddress,\n    priceInProof,\n    currencyAddressInProof\n  };\n}\n\n/**\n * @internal\n */\nconst CurrencySchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  symbol: z.string(),\n  decimals: z.number()\n}))();\n\n/**\n * @internal\n */\nconst CurrencyValueSchema = /* @__PURE__ */(() => CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: z.string()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionMetadataSchema = /* @__PURE__ */(() => z.object({\n  name: z.string().optional()\n}).catchall(z.unknown()))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputSchema = /* @__PURE__ */(() => z.object({\n  startTime: StartDateSchema,\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: AmountSchema.default(0),\n  maxClaimableSupply: QuantitySchema,\n  maxClaimablePerWallet: QuantitySchema,\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: BytesLikeSchema.default(utils.hexZeroPad([0], 32)),\n  snapshot: z.optional(SnapshotInputSchema).nullable(),\n  metadata: ClaimConditionMetadataSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputArray = /* @__PURE__ */(() => z.array(ClaimConditionInputSchema))();\n\n/**\n * @internal\n */\nconst PartialClaimConditionInputSchema = /* @__PURE__ */(() => ClaimConditionInputSchema.partial())();\n\n/**\n * @internal\n */\nconst ClaimConditionOutputSchema = /* @__PURE__ */(() => ClaimConditionInputSchema.extend({\n  availableSupply: QuantitySchema,\n  currentMintSupply: QuantitySchema,\n  currencyMetadata: CurrencyValueSchema.default({\n    value: BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\"\n  }),\n  price: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform(n => new Date(n.toNumber() * 1000)),\n  snapshot: SnapshotInputSchema.optional().nullable()\n}))();\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param tokenDecimals - the token decimals\n * @param provider - the provider to use\n * @param storage - the storage to upload to\n * @param snapshotFormatVersion - the snapshot format version\n * @returns the generated snapshot and URI\n * @internal\n */\nasync function createSnapshot(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const input = await parseSnapshotInputs(snapshotInput);\n  const addresses = input.map(i => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n  const tree = await ShardedMerkleTree.buildAndUpload(input, tokenDecimals, provider, storage, snapshotFormatVersion);\n  return {\n    merkleRoot: tree.shardedMerkleInfo.merkleRoot,\n    snapshotUri: tree.uri\n  };\n}\n\nfunction compare(a, b) {\n  const left = BigNumber.from(a);\n  const right = BigNumber.from(b);\n  if (left.eq(right)) {\n    return 0;\n  } else if (left.gt(right)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * @internal\n * Decorates claim conditions with merkle roots from snapshots if present\n * @param claimConditionInputs - The claim conditions to process\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @param snapshotFormatVersion - The snapshot format version to use\n */\nasync function processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const snapshotInfos = [];\n  const inputsWithSnapshots = await Promise.all(claimConditionInputs.map(async conditionInput => {\n    // check snapshots and upload if provided\n    if (conditionInput.snapshot && conditionInput.snapshot.length > 0) {\n      const snapshotInfo = await createSnapshot(conditionInput.snapshot, tokenDecimals, provider, storage, snapshotFormatVersion);\n      snapshotInfos.push(snapshotInfo);\n      conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n    } else {\n      // if no snapshot is passed or empty, reset the merkle root\n      conditionInput.merkleRootHash = utils.hexZeroPad([0], 32);\n    }\n    // fill condition with defaults values if not provided\n    return conditionInput;\n  }));\n  return {\n    inputsWithSnapshots,\n    snapshotInfos\n  };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c - The condition input\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @internal\n */\nasync function convertToContractModel(c, tokenDecimals, provider, storage) {\n  const currency = c.currencyAddress === constants.AddressZero ? NATIVE_TOKEN_ADDRESS : c.currencyAddress;\n  const maxClaimableSupply = convertQuantityToBigNumber(c.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertQuantityToBigNumber(c.maxClaimablePerWallet, tokenDecimals);\n  let metadataOrUri;\n  if (c.metadata) {\n    if (typeof c.metadata === \"string\") {\n      metadataOrUri = c.metadata;\n    } else {\n      metadataOrUri = await storage.upload(c.metadata);\n    }\n  }\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply,\n    supplyClaimed: 0,\n    maxClaimablePerWallet,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash.toString(),\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds || 0,\n    metadata: metadataOrUri\n  };\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs - The claim conditions to process\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @param snapshotFormatVersion - The snapshot format version to use\n * @internal\n */\nasync function processClaimConditionInputs(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const {\n    inputsWithSnapshots,\n    snapshotInfos\n  } = await processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion);\n  const parsedInputs = await ClaimConditionInputArray.parseAsync(inputsWithSnapshots);\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions = (await Promise.all(parsedInputs.map(c => convertToContractModel(c, tokenDecimals, provider, storage)))).sort((a, b) => {\n    return compare(a.startTimestamp, b.startTimestamp);\n  });\n  return {\n    snapshotInfos,\n    sortedConditions\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot - The merkle root to fetch the snapshot for\n * @param merkleMetadata - The merkle metadata to use\n * @param storage - The storage to use\n */\nasync function fetchSnapshot(merkleRoot, merkleMetadata, storage) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const smt = await ShardedMerkleTree.fromUri(snapshotUri, storage);\n      return smt?.getAllEntries() || null;\n    } else {\n      const snapshotData = await SnapshotSchema.parseAsync(raw);\n      if (merkleRoot === snapshotData.merkleRoot) {\n        return snapshotData.claims.map(claim => ({\n          address: claim.address,\n          maxClaimable: claim.maxClaimable,\n          price: claim.price,\n          currencyAddress: claim.currencyAddress\n        }));\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * @internal\n * @param bn - The big number to convert\n * @param tokenDecimals - The token decimals to use\n */\nfunction convertToReadableQuantity(bn, tokenDecimals) {\n  if (bn.toString() === constants.MaxUint256.toString()) {\n    return \"unlimited\";\n  } else {\n    return utils.formatUnits(bn, tokenDecimals);\n  }\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm - The contract model to transform\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param merkleMetadata - The merkle metadata to use\n * @param storage - The storage to use\n * @param shouldDownloadSnapshot - Whether to download the snapshot\n * @internal\n */\nasync function transformResultToClaimCondition(pm, tokenDecimals, provider, merkleMetadata, storage, shouldDownloadSnapshot) {\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const maxClaimableSupply = convertToReadableQuantity(pm.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertToReadableQuantity(pm.maxClaimablePerWallet, tokenDecimals);\n  const availableSupply = convertToReadableQuantity(BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed), tokenDecimals);\n  const currentMintSupply = convertToReadableQuantity(pm.supplyClaimed, tokenDecimals);\n  let resolvedMetadata;\n  if (pm.metadata) {\n    resolvedMetadata = await storage.downloadJSON(pm.metadata);\n  }\n  return ClaimConditionOutputSchema.parseAsync({\n    startTime: pm.startTimestamp,\n    maxClaimableSupply,\n    maxClaimablePerWallet,\n    currentMintSupply,\n    availableSupply,\n    waitInSeconds: pm.waitTimeInSecondsBetweenClaims?.toString(),\n    price: BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: shouldDownloadSnapshot ? await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage) : undefined,\n    metadata: resolvedMetadata\n  });\n}\n\n/**\n * @internal\n * @param index - The index of the condition to update\n * @param claimConditionInput - The input claim condition to update\n * @param existingConditions - The existing claim conditions\n */\nasync function updateExistingClaimConditions(index, claimConditionInput, existingConditions) {\n  if (index >= existingConditions.length) {\n    throw Error(`Index out of bounds - got index: ${index} with ${existingConditions.length} conditions`);\n  }\n  // merge input with existing claim condition\n  const priceDecimals = existingConditions[index].currencyMetadata.decimals;\n  const priceInWei = existingConditions[index].price;\n  const priceInTokens = utils.formatUnits(priceInWei, priceDecimals);\n\n  // merge existing (output format) with incoming (input format)\n  const newConditionParsed = await ClaimConditionInputSchema.parseAsync({\n    ...existingConditions[index],\n    price: priceInTokens,\n    ...claimConditionInput\n  });\n\n  // convert to output claim condition\n  const mergedConditionOutput = await ClaimConditionOutputSchema.parseAsync({\n    ...newConditionParsed,\n    price: priceInWei\n  });\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    const formattedPrice = utils.formatUnits(newConditionAtIndex.price, priceDecimals);\n    return {\n      ...newConditionAtIndex,\n      price: formattedPrice // manually transform back to input price type\n    };\n  });\n}\n\nlet ClaimEligibility = /*#__PURE__*/function (ClaimEligibility) {\n  ClaimEligibility[\"NotEnoughSupply\"] = \"There is not enough supply to claim.\";\n  ClaimEligibility[\"AddressNotAllowed\"] = \"This address is not on the allowlist.\";\n  ClaimEligibility[\"WaitBeforeNextClaimTransaction\"] = \"Not enough time since last claim transaction. Please wait.\";\n  ClaimEligibility[\"ClaimPhaseNotStarted\"] = \"Claim phase has not started yet.\";\n  ClaimEligibility[\"AlreadyClaimed\"] = \"You have already claimed the token.\";\n  ClaimEligibility[\"WrongPriceOrCurrency\"] = \"Incorrect price or currency.\";\n  ClaimEligibility[\"OverMaxClaimablePerWallet\"] = \"Cannot claim more than maximum allowed quantity.\";\n  ClaimEligibility[\"NotEnoughTokens\"] = \"There are not enough tokens in the wallet to pay for the claim.\";\n  ClaimEligibility[\"NoActiveClaimPhase\"] = \"There is no active claim phase at the moment. Please check back in later.\";\n  ClaimEligibility[\"NoClaimConditionSet\"] = \"There is no claim condition set.\";\n  ClaimEligibility[\"NoWallet\"] = \"No wallet connected.\";\n  ClaimEligibility[\"Unknown\"] = \"No claim conditions found.\";\n  return ClaimEligibility;\n}({});\n\nfunction resolveOrGenerateId(requestUId) {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    v4({}, buffer);\n    return utils.hexlify(utils.toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return utils.hexlify(requestUId);\n  }\n}\n\n/**\n * @internal\n */\nconst BaseSignaturePayloadInput = /* @__PURE__ */(() => z.object({\n  to: AddressOrEnsSchema.refine(address => address.toLowerCase() !== constants.AddressZero, {\n    message: \"Cannot create payload to mint to zero address\"\n  }),\n  price: AmountSchema.default(0),\n  currencyAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: z.string().optional().transform(arg => resolveOrGenerateId(arg)),\n  primarySaleRecipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst Signature20PayloadInput = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  quantity: AmountSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature20PayloadOutput = /* @__PURE__ */(() => Signature20PayloadInput.extend({\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature721PayloadInput = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  metadata: NFTInputOrUriSchema,\n  royaltyRecipient: z.string().default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0)\n}))();\n\n/**\n * @internal\n */\nconst Signature721PayloadOutput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  uri: z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInputWithTokenId = /* @__PURE__ */(() => Signature1155PayloadInput.extend({\n  tokenId: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadOutput = /* @__PURE__ */(() => Signature721PayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature721WithQuantityInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @internal\n */\nconst Signature721WithQuantityOutput = /* @__PURE__ */(() => Signature721PayloadOutput.extend({\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nconst MintRequest20 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest1155 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"tokenId\",\n  type: \"uint256\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721withQuantity = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst GenericRequest = [{\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\n\nexport { SnapshotFormatVersion as A, BaseSignaturePayloadInput as B, ClaimEligibility as C, processClaimConditionInputs as D, abstractContractModelToLegacy as E, abstractContractModelToNew as F, GenericRequest as G, updateExistingClaimConditions as H, resolveOrGenerateId as I, MintRequest20 as M, PartialClaimConditionInputSchema as P, Signature20PayloadInput as S, approveErc20Allowance as a, createSnapshot as b, convertToReadableQuantity as c, ClaimConditionMetadataSchema as d, ClaimConditionInputSchema as e, fetchSnapshotEntryForAddress as f, ClaimConditionInputArray as g, ClaimConditionOutputSchema as h, CurrencySchema as i, CurrencyValueSchema as j, Signature20PayloadOutput as k, Signature721PayloadInput as l, Signature721PayloadOutput as m, Signature1155PayloadInput as n, Signature1155PayloadInputWithTokenId as o, Signature1155PayloadOutput as p, Signature721WithQuantityInput as q, Signature721WithQuantityOutput as r, MintRequest721 as s, MintRequest1155 as t, MintRequest721withQuantity as u, transformResultToClaimCondition as v, legacyContractModelToAbstract as w, newContractModelToAbstract as x, convertQuantityToBigNumber as y, prepareClaim as z };\n","import { constants } from 'ethers';\nimport { dG as TOKEN_DROP_CONTRACT_ROLES, cu as ContractWrapper, bn as AbiSchema, dH as DropErc20ContractSchema, aP as resolveAddress, H as getRoleHash } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-6f8989ff.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-dba35fa6.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-94655dc4.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-51f40eba.browser.esm.js';\nimport { D as DropClaimConditions } from './drop-claim-conditions-6a7767e6.browser.esm.js';\nimport { S as StandardErc20 } from './erc-20-standard-c06c2912.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport 'fast-deep-equal';\nimport './signature-ab20f9e3.browser.esm.js';\nimport './normalizePriceValue-3b8bca4f.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-ea837eec.browser.esm.js';\nimport './setErc20Allowance-7df9a12a.browser.esm.js';\nimport 'uuid';\nimport './erc-20-e1bc30a0.browser.esm.js';\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token-drop\");\n * ```\n *\n */\nclass TokenDrop extends StandardErc20 {\n  static contractRoles = TOKEN_DROP_CONTRACT_ROLES;\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.read(\"getVotes\", [await resolveAddress(account)]));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.read(\"delegates\", [await resolveAddress(account)]);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Claim a certain amount of tokens\n   * @remarks See {@link TokenDrop.claimTo}\n   * @param amount - the amount of tokens to mint\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (amount) {\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this.claimTo.prepare(await _this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - The transaction receipt\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (destinationAddress, amount) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _this2.erc20.claimTo.prepare(destinationAddress, amount, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  delegateTo = /* @__PURE__ */buildTransactionFunction(async delegateeAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"delegate\",\n      args: [await resolveAddress(delegateeAddress)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  burnTokens = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.erc20.burn.prepare(amount);\n  });\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return this.erc20.burnFrom.prepare(holder, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { TokenDrop };\n","module.exports = function reverse (src) {\n  var buffer = new Buffer(src.length)\n\n  for (var i = 0, j = src.length - 1; i <= j; ++i, --j) {\n    buffer[i] = src[j]\n    buffer[j] = src[i]\n  }\n\n  return buffer\n}\n","//     treeify.js\n//     Luke Plaster <notatestuser@gmail.com>\n//     https://github.com/notatestuser/treeify.js\n\n// do the universal module definition dance\n(function (root, factory) {\n\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.treeify = factory();\n  }\n\n}(this, function() {\n\n  function makePrefix(key, last) {\n    var str = (last ? '└' : '├');\n    if (key) {\n      str += '─ ';\n    } else {\n      str += '──┐';\n    }\n    return str;\n  }\n\n  function filterKeys(obj, hideFunctions) {\n    var keys = [];\n    for (var branch in obj) {\n      // always exclude anything in the object's prototype\n      if (!obj.hasOwnProperty(branch)) {\n        continue;\n      }\n      // ... and hide any keys mapped to functions if we've been told to\n      if (hideFunctions && ((typeof obj[branch])===\"function\")) {\n        continue;\n      }\n      keys.push(branch);\n    }\n    return keys;\n  }\n\n  function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {\n    var line = '', index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);\n\n    if (lastStatesCopy.push([ root, last ]) && lastStates.length > 0) {\n      // based on the \"was last element\" states of whatever we're nested within,\n      // we need to append either blankness or a branch to our line\n      lastStates.forEach(function(lastState, idx) {\n        if (idx > 0) {\n          line += (lastState[1] ? ' ' : '│') + '  ';\n        }\n        if ( ! circular && lastState[0] === root) {\n          circular = true;\n        }\n      });\n\n      // the prefix varies based on whether the key contains something to show and\n      // whether we're dealing with the last element in this collection\n      line += makePrefix(key, last) + key;\n\n      // append values and the circular reference indicator\n      showValues && (typeof root !== 'object' || root instanceof Date) && (line += ': ' + root);\n      circular && (line += ' (circular ref.)');\n\n      callback(line);\n    }\n\n    // can we descend into the next item?\n    if ( ! circular && typeof root === 'object') {\n      var keys = filterKeys(root, hideFunctions);\n      keys.forEach(function(branch){\n        // the last key is always printed with a different prefix, so we'll need to know if we have it\n        lastKey = ++index === keys.length;\n\n        // hold your breath for recursive action\n        growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);\n      });\n    }\n  };\n\n  // --------------------\n\n  var Treeify = {};\n\n  // Treeify.asLines\n  // --------------------\n  // Outputs the tree line-by-line, calling the lineCallback when each one is available.\n\n  Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {\n    /* hideFunctions and lineCallback are curried, which means we don't break apps using the older form */\n    var hideFunctionsArg = typeof hideFunctions !== 'function' ? hideFunctions : false;\n    growBranch('.', obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);\n  };\n\n  // Treeify.asTree\n  // --------------------\n  // Outputs the entire tree, returning it as a string with line breaks.\n\n  Treeify.asTree = function(obj, showValues, hideFunctions) {\n    var tree = '';\n    growBranch('.', obj, false, [], showValues, hideFunctions, function(line) {\n      tree += line + '\\n';\n    });\n    return tree;\n  };\n\n  // --------------------\n\n  return Treeify;\n\n}));\n"],"names":["RawDateSchema","z","union","date","transform","i","from","Math","floor","getTime","number","StartDateSchema","default","Date","EndDateSchema","now","assertEnabled","namespace","feature","detectContractFeature","contractWrapper","featureName","parse","abi","hasFunction","functionName","readContract","functions","ContractMetadata","name","constructor","schema","storage","this","parseOutputMetadata","metadata","output","parseAsync","parseInputMetadata","input","get","data","supportsContractMetadata","uri","read","includes","downloadJSON","contractName","contractSymbol","publishedMetadata","err","address","getProvider","options","symbol","description","info","title","e","Error","set","async","_parseAndUploadMetadata","wrapper","T","fromContractWrapper","method","args","receipt","update","prepare","parsedMetadata","upload","ContractEvents","addTransactionListener","listener","addListener","Transaction","removeTransactionListener","off","addEventListener","eventName","event","interface","getEvent","filter","topics","getEventTopic","wrappedListener","log","parsedLog","parseLog","toContractEvent","eventFragment","on","listenToAllEvents","console","error","removeEventListener","removeAllListeners","getAllEvents","filters","arguments","length","undefined","fromBlock","toBlock","order","orderedEvents","queryFilter","sort","a","b","blockNumber","parseEvents","getEvents","eventInterface","inputs","map","events","transaction","Object","fromEntries","entries","slice","key","value","rawLog","results","forEach","param","index","Array","isArray","components","arr","type","objArray","tuple","obj","j","push","GasCostEstimator","gasCostOf","fn","price","gasUnits","Promise","all","getGasPrice","estimateGas","mul","gasLimitOf","currentGasPriceInGwei","ContractAppURI","app_uri","getGatewayUrls","appURI","ContractInterceptor","overrideNextTransaction","hook","withTransactionOverride","ContractPlatformFee","platformFeeRecipient","platformFeeBps","platform_fee_recipient","platform_fee_basis_points","parsed","platformFeeInfo","ContractRoles","roles","getAll","_ref","role","item","h","roleHash","count","toNumber","keys","setAll","contractEncoder","C","rolesWithAddresses","every","currentRoles","encoded","sortedRoles","addresses","currentAddresses","addressOrEns","toAdd","toRemove","encode","getRevokeRoleFunctionName","revokeFunctionName","verify","members","resolvedAddress","toLowerCase","grant","revoke","signerAddress","getSignerAddress","ContractPrimarySale","getRecipient","setRecipient","recipient","DropClaimConditions","getActive","cc","tokenDecimals","getTokenDecimals","merkle","withAllowList","conditionId","isLegacySinglePhaseDrop","contractModel","isLegacyMultiPhaseDrop","id","isNewSinglePhaseDrop","isNewMultiphaseDrop","currentStartId","countBn","startId","conditions","decimals","fetchedConditions","c","canClaim","quantity","addressToCheck","getClaimIneligibilityReasons","reasons","activeConditionIndex","claimCondition","warn","NoWallet","quantityWithDecimals","NoClaimConditionSet","Unknown","availableSupply","lt","NotEnoughSupply","hasAllowList","merkleRootHash","allowListEntry","getClaimerProofs","AddressNotAllowed","claimVerification","prepareClaim","validMerkleProof","proofs","maxClaimable","proof","maxQuantityInAllowlist","currencyAddress","quantityLimitPerWallet","currency","currencyAddressInProof","pricePerToken","priceInProof","reason","OverMaxClaimablePerWallet","WrongPriceOrCurrency","ClaimPhaseNotStarted","claimedSupply","maxClaimablePerWallet","getSupplyClaimedByWallet","gt","add","lte","eq","lastClaimedTimestamp","timestampForNextClaim","div","AlreadyClaimed","WaitBeforeNextClaimTransaction","totalPrice","provider","getBalance","NotEnoughTokens","ERC20Abi","erc20","claimerAddress","claimConditionId","merkleRoot","f","toString","getSnapshotFormatVersion","walletAddress","activeClaimConditionId","_this","claimConditionInputs","resetClaimEligibilityForAll","claimConditionsProcessed","startTime","maxClaimableSupply","waitInSeconds","snapshot","s","Number","reduce","acc","current","snapshotInfos","sortedConditions","merkleInfo","snapshotUri","mergedMetadata","contractURI","cw","baseContractEncoder","contractEncoderLegacy","claimConditionInput","existingConditions","newConditionInputs","d","resolve","checkERC20Allowance","addressToClaim","activeClaimConditions","getClaimArguments","destinationAddress","getClaimTransaction","overrides","V1","V2","Erc20BatchMintable","to","toAddress","normalizeAmount","amount","Erc20Burnable","tokens","holder","Erc20ClaimableWithConditions","D","Erc20Droppable","claim","Erc20Mintable","batch","detectErc20BatchMintable","getMintTransaction","Erc20SignatureMintable","mint","mintRequest","signedPayload","payload","signature","message","mapPayloadToContractStruct","getCallOverrides","mintBatch","messages","signedPayloads","contractPayloads","p","generate","generateBatch","payloadsToSign","chainId","parsedRequests","getChainID","m","S","signer","getSigner","finalPayloads","contractStructs","signatures","struct","signTypedData","version","verifyingContract","MintRequest","M","normalizedPrice","n","amountWithDecimals","primarySaleRecipient","validityEndTimestamp","mintEndTime","validityStartTimestamp","mintStartTime","uid","Erc20","_chainId","mintable","detectErc20Mintable","burnable","detectErc20Burnable","droppable","detectErc20Droppable","signatureMintable","detectErc20SignatureMintable","onNetworkUpdated","network","updateSignerOrProvider","getAddress","balance","balanceOf","getValue","totalSupply","allowance","spender","owner","spenderAddress","allowanceOf","transfer","transferFrom","setAllowance","transferBatch","arg","mintTo","receiver","mintBatchTo","burn","burnFrom","claimTo","claimConditions","StandardErc20","PropertiesInput","object","catchall","unknown","OptionalPropertiesInput","array","optional","nullable","BasicNFTInput","string","image","animation_url","CommonNFTInput","extend","external_url","background_color","properties","attributes","NFTInputOrUriSchema","CommonNFTOutput","setErc20Allowance","contractToApprove","sendTransaction","Base","print","bufferIndexOf","element","binarySearch","Buffer","compare","linearSearch","buffer1","buffer2","equals","compareFunction","start","end","mid","ordering","eqChecker","bufferify","isBuffer","words","convertWordsToBuffer","isHexString","replace","Uint8Array","buffer","ArrayBuffer","isView","byteOffset","byteLength","bigNumberify","startsWith","BigInt","u8a","hex","byte","padStart","join","uint8ArrayToBigInt","v","test","tree","bufferToHex","withPrefix","alloc","bufferifyFn","arrayBuffer","hexString","parseInt","substring","hexStringToArrayBuffer","hexResult","uint8View","arrayBufferToHexString","log2","zip","hexZeroPad","hexStr","Base$1","wordArray","MerkleTree","duplicateOdd","concatenator","concat","hashLeaves","isBitcoinTree","leaves","layers","sortLeaves","sortPairs","fillDefaultHash","complete","hashFn","super","idx","processLeaves","getOptions","pow","ceil","createHashes","nodes","layerIndex","layerLimit","isInteger","hash","left","right","combined","addLeaf","leaf","addLeaves","getLeaves","values","getLeaf","getLeafIndex","target","getLeafCount","getHexLeaves","marshalLeaves","JSON","stringify","unmarshalLeaves","jsonStr","getLayers","getHexLayers","layer","getLayersFlat","unshift","getHexLayersFlat","getLayerCount","getRoot","getHexRoot","getProof","isRightNode","pairIndex","position","getHexProof","getProofs","getProofsDFS","currentLayer","reverse","pushed","leftchildIndex","rightchildIndex","splice","getHexProofs","getPositionalHexProof","getProofIndices","treeIndices","depth","leafCount","maximalIndices","Set","x","y","redundantIndices","has","getProofIndicesForUnevenTree","sortedLeafIndices","leavesCount","unevenLayers","proofIndices","layerNodes","proofNodeIndices","unevenLayer","find","getMultiProof","indices","isUnevenTree","getMultiProofForUnevenTree","els","ids","el","hashes","nextIds","pairElement","getPairNode","self","indexOf","proofHashes","currentLayerIndices","treeLayer","siblings","uniqueIndices","getHexMultiProof","getProofFlags","_proofs","tested","flags","ids_","proofUsed","targetNode","root","node","isLeftNode","buffers","verifyMultiProof","proofLeaves","verifyMultiProofForUnevenTree","proofitem","indexqueue","hasOwnProperty","call","pair","verifyMultiProofWithFlags","proofFlag","leavesLen","totalHashes","leafPos","hashPos","proofPos","computedRoot","calculateRootForUnevenTree","getDepth","getLayersAsObject","objs","shift","akey","bkey","resetTree","pairIdx","toTreeString","asTree","treeLayers","isPowOf2","leafIndices","leafHashes","totalLeavesCount","leafTuples","_ref2","_ref3","indexA","indexB","leafTupleIndices","_ref4","nextSliceStart","proofTuplesByLayers","sliceStart","_ref5","_ref6","_ref7","_ref8","layerIndex_","parentIndices","parentLayer","parentNodeTreeIndex","bufA","bufB","abstractContractModelToLegacy","model","startTimestamp","supplyClaimed","quantityLimitPerTransaction","waitTimeInSecondsBetweenClaims","abstractContractModelToNew","convertQuantityToBigNumber","parseSnapshotInputs","chunkSize","chunks","_","parsedChunks","chunk","SnapshotFormatVersion","ShardedMerkleTree","baseUri","originalEntriesUri","shardNybbles","shards","trees","fromUri","shardedMerkleTreeInfo","isShardedMerkleTree","fromShardedMerkleTreeInfo","hashEntry","entry","currencyDecimals","snapshotFormatVersion","fetchAndCacheDecimals","cache","buildAndUpload","snapshotInput","snapshotEntry","shard","currencyDecimalMap","subTrees","roots","shardsToUpload","shardId","uris","uploadBatch","lastIndexOf","shardedMerkleInfo","endsWith","hashedEntries","getAllEntries","fetchSnapshotEntryForAddress","merkleMetadata","raw","merkleTree","snapshotData","claims","legacyContractModelToAbstract","newContractModelToAbstract","approveErc20Allowance","activeClaimCondition","merkleMetadataFetcher","CurrencySchema","CurrencyValueSchema","displayValue","ClaimConditionMetadataSchema","ClaimConditionInputSchema","ClaimConditionInputArray","ClaimConditionOutputSchema","currentMintSupply","currencyMetadata","processSnapshotData","inputsWithSnapshots","conditionInput","snapshotInfo","size","createSnapshot","processClaimConditionInputs","parsedInputs","metadataOrUri","convertToContractModel","fetchSnapshot","smt","convertToReadableQuantity","bn","transformResultToClaimCondition","pm","shouldDownloadSnapshot","cv","sub","resolvedMetadata","updateExistingClaimConditions","priceDecimals","priceInWei","priceInTokens","newConditionParsed","mergedConditionOutput","existingOutput","newConditionAtIndex","formattedPrice","ClaimEligibility","resolveOrGenerateId","requestUId","v4","BaseSignaturePayloadInput","refine","E","Signature20PayloadInput","Signature20PayloadOutput","Signature721PayloadInput","N","royaltyRecipient","royaltyBps","Signature721PayloadOutput","Signature1155PayloadInput","Signature1155PayloadInputWithTokenId","tokenId","Signature1155PayloadOutput","Signature721WithQuantityInput","Signature721WithQuantityOutput","MintRequest20","MintRequest721","MintRequest1155","MintRequest721withQuantity","TokenDrop","static","app","contractRoles","encoder","estimator","G","sales","platformFees","interceptor","getVoteBalance","getVoteBalanceOf","account","getDelegation","getDelegationOf","isTransferRestricted","_this2","delegateTo","delegateeAddress","burnTokens","module","exports","src","makePrefix","last","str","filterKeys","hideFunctions","branch","growBranch","lastStates","showValues","callback","lastKey","circular","line","lastStatesCopy","lastState","Treeify","lineCallback","factory"],"sourceRoot":""}
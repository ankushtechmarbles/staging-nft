"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_thirdweb-dev_wallets_node_modules_thirdweb-dev_sdk_dist_marketplace-5b738c1b_bro-2b7779"],{

/***/ "./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/marketplace-5b738c1b.browser.esm.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/marketplace-5b738c1b.browser.esm.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Marketplace: () => (/* binding */ Marketplace)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var _QueryParams_39bcad7a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./QueryParams-39bcad7a.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/QueryParams-39bcad7a.browser.esm.js\");\n/* harmony import */ var _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./contract-publisher-1ff1fe07.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/contract-publisher-1ff1fe07.browser.esm.js\");\n/* harmony import */ var _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./marketplace-auction-f78a3c87.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/marketplace-auction-f78a3c87.browser.esm.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! merkletreejs */ \"./node_modules/merkletreejs/dist/index.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");\n * ```\n *\n * @public\n */\nclass Marketplace {\n  static contractRoles = _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dN;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the NFT contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const listingId = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   */\n\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const listingId = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 2.6;\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dw(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.e.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.ah(this.contractWrapper, _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dO, this.storage);\n    this.app = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.b0(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.ai(this.contractWrapper, Marketplace.contractRoles);\n    this.encoder = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.ag(this.contractWrapper);\n    this.estimator = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aQ(this.contractWrapper);\n    this.direct = new _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.M(this.contractWrapper, this.storage);\n    this.auction = new _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.a(this.contractWrapper, this.storage);\n    this.events = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aR(this.contractWrapper);\n    this.platformFees = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aT(this.contractWrapper);\n    this.interceptor = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aS(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Convenience function to get either a direct or auction listing\n   *\n   * @param listingId - the listing id\n   * @returns either a direct or auction listing\n   *\n   * @remarks Get a listing by its listing id\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.getListing(listingId);\n   * ```\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.assetContract === ethers__WEBPACK_IMPORTED_MODULE_9__.AddressZero) {\n      throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bx(this.getAddress(), listingId.toString());\n    }\n    switch (listing.listingType) {\n      case _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Auction:\n        {\n          return await this.auction.mapListing(listing);\n        }\n      case _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Direct:\n        {\n          return await this.direct.mapListing(listing);\n        }\n      default:\n        {\n          throw new Error(`Unknown listing type: ${listing.listingType}`);\n        }\n    }\n  }\n\n  /**\n   * Get all active listings\n   *\n   * @remarks Fetch all the active listings from this marketplace contract. An active listing means it can be bought or bid on.\n   * @example\n   * ```javascript\n   * const listings = await contract.getActiveListings();\n   * const priceOfFirstActiveListing = listings[0].price;\n   * ```\n   * @param filter - optional filter parameters\n   */\n  async getActiveListings(filter) {\n    const rawListings = await this.getAllListingsNoFilter(true);\n    const filtered = this.applyFilter(rawListings, filter);\n    const now = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(Math.floor(Date.now() / 1000));\n    return filtered.filter(l => {\n      return l.type === _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Auction && ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(l.endTimeInEpochSeconds).gt(now) && ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(l.startTimeInEpochSeconds).lte(now) || l.type === _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Direct && ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(l.quantity).gt(0);\n    });\n  }\n\n  /**\n   * Get all the listings\n   *\n   * @remarks Fetch all the listings from this marketplace contract, including sold ones.\n   * @example\n   * ```javascript\n   * const listings = await contract.getAllListings();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   */\n  async getAllListings(filter) {\n    const rawListings = await this.getAllListingsNoFilter(false);\n    return this.applyFilter(rawListings, filter);\n  }\n\n  /**\n   * @internal\n   */\n  getAll = this.getAllListings;\n\n  /**\n   * Get the total number of Listings\n   * @returns the total number listings on the marketplace\n   * @public\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalListings\", []);\n  }\n\n  /**\n   * Get whether listing is restricted only to addresses with the Lister role\n   */\n  async isRestrictedToListerRoleOnly() {\n    const anyoneCanList = await this.contractWrapper.read(\"hasRole\", [(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bI)(\"lister\"), ethers__WEBPACK_IMPORTED_MODULE_9__.AddressZero]);\n    return !anyoneCanList;\n  }\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  async getBidBufferBps() {\n    return this.contractWrapper.read(\"bidBufferBps\", []);\n  }\n\n  /**\n   * get the buffer time in seconds between offers\n   */\n  async getTimeBufferInSeconds() {\n    return this.contractWrapper.read(\"timeBuffer\", []);\n  }\n\n  /**\n   * Get all the offers for a listing\n   *\n   * @remarks Fetch all the offers for a specified direct or auction listing.\n   * @example\n   * ```javascript\n   * const offers = await marketplaceContract.getOffers(listingId);\n   * const firstOffer = offers[0];\n   * ```\n   *\n   * @param listingId - the id of the listing to fetch offers for\n   */\n  async getOffers(listingId) {\n    // get all new offer events from this contract\n    const listingEvents = await this.events.getEvents(\"NewOffer\", {\n      order: \"desc\",\n      filters: {\n        listingId\n      }\n    });\n    // derive the offers from the events\n    return await Promise.all(listingEvents.map(async e => {\n      return await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dE)(this.contractWrapper.getProvider(), ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(listingId), {\n        quantityWanted: e.data.quantityWanted,\n        pricePerToken: e.data.quantityWanted.gt(0) ? e.data.totalOfferAmount.div(e.data.quantityWanted) : e.data.totalOfferAmount,\n        currency: e.data.currency,\n        offeror: e.data.offeror\n      });\n    }));\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Purchase NFTs\n   * @remarks Buy a Direct or Auction listing on your marketplace.\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.buyoutListing(listingId, quantityDesired);\n   * ```\n   * @param listingId - the listing ID of the listing you want to buy\n   * @param quantityDesired - the quantity that you want to buy (for ERC1155 tokens)\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet (for direct listings only)\n   */\n  buyoutListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dx)(async (listingId, quantityDesired, receiver) => {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bx(this.getAddress(), listingId.toString());\n    }\n    switch (listing.listingType) {\n      case _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Direct:\n        {\n          (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(quantityDesired !== undefined, \"quantityDesired is required when buying out a direct listing\");\n          return await this.direct.buyoutListing.prepare(listingId, quantityDesired, receiver);\n        }\n      case _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Auction:\n        {\n          return await this.auction.buyoutListing.prepare(listingId);\n        }\n      default:\n        throw Error(`Unknown listing type: ${listing.listingType}`);\n    }\n  });\n\n  /**\n   * Make an offer for a Direct or Auction Listing\n   *\n   * @remarks Make an offer on a direct or auction listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to offer on\n   * const listingId = 0;\n   * // The price you are willing to offer per token\n   * const pricePerToken = 0.5;\n   * // The quantity of tokens you want to receive for this offer\n   * const quantity = 1;\n   *\n   * await contract.makeOffer(\n   *   listingId,\n   *   pricePerToken,\n   *   quantity,\n   * );\n   * ```\n   */\n  makeOffer = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dx)(async (listingId, pricePerToken, quantity) => {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bx(this.getAddress(), listingId.toString());\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    switch (listing.listingType) {\n      case _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Direct:\n        {\n          (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(quantity, \"quantity is required when making an offer on a direct listing\");\n          return await this.direct.makeOffer.prepare(listingId, quantity, (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.b8)(listing.currency) ? _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.cX[chainId].wrapped.address : listing.currency, pricePerToken);\n        }\n      case _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Auction:\n        {\n          return await this.auction.makeBid.prepare(listingId, pricePerToken);\n        }\n      default:\n        throw Error(`Unknown listing type: ${listing.listingType}`);\n    }\n  });\n\n  /**\n   * Set the Auction bid buffer\n   * @remarks A percentage (e.g. 5%) in basis points (5% = 500, 100% = 10000). A new bid is considered to be a winning bid only if its bid amount is at least the bid buffer (e.g. 5%) greater than the previous winning bid. This prevents buyers from making very slightly higher bids to win the auctioned items.\n   * @example\n   * ```javascript\n   * // the bid buffer in basis points\n   * const bufferBps = 5_00; // 5%\n   * await contract.setBidBufferBps(bufferBps);\n   * ```\n   * @param bufferBps - the bps value\n   */\n  setBidBufferBps = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dx)(async bufferBps => {\n    await this.roles.verify([\"admin\"], await this.contractWrapper.getSignerAddress());\n    const timeBuffer = await this.getTimeBufferInSeconds();\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setAuctionBuffers\",\n      args: [timeBuffer, ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(bufferBps)]\n    });\n  });\n\n  /**\n   * Set the Auction Time buffer:\n   * @remarks Measured in seconds (e.g. 15 minutes or 900 seconds). If a winning bid is made within the buffer of the auction closing (e.g. 15 minutes within the auction closing), the auction's closing time is increased by the buffer to prevent buyers from making last minute winning bids, and to give time to other buyers to make a higher bid if they wish to.\n   * @example\n   * ```javascript\n   * // the time buffer in seconds\n   * const bufferInSeconds = 60;\n   * await contract.setTimeBufferInSeconds(bufferInSeconds);\n   * ```\n   * @param bufferInSeconds - the seconds value\n   */\n  setTimeBufferInSeconds = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dx)(async bufferInSeconds => {\n    await this.roles.verify([\"admin\"], await this.contractWrapper.getSignerAddress());\n    const bidBuffer = await this.getBidBufferBps();\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setAuctionBuffers\",\n      args: [ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(bufferInSeconds), bidBuffer]\n    });\n  });\n\n  /**\n   * Restrict listing NFTs only from the specified NFT contract address.\n   * It is possible to allow listing from multiple contract addresses.\n   * @param contractAddress - the NFT contract address\n   */\n  allowListingFromSpecificAssetOnly = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dx)(async contractAddress => {\n    const encoded = [];\n    const members = await this.roles.get(\"asset\");\n    if (members.includes(ethers__WEBPACK_IMPORTED_MODULE_9__.AddressZero)) {\n      encoded.push(this.encoder.encode(\"revokeRole\", [(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bI)(\"asset\"), ethers__WEBPACK_IMPORTED_MODULE_9__.AddressZero]));\n    }\n    encoded.push(this.encoder.encode(\"grantRole\", [(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bI)(\"asset\"), contractAddress]));\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Allow listings from any NFT contract\n   */\n  allowListingFromAnyAsset = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dx)(async () => {\n    const encoded = [];\n    const members = await this.roles.get(\"asset\");\n    for (const addr in members) {\n      encoded.push(this.encoder.encode(\"revokeRole\", [(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bI)(\"asset\"), addr]));\n    }\n    encoded.push(this.encoder.encode(\"grantRole\", [(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bI)(\"asset\"), ethers__WEBPACK_IMPORTED_MODULE_9__.AddressZero]));\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async getAllListingsNoFilter(filterInvalidListings) {\n    const listings = await Promise.all(Array.from(Array((await this.contractWrapper.read(\"totalListings\", [])).toNumber()).keys()).map(async i => {\n      let listing;\n      try {\n        listing = await this.getListing(i);\n      } catch (err) {\n        if (err instanceof _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bx) {\n          return undefined;\n        } else {\n          console.warn(`Failed to get listing ${i}' - skipping. Try 'marketplace.getListing(${i})' to get the underlying error.`);\n          return undefined;\n        }\n      }\n      if (listing.type === _marketplace_auction_f78a3c87_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.L.Auction) {\n        return listing;\n      }\n      if (filterInvalidListings) {\n        const {\n          valid\n        } = await this.direct.isStillValidListing(listing);\n        if (!valid) {\n          return undefined;\n        }\n      }\n      return listing;\n    }));\n    return listings.filter(l => l !== undefined);\n  }\n  applyFilter(listings, filter) {\n    let rawListings = [...listings];\n    const start = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(filter?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(filter?.count || _QueryParams_39bcad7a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.D).toNumber();\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(seller => seller.sellerAddress.toString().toLowerCase() === filter?.seller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.assetContractAddress.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n      rawListings = rawListings.filter((_, index) => index >= start);\n      rawListings = rawListings.slice(0, count);\n    }\n    return rawListings;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/marketplace-5b738c1b.browser.esm.js\n");

/***/ }),

/***/ "./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/marketplace-auction-f78a3c87.browser.esm.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/marketplace-auction-f78a3c87.browser.esm.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   L: () => (/* binding */ ListingType),\n/* harmony export */   M: () => (/* binding */ MarketplaceDirect),\n/* harmony export */   a: () => (/* binding */ MarketplaceAuction)\n/* harmony export */ });\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC1155.json */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC165_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC165.json */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC165.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721.json */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721.json\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/units/lib.esm/index.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contract-publisher-1ff1fe07.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/contract-publisher-1ff1fe07.browser.esm.js\");\n\n\n\n\n\n\n\nlet ListingType = /*#__PURE__*/function (ListingType) {\n  ListingType[ListingType[\"Direct\"] = 0] = \"Direct\";\n  ListingType[ListingType[\"Auction\"] = 1] = \"Auction\";\n  return ListingType;\n}({});\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceDirect {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.assetContract === ethers__WEBPACK_IMPORTED_MODULE_1__.AddressZero) {\n      throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bx(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Direct) {\n      throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.by(this.getAddress(), listingId.toString(), \"Auction\", \"Direct\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  async getActiveOffer(listingId, address) {\n    await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(ethers__WEBPACK_IMPORTED_MODULE_4__.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.read(\"offers\", [listingId, await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cL)(address)]);\n    if (offers.offeror === ethers__WEBPACK_IMPORTED_MODULE_1__.AddressZero) {\n      return undefined;\n    }\n    return await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dE)(this.contractWrapper.getProvider(), ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId), offers);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  createListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listing => {\n    (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dH)(listing);\n    const resolvedAssetAddress = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cL)(listing.assetContractAddress);\n    const resolvedCurrencyAddress = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cL)(listing.currencyContractAddress);\n    await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dI)(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.ba)(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: resolvedAssetAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: normalizedPricePerToken,\n        currencyToAccept: (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.b9)(resolvedCurrencyAddress),\n        listingType: ListingType.Direct,\n        quantityToList: listing.quantity,\n        reservePricePerToken: normalizedPricePerToken,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingStartTime)\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new listings\n   *\n   * @remarks Create a batch of new listings on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const listings = [...];\n   * const tx = await contract.direct.createListingsBatch(listings);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listings => {\n    const data = await Promise.all(listings.map(async listing => {\n      const tx = await this.createListing.prepare(listing);\n      return tx.encode();\n    }));\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Make an offer for a Direct Listing\n   *\n   * @remarks Make an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n   *\n   * // The listing ID of the asset you want to offer on\n   * const listingId = 0;\n   * // The price you are willing to offer per token\n   * const pricePerToken = 1;\n   * // The quantity of tokens you want to receive for this offer\n   * const quantity = 1;\n   * // The address of the currency you are making the offer in (must be ERC-20)\n   * const currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n   *\n   * await contract.direct.makeOffer(\n   *   listingId,\n   *   quantity,\n   *   currencyContractAddress,\n   *   pricePerToken\n   * );\n   * ```\n   */\n  makeOffer = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async (listingId, quantityDesired, currencyContractAddress, pricePerToken, expirationDate) => {\n    if ((0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.b8)(currencyContractAddress)) {\n      throw new Error(\"You must use the wrapped native token address when making an offer with a native token\");\n    }\n    const normalizedPrice = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.ba)(this.contractWrapper.getProvider(), pricePerToken, currencyContractAddress);\n    try {\n      await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${listingId}`);\n    }\n    const quantity = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(quantityDesired);\n    const value = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(normalizedPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bd)(this.contractWrapper, value, currencyContractAddress, overrides);\n    let expirationTimestamp = ethers__WEBPACK_IMPORTED_MODULE_5__.MaxUint256;\n    if (expirationDate) {\n      expirationTimestamp = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(Math.floor(expirationDate.getTime() / 1000));\n    }\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"offer\",\n      args: [listingId, quantityDesired, currencyContractAddress, normalizedPrice, expirationTimestamp],\n      overrides\n    });\n  });\n\n  /**\n   * Accept an offer on a direct listing\n   *\n   * @remarks Accept an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const offeror = \"0x...\";\n   *\n   * await contract.direct.acceptOffer(listingId, offeror);\n   * ```\n   */\n  acceptOffer = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async (listingId, addressOfOfferor) => {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too low.\n     */\n    await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    const resolvedAddress = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cL)(addressOfOfferor);\n    const offer = await this.contractWrapper.read(\"offers\", [listingId, resolvedAddress]);\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"acceptOffer\",\n      args: [listingId, resolvedAddress, offer.currency, offer.pricePerToken]\n    });\n  });\n\n  /**\n   * Buy a Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  buyoutListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async (listingId, quantityDesired, receiver) => {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(quantityDesired);\n    const value = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bd)(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"buy\",\n      args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n      overrides\n    });\n  });\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   */\n  updateListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listing => {\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listing.id, listing.quantity, listing.buyoutPrice,\n      // reserve price, doesn't matter for direct listing\n      listing.buyoutPrice, await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cL)(listing.currencyContractAddress), listing.startTimeInSeconds, listing.secondsUntilEnd]\n    });\n  });\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.direct.cancelListing(listingId);\n   * ```\n   */\n  cancelListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listingId => {\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelDirectListing\",\n      args: [listingId]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bc)(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dF)(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dG)(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.sellerAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(listing.assetContractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC165_json__WEBPACK_IMPORTED_MODULE_7__, provider);\n    const isERC721 = await erc165.supportsInterface(_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cU);\n    const isERC1155 = await erc165.supportsInterface(_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cV);\n    if (isERC721) {\n      const asset = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(listing.assetContractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_8__, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = owner?.toLowerCase() === listing.sellerAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(listing.assetContractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_9__, provider);\n      const balance = await asset.balanceOf(listing.sellerAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n}\n\n/**\n * Handles auction listings\n * @public\n */\nclass MarketplaceAuction {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.encoder = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.ag(contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bx(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Auction) {\n      throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.by(this.getAddress(), listingId.toString(), \"Direct\", \"Auction\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(listingId) {\n    await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (offers.offeror === ethers__WEBPACK_IMPORTED_MODULE_1__.AddressZero) {\n      return undefined;\n    }\n    return await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dE)(this.contractWrapper.getProvider(), ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(listingId) {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    const now = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== ethers__WEBPACK_IMPORTED_MODULE_1__.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const contractEvents = new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aR(this.contractWrapper);\n    const closedAuctions = await contractEvents.getEvents(\"AuctionClosed\");\n    const auction = closedAuctions.find(a => a.data.listingId.eq(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId)));\n    if (!auction) {\n      throw new Error(`Could not find auction with listingId ${listingId} in closed auctions`);\n    }\n    return auction.data.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  createListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listing => {\n    (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dH)(listing);\n    const resolvedAssetAddress = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cL)(listing.assetContractAddress);\n    const resolvedCurrencyAddress = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.cL)(listing.currencyContractAddress);\n    await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dI)(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.ba)(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n    const normalizedReservePrice = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.ba)(this.contractWrapper.getProvider(), listing.reservePricePerToken, resolvedCurrencyAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: resolvedAssetAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: normalizedPricePerToken,\n        currencyToAccept: (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.b9)(resolvedCurrencyAddress),\n        listingType: ListingType.Auction,\n        quantityToList: listing.quantity,\n        reservePricePerToken: normalizedReservePrice,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingStartTime)\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new auctions\n   *\n   * @remarks Create a batch of new auctions on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const auctions = [...];\n   * const tx = await contract.auction.createListingsBatch(auctions);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listings => {\n    const data = await Promise.all(listings.map(async listing => {\n      const tx = await this.createListing.prepare(listing);\n      return tx.encode();\n    }));\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await contract.auction.buyoutListing(listingId);\n   * ```\n   */\n  buyoutListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listingId => {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    const currencyMetadata = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bb)(this.contractWrapper.getProvider(), listing.currencyContractAddress);\n    return this.makeBid.prepare(listingId, ethers__WEBPACK_IMPORTED_MODULE_10__.formatUnits(listing.buyoutPrice, currencyMetadata.decimals));\n  });\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  makeBid = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async (listingId, pricePerToken) => {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    const normalizedPrice = await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.ba)(this.contractWrapper.getProvider(), pricePerToken, listing.currencyContractAddress);\n    if (normalizedPrice.eq(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    const bidBuffer = await this.contractWrapper.read(\"bidBufferBps\", []);\n    const winningBid = await this.getWinningBid(listingId);\n    if (winningBid) {\n      const isWinner = (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dJ)(winningBid.pricePerToken, normalizedPrice, bidBuffer);\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(isWinner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedPrice;\n      const reservePrice = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listing.reservePrice);\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenPrice.gte(reservePrice), \"Bid price is too low based on reserve price\");\n    }\n    const quantity = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listing.quantity);\n    const value = normalizedPrice.mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bd)(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"offer\",\n      args: [listingId, listing.quantity, listing.currencyContractAddress, normalizedPrice, ethers__WEBPACK_IMPORTED_MODULE_5__.MaxUint256],\n      overrides\n    });\n  });\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.auction.cancelListing(listingId);\n   * ```\n   */\n  cancelListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listingId => {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    const now = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listing.startTimeInEpochSeconds);\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (now.gt(startTime) && offers.offeror !== ethers__WEBPACK_IMPORTED_MODULE_1__.AddressZero) {\n      throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bv(listingId.toString());\n    }\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"closeAuction\",\n      args: [ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId), await this.contractWrapper.getSignerAddress()]\n    });\n  });\n\n  /**\n   * Close the Auction for the buyer or the seller\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer or the seller.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.closeListing(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n   */\n  closeListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async (listingId, closeFor) => {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    try {\n      return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"closeAuction\",\n        args: [ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId), closeFor]\n      });\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bB(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Execute the Auction Sale\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.executeSale(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   */\n  executeSale = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listingId => {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId));\n    try {\n      const winningBid = await this.getWinningBid(listingId);\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"closeAuction\", [listingId, listing.sellerAddress]);\n      const closeForBuyer = this.encoder.encode(\"closeAuction\", [listingId, winningBid.buyerAddress]);\n      return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [closeForSeller, closeForBuyer]\n      });\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bB(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Update an Auction listing with new metadata\n   * @param listing - the listing id to update\n   */\n  updateListing = /* @__PURE__ */(0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dx)(async listing => {\n    return _contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.aW.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds]\n    });\n  });\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  async getBidBufferBps() {\n    return this.contractWrapper.read(\"bidBufferBps\", []);\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param listingId - the listing id of the auction\n   */\n  async getMinimumNextBid(listingId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, listing] = await Promise.all([this.getBidBufferBps(), this.getWinningBid(listingId), await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listingId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    winningBid.currencyValue.value :\n    // if there is no winning bid use the reserve price\n    listing.reservePrice;\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bc)(this.contractWrapper.getProvider(), listing.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bc)(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.dF)(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      reservePriceCurrencyValuePerToken: await (0,_contract_publisher_1ff1fe07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.bc)(this.contractWrapper.getProvider(), listing.currency, listing.reservePricePerToken),\n      reservePrice: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction\n    };\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/wallets/node_modules/@thirdweb-dev/sdk/dist/marketplace-auction-f78a3c87.browser.esm.js\n");

/***/ })

}]);
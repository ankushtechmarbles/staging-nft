{"version":3,"file":"js/6724.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/QueryParams-feab8e08.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/assertEnabled-ea837eec.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-4e9cb063.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-6f8989ff.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-owner-1378b25d.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-dba35fa6.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-roles-94655dc4.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/contract-sales-51f40eba.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/drop-claim-conditions-6a7767e6.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/erc-721-6f1fbec1.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-d20eb498.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-7df9a12a.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/merkletree/dist/thirdweb-dev-merkletree.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/signature-ab20f9e3.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/signature-drop-ec1acd48.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-9c1024c5.browser.esm.js","webpack:///./node_modules/buffer-reverse/index.js","webpack:///./node_modules/treeify/treeify.js"],"sourcesContent":["import { C as CommonNFTOutput, a as CommonNFTInput } from './setErc20Allowance-7df9a12a.browser.esm.js';\nimport { utils, BigNumber, Contract } from 'ethers';\nimport 'zod';\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst InterfaceId_IERC721 = /* @__PURE__ */(() => utils.arrayify(\"0x80ac58cd\"))();\n\n/**\n * @internal\n */\nconst InterfaceId_IERC1155 = /* @__PURE__ */(() => utils.arrayify(\"0xd9b67a26\"))();\n\nconst FALLBACK_METADATA = {\n  name: \"Failed to load NFT metadata\"\n};\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nasync function fetchTokenMetadata(tokenId, tokenUri, storage) {\n  // check for base64 encoded JSON\n  if (tokenUri.startsWith(\"data:application/json;base64\") && typeof Buffer !== \"undefined\") {\n    const base64 = tokenUri.split(\",\")[1];\n    const jsonMetadata = JSON.parse(Buffer.from(base64, \"base64\").toString(\"utf-8\"));\n    return CommonNFTOutput.parse({\n      ...jsonMetadata,\n      id: BigNumber.from(tokenId).toString(),\n      uri: tokenUri\n    });\n  }\n  // handle dynamic id URIs (2 possible formats)\n  const parsedUri = tokenUri.replace(\"{id}\", utils.hexZeroPad(BigNumber.from(tokenId).toHexString(), 32).slice(2));\n  let jsonMetadata;\n  try {\n    jsonMetadata = await storage.downloadJSON(parsedUri);\n  } catch (err) {\n    const unparsedTokenIdUri = tokenUri.replace(\"{id}\", BigNumber.from(tokenId).toString());\n    try {\n      jsonMetadata = await storage.downloadJSON(unparsedTokenIdUri);\n    } catch (e) {\n      console.warn(`failed to get token metadata: ${JSON.stringify({\n        tokenId: tokenId.toString(),\n        tokenUri\n      })} -- falling back to default metadata`);\n      jsonMetadata = FALLBACK_METADATA;\n    }\n  }\n  return CommonNFTOutput.parse({\n    ...jsonMetadata,\n    id: BigNumber.from(tokenId).toString(),\n    uri: tokenUri\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress - the contract address\n * @param provider - the provider to use\n * @param tokenId - the token id\n * @param storage - the storage to use\n */\nasync function fetchTokenMetadataForContract(contractAddress, provider, tokenId, storage) {\n  let uri;\n  const ERC165MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n  const erc165 = new Contract(contractAddress, ERC165MetadataAbi, provider);\n  const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\n  if (isERC721) {\n    const ERC721MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json')).default;\n    const erc721 = new Contract(contractAddress, ERC721MetadataAbi, provider);\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const ERC1155MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json')).default;\n    const erc1155 = new Contract(contractAddress, ERC1155MetadataAbi, provider);\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    // no uri found, return fallback metadata\n    return CommonNFTOutput.parse({\n      ...FALLBACK_METADATA,\n      id: BigNumber.from(tokenId).toString(),\n      uri: \"\"\n    });\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata - the metadata to upload\n * @param storage - the storage to use\n */\nasync function uploadOrExtractURI(metadata, storage) {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.upload(CommonNFTInput.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas - the metadata to upload\n * @param storage - the storage to use\n * @param startNumber - the number to start the file names at\n * @param contractAddress - the contract address\n * @param signerAddress - the signer address\n * @param options - options\n */\nasync function uploadOrExtractURIs(metadatas, storage, startNumber, options) {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const uris = await storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      rewriteFileNames: {\n        fileStartNumber: startNumber || 0\n      },\n      onProgress: options?.onProgress\n    });\n    return uris;\n  } else {\n    throw new Error(\"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\");\n  }\n}\nfunction getBaseUriFromBatch(uris) {\n  const baseUri = uris[0].substring(0, uris[0].lastIndexOf(\"/\"));\n  for (let i = 0; i < uris.length; i++) {\n    const uri = uris[i].substring(0, uris[i].lastIndexOf(\"/\"));\n    if (baseUri !== uri) {\n      throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n    }\n  }\n\n  // Ensure that baseUri ends with trailing slash\n  return baseUri.replace(/\\/$/, \"\") + \"/\";\n}\nfunction isUriList(metadatas) {\n  return metadatas.find(m => typeof m !== \"string\") === undefined;\n}\nfunction isMetadataList(metadatas) {\n  return metadatas.find(m => typeof m !== \"object\") === undefined;\n}\n\n/**\n * @internal\n */\nconst DEFAULT_QUERY_ALL_COUNT = 100;\n\n/**\n * Pagination Parameters\n * @public\n */\n\nexport { DEFAULT_QUERY_ALL_COUNT as D, FALLBACK_METADATA as F, InterfaceId_IERC721 as I, InterfaceId_IERC1155 as a, uploadOrExtractURI as b, fetchTokenMetadataForContract as c, fetchTokenMetadata as f, getBaseUriFromBatch as g, uploadOrExtractURIs as u };\n","import { BigNumber } from 'ethers';\nimport { z } from 'zod';\nimport { x as ExtensionNotImplementedError } from './index-827e427d.browser.esm.js';\n\nconst RawDateSchema = /* @__PURE__ */(() => z.union([z.date().transform(i => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n}), z.number().transform(i => {\n  return BigNumber.from(i);\n})]))();\n\n/**\n * Default to now\n */\nconst StartDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(0)))();\n\n/**\n * Default to 10 years from now\n */\nconst EndDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10)))();\n\n/**\n * Checks whether the given DetectableFeature is defined\n * @internal\n * @param namespace - The namespace to check\n * @param feature - The corresponding feature\n */\nfunction assertEnabled(namespace, feature) {\n  if (!namespace) {\n    throw new ExtensionNotImplementedError(feature);\n  }\n  return namespace;\n}\n\nexport { EndDateSchema as E, RawDateSchema as R, StartDateSchema as S, assertEnabled as a };\n","import { am as isExtensionEnabled, bn as AbiSchema, d1 as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, b1 as EventType, d2 as FEATURE_APPURI } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { utils } from 'ethers';\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param featureName - The feature name to check\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  return isExtensionEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param functionName - The function name to check\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns the metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns a function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const [price, gasUnits] = await Promise.all([this.contractWrapper.getProvider().getGasPrice(), this.contractWrapper.estimateGas(fn, args)]);\n    return utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns the current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns the appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h };\n","/**\n * Allows overriding transaction behavior for this contract\n * @public\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { h as hasFunction } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { d4 as FEATURE_ROYALTY, bH as CommonRoyaltySchema, aZ as NATIVE_TOKEN_ADDRESS, d5 as FEATURE_OWNER, aP as resolveAddress } from './index-827e427d.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { utils, BigNumber, Contract } from 'ethers';\nimport { a as CommonNFTInput } from './setErc20Allowance-7df9a12a.browser.esm.js';\nimport { c as fetchTokenMetadataForContract, g as getBaseUriFromBatch } from './QueryParams-feab8e08.browser.esm.js';\nimport { a as approveErc20Allowance } from './signature-ab20f9e3.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-3b8bca4f.browser.esm.js';\n\n/**\n * Handle contract royalties\n * @remarks Configure royalties for an entire contract or a particular token.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n *   seller_fee_basis_points: 100, // 1% royalty fee\n *   fee_recipient: \"0x...\", // the fee recipient\n * });\n * ```\n * @public\n */\nclass ContractRoyalty {\n  featureName = FEATURE_ROYALTY.name;\n  constructor(contractWrapper, metadata) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Get the royalty recipient and fee\n   * @returns - The royalty recipient and BPS\n   * @example\n   * ```javascript\n   * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n   * console.log(royaltyInfo.fee_recipient);\n   * console.log(royaltyInfo.seller_fee_basis_points);\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async getDefaultRoyaltyInfo() {\n    const [royaltyRecipient, royaltyBps] = await this.contractWrapper.read(\"getDefaultRoyaltyInfo\", []);\n    // parse it on the way out to make sure we default things if they are not set\n    return CommonRoyaltySchema.parseAsync({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps\n    });\n  }\n\n  /**\n   * Get the royalty recipient and fee of a particular token\n   * @returns - The royalty recipient and BPS\n   * @example\n   * ```javascript\n   * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n   * console.log(royaltyInfo.fee_recipient);\n   * console.log(royaltyInfo.seller_fee_basis_points);\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async getTokenRoyaltyInfo(tokenId) {\n    const [royaltyRecipient, royaltyBps] = await this.contractWrapper.read(\"getRoyaltyInfoForToken\", [tokenId]);\n    return CommonRoyaltySchema.parseAsync({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps\n    });\n  }\n\n  /**\n   * Set the royalty recipient and fee\n   * @param royaltyData - the royalty recipient and fee\n   *  @example\n   * ```javascript\n   * await contract.roles.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1% royalty fee\n   *   fee_recipient: \"0x...\", // the fee recipient\n   * });\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  setDefaultRoyaltyInfo = /* @__PURE__ */buildTransactionFunction(async royaltyData => {\n    // read the metadata from the contract\n    const oldMetadata = await this.metadata.get();\n\n    // update the metadata with the new royalty data\n    // if one of the keys is \"undefined\" it will be ignored (which is the desired behavior)\n    const mergedMetadata = await this.metadata.parseInputMetadata({\n      ...oldMetadata,\n      ...royaltyData\n    });\n\n    // why not use this.metadata.set()? - because that would end up sending it's own separate transaction to `setContractURI`\n    // but we want to send both the `setRoyaltyInfo` and `setContractURI` in one transaction!\n    const contractURI = await this.metadata._parseAndUploadMetadata(mergedMetadata);\n    if (hasFunction(\"setContractURI\", this.contractWrapper)) {\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      // encode both the functions we want to send\n      const encoded = [contractEncoder.encode(\"setDefaultRoyaltyInfo\", [mergedMetadata.fee_recipient, mergedMetadata.seller_fee_basis_points]), contractEncoder.encode(\"setContractURI\", [contractURI])];\n      // actually send the transaction and return the receipt + a way to get the new royalty info\n\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded],\n        parse: receipt => ({\n          receipt,\n          data: () => this.getDefaultRoyaltyInfo()\n        })\n      });\n    } else {\n      throw new Error(\"Updating royalties requires implementing ContractMetadata in your contract to support marketplaces like OpenSea.\");\n    }\n  });\n\n  /**\n   * Set the royalty recipient and fee for a particular token\n   * @param tokenId - the token id\n   * @param royaltyData - the royalty recipient and fee\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 100, // 1% royalty fee\n   *   fee_recipient: \"0x...\", // the fee recipient\n   * });\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  setTokenRoyaltyInfo = /* @__PURE__ */buildTransactionFunction(async (tokenId, royaltyData) => {\n    const parsedRoyaltyData = CommonRoyaltySchema.parse(royaltyData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setRoyaltyInfoForToken\",\n      args: [tokenId, parsedRoyaltyData.fee_recipient, parsedRoyaltyData.seller_fee_basis_points],\n      parse: receipt => ({\n        receipt,\n        data: () => this.getDefaultRoyaltyInfo()\n      })\n    });\n  });\n}\n\n/**\n * Handles delayed reveal logic\n * @public\n */\nclass DelayedReveal {\n  constructor(contractWrapper, storage, featureName, nextTokenIdToMintFn) {\n    this.featureName = featureName;\n    this.nextTokenIdToMintFn = nextTokenIdToMintFn;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until your reveal them!\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * ```\n   * @public\n   * @param placeholder - the placeholder NFT to show before the reveal\n   * @param metadatas - the final NFTs that will be hidden\n   * @param password - the password that will be used to reveal these NFTs\n   * @param options - additional options like upload progress\n   */\n  createDelayedRevealBatch = /* @__PURE__ */buildTransactionFunction(async (placeholder, metadatas, password, options) => {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const placeholderUris = await this.storage.uploadBatch([CommonNFTInput.parse(placeholder)], {\n      rewriteFileNames: {\n        fileStartNumber: 0\n      }\n    });\n    const placeholderUri = getBaseUriFromBatch(placeholderUris);\n    const startFileNumber = await this.nextTokenIdToMintFn();\n    const uris = await this.storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      onProgress: options?.onProgress,\n      rewriteFileNames: {\n        fileStartNumber: startFileNumber.toNumber()\n      }\n    });\n    const baseUri = getBaseUriFromBatch(uris);\n    const baseUriId = await this.contractWrapper.read(\"getBaseURICount\", []);\n    const hashedPassword = await this.hashDelayRevealPassword(baseUriId, password);\n    const encryptedBaseUri = await this.contractWrapper.read(\"encryptDecrypt\", [utils.toUtf8Bytes(baseUri), hashedPassword]);\n    let data;\n    const legacyContract = await this.isLegacyContract();\n    if (legacyContract) {\n      data = encryptedBaseUri;\n    } else {\n      const chainId = await this.contractWrapper.getChainID();\n      const provenanceHash = utils.solidityKeccak256([\"bytes\", \"bytes\", \"uint256\"], [utils.toUtf8Bytes(baseUri), hashedPassword, chainId]);\n      data = utils.defaultAbiCoder.encode([\"bytes\", \"bytes32\"], [encryptedBaseUri, provenanceHash]);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"lazyMint\",\n      args: [uris.length, placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`, data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n        const startingIndex = events[0].args.startTokenId;\n        const endingIndex = events[0].args.endTokenId;\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt\n          });\n        }\n        return results;\n      }\n    });\n  });\n\n  /**\n   * Reveal a batch of hidden NFTs\n   * @remarks Reveal the NFTs of a batch using the password.\n   * @example\n   * ```javascript\n   * // the batch to reveal\n   * const batchId = 0;\n   * // reveal the batch\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @public\n   * @param batchId - the id of the batch to reveal\n   * @param password - the password\n   */\n  reveal = /* @__PURE__ */buildTransactionFunction(async (batchId, password) => {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const key = await this.hashDelayRevealPassword(batchId, password);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper.callStatic().reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"reveal\",\n      args: [batchId, key]\n    });\n  });\n\n  /**\n   * Gets the list of unrevealed NFT batches.\n   * @remarks Gets the list of unrevealed NFT batches.\n   * @example\n   * ```javascript\n   * const batches = await contract.revealer.getBatchesToReveal();\n   * ```\n   * @public\n   */\n  async getBatchesToReveal() {\n    const count = await this.contractWrapper.read(\"getBaseURICount\", []);\n    if (count.isZero()) {\n      return [];\n    }\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(countRangeArray.map(i => {\n      if (hasFunction(\"getBatchIdAtIndex\", this.contractWrapper)) {\n        return this.contractWrapper.read(\"getBatchIdAtIndex\", [i]);\n      }\n      if (hasFunction(\"baseURIIndices\", this.contractWrapper)) {\n        return this.contractWrapper.read(\"baseURIIndices\", [i]);\n      }\n      throw new Error(\"Contract does not have getBatchIdAtIndex or baseURIIndices.\");\n    }));\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenMetadatas = await Promise.all(Array.from([0, ...uriIndicesWithZeroStart]).map(i => this.getNftMetadata(i.toString())));\n\n    // index is the uri indices, which is end token id. different from uris\n    const legacyContract = await this.isLegacyContract();\n    const encryptedUriData = await Promise.all(Array.from([...uriIndices]).map(i => legacyContract ? this.getLegacyEncryptedData(i) : this.contractWrapper.read(\"encryptedData\", [i])));\n    const encryptedBaseUris = encryptedUriData.map(data => {\n      if (utils.hexDataLength(data) > 0) {\n        if (legacyContract) {\n          return data;\n        }\n        const result = utils.defaultAbiCoder.decode([\"bytes\", \"bytes32\"], data);\n        return result[0];\n      } else {\n        return data;\n      }\n    });\n    return tokenMetadatas.map((meta, index) => ({\n      batchId: BigNumber.from(index),\n      batchUri: meta.uri,\n      placeholderMetadata: meta\n    })).filter((_, index) => utils.hexDataLength(encryptedBaseUris[index]) > 0);\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  async hashDelayRevealPassword(batchTokenIndex, password) {\n    const chainId = await this.contractWrapper.getChainID();\n    const contractAddress = this.contractWrapper.address;\n    return utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchTokenIndex, contractAddress]);\n  }\n  async getNftMetadata(tokenId) {\n    return fetchTokenMetadataForContract(this.contractWrapper.address, this.contractWrapper.getProvider(), tokenId, this.storage);\n  }\n  async isLegacyContract() {\n    if (hasFunction(\"contractVersion\", this.contractWrapper)) {\n      try {\n        const version = await this.contractWrapper.read(\"contractVersion\", []);\n        return version <= 2;\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async getLegacyEncryptedData(index) {\n    const DeprecatedAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json')).default;\n    const legacy = new Contract(this.contractWrapper.address, DeprecatedAbi, this.contractWrapper.getProvider());\n    const result = await legacy.functions[\"encryptedBaseURI\"](index);\n    if (result.length > 0) {\n      return result[0];\n    } else {\n      return \"0x\";\n    }\n  }\n}\n\nasync function calculateClaimCost(contractWrapper, pricePerToken, quantity, currencyAddress, checkERC20Allowance) {\n  let overrides = {};\n  const currency = currencyAddress || NATIVE_TOKEN_ADDRESS;\n  const normalizedPrice = await normalizePriceValue(contractWrapper.getProvider(), pricePerToken, currency);\n  const totalCost = normalizedPrice.mul(quantity);\n  if (totalCost.gt(0)) {\n    if (currency === NATIVE_TOKEN_ADDRESS) {\n      overrides = {\n        value: totalCost\n      };\n    } else if (currency !== NATIVE_TOKEN_ADDRESS && checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currency, totalCost, quantity, 0);\n    }\n  }\n  return overrides;\n}\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractOwner {\n  featureName = FEATURE_OWNER.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the current owner of the contract\n   * @example\n   * ```javascript\n   * await contract.owner.get();\n   * console.log(\"Owner address: \", ownerAddress);\n   * ```\n   * @returns the owner address\n   * @twfeature Ownable\n   */\n  async get() {\n    return this.contractWrapper.read(\"owner\", []);\n  }\n\n  /**\n   * Set the new owner of the contract\n   * @remarks Can only be called by the current owner.\n   *\n   * @param address - the address of the new owner\n   *\n   * @example\n   * ```javascript\n   * const newOwnerAddress = \"{{wallet_address}}\";\n   * await contract.owner.set(newOwnerAddress);\n   * ```\n   * @twfeature Ownable\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async address => {\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setOwner\",\n      args: [resolvedAddress]\n    });\n  });\n}\n\nexport { ContractRoyalty as C, DelayedReveal as D, ContractOwner as a, calculateClaimCost as c };\n","import { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { dn as FEATURE_PLATFORM_FEE, bJ as CommonPlatformFeeSchema } from './index-827e427d.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import invariant from 'tiny-invariant';\nimport { d3 as FEATURE_PERMISSIONS, H as getRoleHash, aP as resolveAddress, o as MissingRoleError } from './index-827e427d.browser.esm.js';\nimport { h as hasFunction } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractRoles {\n  featureName = FEATURE_PERMISSIONS.name;\n\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Get all members of all roles\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature PermissionsEnumerable\n   */\n  async getAll() {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    const entries = Object.entries(this.roles);\n    (await Promise.all(entries.map(_ref => {\n      let [, role] = _ref;\n      return this.get(role);\n    }))).forEach((item, index) => roles[entries[index][1]] = item);\n    return roles;\n  }\n\n  /**\n   * Get all members of a specific role\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.read(\"getRoleMemberCount\", [roleHash])).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.read(\"getRoleMember\", [roleHash, i])));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n\n  /**\n   * Overwrite the list of members for specific roles\n   *\n   * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   * @twfeature Permissions\n   *\n   * */\n  setAll = /* @__PURE__ */buildTransactionFunction(async rolesWithAddresses => {\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n    const currentRoles = await this.getAll();\n    const encoded = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const [addresses, currentAddresses] = await Promise.all([Promise.all(rolesWithAddresses[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || []), Promise.all(currentRoles[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || [])]);\n      const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n      const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n      if (toAdd.length) {\n        toAdd.forEach(address => {\n          encoded.push(contractEncoder.encode(\"grantRole\", [getRoleHash(role), address]));\n        });\n      }\n      if (toRemove.length) {\n        const revokeFunctionNames = await Promise.all(toRemove.map(address => this.getRevokeRoleFunctionName(address)));\n        revokeFunctionNames.forEach((revokeFunctionName, index) => encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), toRemove[index]])));\n      }\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const [members, resolvedAddress] = await Promise.all([this.get(role), resolveAddress(address)]);\n      if (!members.map(a => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {\n        throw new MissingRoleError(resolvedAddress, role);\n      }\n    }));\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Grant a role to a specific address\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  grant = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"grantRole\",\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /**\n   * Revoke a role from a specific address\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: revokeFunctionName,\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const [resolvedAddress, signerAddress] = await Promise.all([resolveAddress(address), this.contractWrapper.getSignerAddress()]);\n    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\nexport { ContractRoles as C };\n","import { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { d6 as FEATURE_PRIMARY_SALE } from './index-827e427d.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns the wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { utils, BigNumber, constants } from 'ethers';\nimport deepEqual from 'fast-deep-equal';\nimport { aP as resolveAddress, cz as AmountSchema, B as includesErrorMessage, d7 as isNode, cu as ContractWrapper } from './index-827e427d.browser.esm.js';\nimport { v as transformResultToClaimCondition, w as legacyContractModelToAbstract, x as newContractModelToAbstract, C as ClaimEligibility, y as convertQuantityToBigNumber, f as fetchSnapshotEntryForAddress, z as prepareClaim, A as SnapshotFormatVersion, D as processClaimConditionInputs, E as abstractContractModelToLegacy, F as abstractContractModelToNew, H as updateExistingClaimConditions } from './signature-ab20f9e3.browser.esm.js';\nimport { i as isNativeToken, C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { d as detectContractFeature, h as hasFunction } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\n\n/**\n * Manages claim conditions for NFT Drop contracts\n * @public\n */\nclass DropClaimConditions {\n  constructor(contractWrapper, metadata, storage) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  async getActive(options) {\n    const [cc, metadata, tokenDecimals] = await Promise.all([this.get(), this.metadata.get(), this.getTokenDecimals()]);\n    return await transformResultToClaimCondition(cc, tokenDecimals, this.contractWrapper.getProvider(), metadata.merkle || {}, this.storage, options?.withAllowList || false);\n  }\n  async get(conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", []);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [id]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", []);\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [id]);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  async getAll(options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const [currentStartId, countBn] = await this.contractWrapper.read(\"claimCondition\", []);\n      const startId = currentStartId.toNumber();\n      const count = countBn.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(this.get(i));\n      }\n      const [metadata, decimals, ...fetchedConditions] = await Promise.all([this.metadata.get(), this.getTokenDecimals(), ...conditions]);\n      return Promise.all(fetchedConditions.map(c => transformResultToClaimCondition(c, decimals, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false)));\n    } else {\n      return [await this.getActive(options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    if (addressToCheck) {\n      addressToCheck = await resolveAddress(addressToCheck);\n    }\n    return (await this.getClaimIneligibilityReasons(quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    const [resolvedAddress, decimals] = await Promise.all([resolveAddress(addressToCheck), this.getTokenDecimals()]);\n    const quantityWithDecimals = utils.parseUnits(AmountSchema.parse(quantity), decimals);\n    try {\n      claimCondition = await this.getActive();\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      console.warn(\"failed to get active claim condition\", err);\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      const supplyWithDecimals = utils.parseUnits(claimCondition.availableSupply, decimals);\n      if (supplyWithDecimals.lt(quantityWithDecimals)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n        return reasons;\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(resolvedAddress);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(quantity, false, decimals, resolvedAddress);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [activeConditionIndex, resolvedAddress, quantity, claimVerification.proofs, claimVerification.maxClaimable]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [resolvedAddress, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            }]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.read(\"verifyClaim\", [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n            await this.contractWrapper.read(\"verifyClaim\", [activeConditionIndex, resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason : e);\n          const reason = e.reason;\n          switch (reason) {\n            case \"!Qty\":\n              reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n              break;\n            case \"!PriceOrCurrency\":\n              reasons.push(ClaimEligibility.WrongPriceOrCurrency);\n              break;\n            case \"!MaxSupply\":\n              reasons.push(ClaimEligibility.NotEnoughSupply);\n              break;\n            case \"cant claim yet\":\n              reasons.push(ClaimEligibility.ClaimPhaseNotStarted);\n              break;\n            default:\n              {\n                reasons.push(ClaimEligibility.AddressNotAllowed);\n                break;\n              }\n          }\n          return reasons;\n        }\n      }\n    }\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      let claimedSupply = BigNumber.from(0);\n      let maxClaimable = convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, decimals);\n      try {\n        claimedSupply = await this.getSupplyClaimedByWallet(resolvedAddress);\n      } catch (e) {\n        // no-op\n      }\n      if (allowListEntry) {\n        maxClaimable = convertQuantityToBigNumber(allowListEntry.maxClaimable, decimals);\n      }\n      if (maxClaimable.gt(0) && maxClaimable.lt(claimedSupply.add(quantityWithDecimals))) {\n        reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n        return reasons;\n      }\n\n      // if there is no allowlist, or if there is an allowlist and the address is not in it\n      // if maxClaimable is 0, we consider it as the address is not allowed\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (maxClaimable.lte(claimedSupply) || maxClaimable.eq(0)) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims (ONLY FOR LEGACY)\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      let [lastClaimedTimestamp, timestampForNextClaim] = [BigNumber.from(0), BigNumber.from(0)];\n      if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n        activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [activeConditionIndex, resolvedAddress]);\n      } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n        // check for claim timestamp between claims\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [resolvedAddress]);\n      }\n      const now = BigNumber.from(Date.now()).div(1000);\n      if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n        // contract will return MaxUint256 if user has already claimed and cannot claim again\n        if (timestampForNextClaim.eq(constants.MaxUint256)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        } else {\n          reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n        }\n        return reasons;\n      }\n    }\n\n    // if not within a browser context, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(BigNumber.from(quantity));\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(resolvedAddress);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, ERC20Abi, {}, this.storage);\n        const balance = await erc20.read(\"balanceOf\", [resolvedAddress]);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const [metadata, resolvedAddress] = await Promise.all([this.metadata.get(), resolveAddress(claimerAddress)]);\n      return await fetchSnapshotEntryForAddress(resolvedAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the total supply claimed by a specific wallet\n   * @param walletAddress - the wallet address to check\n   * @returns the total supply claimed\n   */\n  async getSupplyClaimedByWallet(walletAddress) {\n    const resolvedAddress = await resolveAddress(walletAddress);\n    if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [resolvedAddress]);\n    }\n    if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const activeClaimConditionId = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [activeClaimConditionId, resolvedAddress]);\n    }\n    throw new Error(\"This contract does not support the getSupplyClaimedByWallet function\");\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions\n   *\n   * @remarks Sets the public mint conditions that need to be fullfiled by users to claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * await dropContract.claimConditions.set(claimConditions);\n   * ```\n   *\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  set = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (claimConditionInputs) {\n      let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let claimConditionsProcessed = claimConditionInputs;\n      if (_this.isLegacySinglePhaseDrop(_this.contractWrapper) || _this.isNewSinglePhaseDrop(_this.contractWrapper)) {\n        resetClaimEligibilityForAll = true;\n        if (claimConditionInputs.length === 0) {\n          claimConditionsProcessed = [{\n            startTime: new Date(0),\n            currencyAddress: constants.AddressZero,\n            price: 0,\n            maxClaimableSupply: 0,\n            maxClaimablePerWallet: 0,\n            waitInSeconds: 0,\n            merkleRootHash: utils.hexZeroPad([0], 32),\n            snapshot: []\n          }];\n        } else if (claimConditionInputs.length > 1) {\n          throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n        }\n      }\n\n      // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n      if (_this.isNewSinglePhaseDrop(_this.contractWrapper) || _this.isNewMultiphaseDrop(_this.contractWrapper)) {\n        claimConditionsProcessed.forEach(cc => {\n          if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n            throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Example: Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\\n\" + \"contract.claimConditions.set([{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n          }\n          if (cc.snapshot && cc.snapshot.length > 0 && cc.maxClaimablePerWallet?.toString() === \"0\" && cc.snapshot.map(s => {\n            if (typeof s === \"string\") {\n              return 0;\n            } else {\n              return Number(s.maxClaimable?.toString() || 0);\n            }\n          }).reduce((acc, current) => {\n            return acc + current;\n          }, 0) === 0) {\n            throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n          }\n        });\n      }\n\n      // process inputs\n      const {\n        snapshotInfos,\n        sortedConditions\n      } = await processClaimConditionInputs(claimConditionsProcessed, await _this.getTokenDecimals(), _this.contractWrapper.getProvider(), _this.storage, _this.getSnapshotFormatVersion());\n      const merkleInfo = {};\n      snapshotInfos.forEach(s => {\n        merkleInfo[s.merkleRoot] = s.snapshotUri;\n      });\n      const metadata = await _this.metadata.get();\n      const encoded = [];\n\n      // upload new merkle roots to snapshot URIs if updated\n      if (!deepEqual(metadata.merkle, merkleInfo)) {\n        const mergedMetadata = await _this.metadata.parseInputMetadata({\n          ...metadata,\n          merkle: merkleInfo\n        });\n        // using internal method to just upload, avoids one contract call\n        const contractURI = await _this.metadata._parseAndUploadMetadata(mergedMetadata);\n\n        // TODO (cc) we could write the merkle tree info on the claim condition metadata instead\n        // TODO (cc) but we still need to maintain the behavior here for older contracts\n        if (hasFunction(\"setContractURI\", _this.contractWrapper)) {\n          const contractEncoder = new ContractEncoder(_this.contractWrapper);\n          encoded.push(contractEncoder.encode(\"setContractURI\", [contractURI]));\n        } else {\n          throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n        }\n      }\n      const cw = _this.contractWrapper;\n      const baseContractEncoder = new ContractEncoder(cw);\n      if (_this.isLegacySinglePhaseDrop(cw)) {\n        const contractEncoderLegacy = new ContractEncoder(cw);\n        encoded.push(contractEncoderLegacy.encode(\"setClaimConditions\", [abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n      } else if (_this.isLegacyMultiPhaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n      } else if (_this.isNewSinglePhaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n      } else if (_this.isNewMultiphaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n      } else {\n        throw new Error(\"Contract does not support claim conditions\");\n      }\n      if (hasFunction(\"multicall\", _this.contractWrapper)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this.contractWrapper,\n          method: \"multicall\",\n          args: [encoded]\n        });\n      }\n      throw new Error(\"Contract does not support multicall\");\n    };\n  })());\n\n  /**\n   * Update a single claim condition with new data.\n   *\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (index, claimConditionInput) => {\n    const existingConditions = await this.getAll();\n    const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n    return await this.set.prepare(newConditionInputs);\n  });\n\n  /** ***************************************\n   * PRIVATE FUNCTIONS\n   *****************************************/\n\n  async getTokenDecimals() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return this.contractWrapper.read(\"decimals\", []);\n    } else {\n      return Promise.resolve(0);\n    }\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   * @internal\n   */\n  async prepareClaim(quantity, checkERC20Allowance) {\n    let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let address = arguments.length > 3 ? arguments[3] : undefined;\n    const [addressToClaim, activeClaimConditions] = await Promise.all([address ? address : this.contractWrapper.getSignerAddress(), this.getActive()]);\n    return prepareClaim(addressToClaim, quantity, activeClaimConditions, async () => (await this.metadata.get()).merkle, decimals, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(destinationAddress, quantity, claimVerification) {\n    const resolvedAddress = await resolveAddress(destinationAddress);\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, utils.toUtf8Bytes(\"\")];\n    }\n    return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - The address to claim to\n   * @param quantity - The quantity to claim\n   * @param options - Options to override the claim transaction\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    // TODO: Transaction Sequence Pattern\n    if (options?.pricePerToken) {\n      throw new Error(\"Price per token is be set via claim conditions by calling `contract.erc721.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(quantity, options?.checkERC20Allowance === undefined ? true : options.checkERC20Allowance, await this.getTokenDecimals());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: await this.getClaimArguments(destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\nexport { DropClaimConditions as D };\n","import { utils, BigNumber, constants } from 'ethers';\nimport { u as uploadOrExtractURIs, g as getBaseUriFromBatch, b as uploadOrExtractURI, D as DEFAULT_QUERY_ALL_COUNT, F as FALLBACK_METADATA, f as fetchTokenMetadata } from './QueryParams-feab8e08.browser.esm.js';\nimport { cM as FEATURE_NFT_BATCH_MINTABLE, aP as resolveAddress, cN as FEATURE_NFT_CLAIM_CONDITIONS_V2, bk as CustomContractSchema, cO as FEATURE_NFT_CLAIM_CUSTOM, cP as FEATURE_NFT_LAZY_MINTABLE, cQ as FEATURE_NFT_REVEALABLE, cR as FEATURE_NFT_MINTABLE, cS as FEATURE_NFT_ENUMERABLE, cT as FEATURE_NFT_QUERYABLE, cU as FEATURE_NFT_SUPPLY, bd as AddressOrEnsSchema, cF as BasisPointsSchema, b9 as BigNumberSchema, cV as FEATURE_NFT_TIERED_DROP, cW as FEATURE_NFT_BURNABLE, cz as AmountSchema, cX as FEATURE_NFT_CLAIM_ZORA, cY as FEATURE_NFT_LOYALTY_CARD, cZ as FEATURE_NFT_UPDATABLE_METADATA, c_ as FEATURE_NFT_SHARED_METADATA, c$ as FEATURE_NFT_SIGNATURE_MINTABLE_V2, d0 as FEATURE_NFT, x as ExtensionNotImplementedError, n as NotFoundError } from './index-827e427d.browser.esm.js';\nimport { a as assertEnabled } from './assertEnabled-ea837eec.browser.esm.js';\nimport { C as ContractMetadata, d as detectContractFeature, h as hasFunction } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { D as DropClaimConditions } from './drop-claim-conditions-6a7767e6.browser.esm.js';\nimport { c as calculateClaimCost, D as DelayedReveal } from './contract-owner-1378b25d.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { isFileOrBuffer } from '@thirdweb-dev/storage';\nimport { s as setErc20Allowance, a as CommonNFTInput, B as BasicNFTInput } from './setErc20Allowance-7df9a12a.browser.esm.js';\nimport invariant from 'tiny-invariant';\nimport { n as normalizePriceValue } from './normalizePriceValue-3b8bca4f.browser.esm.js';\nimport { z } from 'zod';\nimport { B as BaseSignaturePayloadInput, q as Signature721WithQuantityInput, r as Signature721WithQuantityOutput, s as MintRequest721, u as MintRequest721withQuantity } from './signature-ab20f9e3.browser.esm.js';\n\n/**\n * Mint Many ERC721 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\n\nclass Erc721BatchMintable {\n  featureName = FEATURE_NFT_BATCH_MINTABLE.name;\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```typescript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mint.batch.to(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, metadatas) => {\n    const [uris, resolvedAddress] = await Promise.all([uploadOrExtractURIs(metadatas, this.storage), resolveAddress(to)]);\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = uris.map(uri => contractEncoder.encode(\"mintTo\", [resolvedAddress, uri]));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"TokensMinted\", receipt.logs);\n        if (events.length === 0 || events.length < metadatas.length) {\n          throw new Error(\"TokenMinted event not found, minting failed\");\n        }\n        return events.map(e => {\n          const id = e.args.tokenIdMinted;\n          return {\n            id,\n            receipt,\n            data: () => this.erc721.get(id)\n          };\n        });\n      }\n    });\n  });\n}\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(quantity);\n * await contract.erc721.claimConditions.getActive();\n * ```\n */\n\nclass Erc721ClaimableWithConditions {\n  featureName = FEATURE_NFT_CLAIM_CONDITIONS_V2.name;\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc721.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropClaimConditions(this.contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the first NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the first claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - (optional) Options to configure the claim\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    // TODO: Transaction Sequence Pattern\n    const tx = await this.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    tx.setParse(receipt => {\n      const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n      const startingIndex = event[0].args.startTokenId;\n      const endingIndex = startingIndex.add(quantity);\n      const results = [];\n      for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n        results.push({\n          id,\n          receipt,\n          data: () => this.erc721.get(id)\n        });\n      }\n      return results;\n    });\n    return tx;\n  });\n}\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(tokenId, quantity);\n * ```\n */\n\nclass Erc721Claimable {\n  featureName = FEATURE_NFT_CLAIM_CUSTOM.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    // TODO: Transaction Sequence Pattern\n    let overrides = {};\n    if (options && options.pricePerToken) {\n      overrides = await calculateClaimCost(this.contractWrapper, options.pricePerToken, quantity, options.currencyAddress, options.checkERC20Allowance);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: [destinationAddress, quantity],\n      overrides\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @returns - Receipt for the transaction\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    // TODO: Transaction Sequence Pattern\n    const tx = await this.getClaimTransaction(destinationAddress, quantity, options);\n    tx.setParse(receipt => {\n      const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n      const startingIndex = event[0].args.startTokenId;\n      const endingIndex = startingIndex.add(quantity);\n      const results = [];\n      for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n        results.push({\n          id,\n          receipt,\n          data: () => this.erc721.get(id)\n        });\n      }\n      return results;\n    });\n    return tx;\n  });\n}\n\n/**\n * Lazily mint and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.drop.claim(quantity);\n * ```\n */\n\nclass Erc721LazyMintable {\n  featureName = FEATURE_NFT_LAZY_MINTABLE.name;\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.nft.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc721.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.revealer = this.detectErc721Revealable();\n  }\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  lazyMint = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    // ensure baseUri is the same for the entire batch\n    const baseUri = getBaseUriFromBatch(batch);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"lazyMint\",\n      args: [batch.length, baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`, utils.toUtf8Bytes(\"\")],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n        const startingIndex = event[0].args.startTokenId;\n        const endingIndex = event[0].args.endTokenId;\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.getTokenMetadata(id)\n          });\n        }\n        return results;\n      }\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  detectErc721Revealable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Revealable\")) {\n      return new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    }\n    return undefined;\n  }\n}\n\n/**\n * Mint ERC721 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc721Mintable {\n  featureName = FEATURE_NFT_MINTABLE.name;\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc721BatchMintable();\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.nft.mint.to(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, metadata) => {\n    const [uri, toAddress] = await Promise.all([uploadOrExtractURI(metadata, this.storage), resolveAddress(to)]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [toAddress, uri],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"Transfer\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"TransferEvent event not found\");\n        }\n        const id = event[0].args.tokenId;\n        return {\n          id,\n          receipt,\n          data: () => this.erc721.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * @deprecated Use `contract.erc721.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, metadata) {\n    return this.to.prepare(await resolveAddress(to), metadata);\n  }\n  detectErc721BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721BatchMintable\")) {\n      return new Erc721BatchMintable(this.erc721, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\n\nclass Erc721Enumerable {\n  featureName = FEATURE_NFT_ENUMERABLE.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async all(walletAddress, queryParams) {\n    let tokenIds = await this.tokenIds(walletAddress);\n    if (queryParams) {\n      const start = queryParams?.start || 0;\n      const count = queryParams?.count || DEFAULT_QUERY_ALL_COUNT;\n      tokenIds = tokenIds.slice(start, start + count);\n    }\n    return await Promise.all(tokenIds.map(tokenId => this.erc721.get(tokenId.toString())));\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async tokenIds(walletAddress) {\n    const address = await resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress()));\n    const balance = await this.contractWrapper.read(\"balanceOf\", [address]);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    return await Promise.all(indices.map(i => this.contractWrapper.read(\"tokenOfOwnerByIndex\", [address, i])));\n  }\n}\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\n\nclass Erc721AQueryable {\n  featureName = FEATURE_NFT_QUERYABLE.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async all(walletAddress, queryParams) {\n    let tokenIds = await this.tokenIds(walletAddress);\n    if (queryParams) {\n      const start = queryParams?.start || 0;\n      const count = queryParams?.count || DEFAULT_QUERY_ALL_COUNT;\n      tokenIds = tokenIds.slice(start, start + count);\n    }\n    return await Promise.all(tokenIds.map(tokenId => this.erc721.get(tokenId.toString())));\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async tokenIds(walletAddress) {\n    const address = await resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"tokensOfOwner\", [address]);\n  }\n}\n\n/**\n * List ERC721 NFTs\n * @remarks Easily list all the NFTs in a ERC721 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.nft.query.all();\n * ```\n * @public\n */\n\nclass Erc721Supply {\n  featureName = FEATURE_NFT_SUPPLY.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.owned = this.detectErc721Owned();\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.nft.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async all(queryParams) {\n    let startTokenId = BigNumber.from(0);\n    if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n      startTokenId = await this.contractWrapper.read(\"startTokenId\", []);\n    }\n    const start = BigNumber.from(queryParams?.start || 0).add(startTokenId).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxSupply = await this.erc721.nextTokenIdToMint();\n    const maxId = Math.min(maxSupply.add(startTokenId).toNumber(), start + count);\n    return await Promise.all([...Array(maxId - start).keys()].map(i => this.erc721.get((start + i).toString())));\n  }\n\n  /**\n   * Return all the owners of each token id in this contract\n   * @returns\n   */\n  async allOwners() {\n    let totalCount;\n    let startTokenId = BigNumber.from(0);\n    if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n      startTokenId = await this.contractWrapper.read(\"startTokenId\", []);\n    }\n    try {\n      totalCount = await this.erc721.totalClaimedSupply();\n    } catch (e) {\n      totalCount = await this.totalCount();\n    }\n    totalCount = totalCount.add(startTokenId);\n\n    // TODO use multicall3 if available\n    // TODO can't call toNumber() here, this can be a very large number\n    const arr = [...new Array(totalCount.toNumber()).keys()];\n    const owners = await Promise.all(arr.map(i => this.erc721.ownerOf(i).catch(() => constants.AddressZero)));\n    return arr.map(i => ({\n      tokenId: i,\n      owner: owners[i]\n    })).filter(o => o.owner !== constants.AddressZero);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return await this.erc721.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the number of NFTs of this contract currently owned by end users\n   * @returns the total number of NFTs of this contract in circulation (minted & not burned)\n   * @public\n   */\n  async totalCirculatingSupply() {\n    return await this.contractWrapper.read(\"totalSupply\", []);\n  }\n  detectErc721Owned() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Enumerable\")) {\n      return new Erc721Enumerable(this.erc721, this.contractWrapper);\n    } else if (detectContractFeature(this.contractWrapper, \"ERC721AQueryable\")) {\n      return new Erc721AQueryable(this.erc721, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * @internal\n */\nconst TieredDropPayloadSchema = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  tierPriority: z.array(z.string()),\n  royaltyRecipient: AddressOrEnsSchema.default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0),\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\nconst GenericRequest = [{\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\n\nclass Erc721TieredDrop {\n  featureName = FEATURE_NFT_TIERED_DROP.name;\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  async getMetadataInTier(tier) {\n    const tiers = await this.contractWrapper.read(\"getMetadataForAllTiers\", []);\n    const batches = tiers.find(t => t.tier === tier);\n    if (!batches) {\n      throw new Error(\"Tier not found in contract.\");\n    }\n    const nfts = await Promise.all(batches.ranges.map((range, i) => {\n      const nftsInRange = [];\n      const baseUri = batches.baseURIs[i];\n      for (let j = range.startIdInclusive.toNumber(); j < range.endIdNonInclusive.toNumber(); j++) {\n        const uri = baseUri.endsWith(\"/\") ? `${baseUri}${j}` : `${baseUri}/${j}`;\n        const metadata = this.storage.downloadJSON(uri);\n        nftsInRange.push(metadata);\n      }\n      return nftsInRange;\n    }).flat());\n    return nfts;\n  }\n  async getTokensInTier(tier) {\n    const endIndex = await this.contractWrapper.read(\"getTokensInTierLen\", []);\n    if (endIndex.eq(0)) {\n      return [];\n    }\n    const ranges = await this.contractWrapper.read(\"getTokensInTier\", [tier, 0, endIndex]);\n    const nfts = await Promise.all(ranges.map(range => {\n      const nftsInRange = [];\n      for (let i = range.startIdInclusive.toNumber(); i < range.endIdNonInclusive.toNumber(); i++) {\n        nftsInRange.push(this.erc721.get(i));\n      }\n      return nftsInRange;\n    }).flat());\n    return nfts;\n  }\n  createBatchWithTier = /* @__PURE__ */buildTransactionFunction(async (metadatas, tier, options) => {\n    // TODO: Change this to on extension\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    const baseUri = getBaseUriFromBatch(batch);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"lazyMint\",\n      args: [batch.length, baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`, tier, utils.toUtf8Bytes(\"\")],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n        const startingIndex = event[0].args[1];\n        const endingIndex = event[0].args[2];\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.getTokenMetadata(id)\n          });\n        }\n        return results;\n      }\n    });\n  });\n  createDelayedRevealBatchWithTier = /* @__PURE__ */buildTransactionFunction(async (placeholder, metadatas, password, tier, options) => {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const placeholderUris = await this.storage.uploadBatch([CommonNFTInput.parse(placeholder)], {\n      rewriteFileNames: {\n        fileStartNumber: 0\n      }\n    });\n    const placeholderUri = getBaseUriFromBatch(placeholderUris);\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const uris = await this.storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      onProgress: options?.onProgress,\n      rewriteFileNames: {\n        fileStartNumber: startFileNumber.toNumber()\n      }\n    });\n    const baseUri = getBaseUriFromBatch(uris);\n    const baseUriId = await this.contractWrapper.read(\"getBaseURICount\", []);\n    const chainId = await this.contractWrapper.getChainID();\n    const hashedPassword = utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, baseUriId, this.contractWrapper.address]);\n    const encryptedBaseUri = await this.contractWrapper.read(\"encryptDecrypt\", [utils.toUtf8Bytes(baseUri), hashedPassword]);\n    const provenanceHash = utils.solidityKeccak256([\"bytes\", \"bytes\", \"uint256\"], [utils.toUtf8Bytes(baseUri), hashedPassword, chainId]);\n    const data = utils.defaultAbiCoder.encode([\"bytes\", \"bytes32\"], [encryptedBaseUri, provenanceHash]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"lazyMint\",\n      args: [uris.length, placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`, tier, data],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n        const startingIndex = event[0].args[1];\n        const endingIndex = event[0].args[2];\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.getTokenMetadata(id)\n          });\n        }\n        return results;\n      }\n    });\n  });\n  reveal = /* @__PURE__ */buildTransactionFunction(async (batchId, password) => {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const key = utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchId, this.contractWrapper.address]);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper.callStatic().reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"reveal\",\n      args: [batchId, key]\n    });\n  });\n  async generate(payloadToSign) {\n    const [payload] = await this.generateBatch([payloadToSign]);\n    return payload;\n  }\n  async generateBatch(payloadsToSign) {\n    const parsedPayloads = await Promise.all(payloadsToSign.map(payload => TieredDropPayloadSchema.parseAsync(payload)));\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    return await Promise.all(parsedPayloads.map(async payload => {\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name: \"SignatureAction\",\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.address\n      }, {\n        GenericRequest: GenericRequest\n      }, await this.mapPayloadToContractStruct(payload));\n      return {\n        payload,\n        signature: signature.toString()\n      };\n    }));\n  }\n  async verify(signedPayload) {\n    const message = await this.mapPayloadToContractStruct(signedPayload.payload);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signedPayload.signature]);\n    return verification[0];\n  }\n  async claimWithSignature(signedPayload) {\n    const message = await this.mapPayloadToContractStruct(signedPayload.payload);\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), signedPayload.payload.price, signedPayload.payload.currencyAddress);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, signedPayload.payload.currencyAddress, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"claimWithSignature\", [message, signedPayload.signature], overrides);\n    const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(event[0].args.quantityClaimed);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.get(id)\n      });\n    }\n    return results;\n  }\n  async mapPayloadToContractStruct(payload) {\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), payload.price, payload.currencyAddress);\n    const data = utils.defaultAbiCoder.encode([\"string[]\", \"address\", \"address\", \"uint256\", \"address\", \"uint256\", \"uint256\", \"address\"], [payload.tierPriority, payload.to, payload.royaltyRecipient, payload.royaltyBps, payload.primarySaleRecipient, payload.quantity, normalizedTotalPrice, payload.currencyAddress]);\n    return {\n      uid: payload.uid,\n      validityStartTimestamp: payload.mintStartTime,\n      validityEndTimestamp: payload.mintEndTime,\n      data\n    };\n  }\n}\n\nclass Erc721Burnable {\n  featureName = FEATURE_NFT_BURNABLE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn NFTs\n   *\n   * @remarks Burn NFTs held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   *\n   * await contract.nft.burn.token(tokenId);\n   * ```\n   */\n  token = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burn\",\n      args: [tokenId]\n    });\n  });\n}\n\nfunction toWei(amount) {\n  return utils.parseEther(AmountSchema.parse(amount));\n}\n\n/**\n * Claim ERC721 NFTs from a Zora Drop\n * @remarks Purchase NFTs on a Zora Drop\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(tokenId, quantity);\n * ```\n */\nclass Erc721ClaimableZora {\n  featureName = FEATURE_NFT_CLAIM_ZORA.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Claim NFT\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to, needs to be the connected wallet address\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Not applicable\n   *\n   * @returns - Receipt for the transaction\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    // TODO validation on destinationAddr / options\n    const signerAddress = await this.contractWrapper.getSigner()?.getAddress();\n    if (destinationAddress !== signerAddress) {\n      throw new Error(\"Zora Drop: Destination address must match connected wallet address\");\n    }\n    if (options?.pricePerToken) {\n      throw new Error(\"Zora Drop: Custom pricePerToken is not supported. Price is automatically calculated\");\n    }\n    const saleDetails = await this.getSaleDetails();\n    const price = saleDetails.publicSalePrice;\n    const zoraFee = toWei(\"0.000777\");\n    const totalPrice = BigNumber.from(price).add(zoraFee).mul(quantity);\n    const tx = Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"purchase\",\n      args: [quantity],\n      overrides: {\n        value: totalPrice\n      }\n    });\n    tx.setParse(receipt => {\n      const event = this.contractWrapper.parseLogs(\"Sale\", receipt?.logs);\n      const startingIndex = event[0].args.firstPurchasedTokenId;\n      const endingIndex = startingIndex.add(quantity);\n      const results = [];\n      for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n        results.push({\n          id,\n          receipt,\n          data: () => this.erc721.get(id)\n        });\n      }\n      return results;\n    });\n    return tx;\n  });\n  async getSaleDetails() {\n    return this.contractWrapper.read(\"saleDetails\", []);\n  }\n}\n\nclass Erc721LoyaltyCard {\n  featureName = FEATURE_NFT_LOYALTY_CARD.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Cancel loyalty card NFTs\n   *\n   * @remarks Cancel loyalty card NFTs held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the loyalty card you want to cancel\n   * const tokenId = 0;\n   *\n   * await contract.nft.loyaltyCard.cancel(tokenId);\n   * ```\n   */\n  cancel = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancel\",\n      args: [tokenId]\n    });\n  });\n\n  /**\n   * Revoke loyalty card NFTs\n   *\n   * @remarks Revoke loyalty card NFTs held by some owner.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the loyalty card you want to revoke\n   * const tokenId = 0;\n   *\n   * await contract.nft.loyaltyCard.revoke(tokenId);\n   * ```\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"revoke\",\n      args: [tokenId]\n    });\n  });\n}\n\nclass Erc721UpdatableMetadata {\n  featureName = FEATURE_NFT_UPDATABLE_METADATA.name;\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Update the metadata of an NFT\n   *\n   * @remarks Update the metadata of an NFT\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT whose metadata you want to update\n   * const tokenId = 0;\n   * // The new metadata\n   * const metadata = { name: \"My NFT\", description: \"My NFT description\" }\n   *\n   * await contract.nft.metadata.update(tokenId, metadata);\n   * ```\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (tokenId, metadata) => {\n    const uri = await uploadOrExtractURI(metadata, this.storage);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setTokenURI\",\n      args: [tokenId, uri]\n    });\n  });\n}\n\n/**\n * Set shared metadata for ERC721 NFTs (Open Edition)\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.sharedMetadata.set(metadata);\n * ```\n */\nclass Erc721SharedMetadata {\n  featureName = FEATURE_NFT_SHARED_METADATA.name;\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get Shared Metadata\n   *\n   * @remarks Get the shared metadata for the Open Edition NFTs.\n   *\n   * @example\n   * ```javascript\n   * const contract = await sdk.getContract(\"{{contract_address}}\");\n   *\n   * const tx = await contract.erc721.sharedMetadata.get();\n   * ```\n   *\n   * @returns - The shared metadata for the Open Edition NFTs.\n   */\n  async get() {\n    const metadata = await this.contractWrapper.read(\"sharedMetadata\", []);\n    if (metadata.every(value => value === \"\")) {\n      return undefined;\n    }\n    return {\n      name: metadata.name,\n      description: metadata.description,\n      image: metadata.imageURI,\n      animation_url: metadata.animationURI\n    };\n  }\n\n  /**\n   * Set Shared Metadata\n   *\n   * @remarks Set the shared metadata for the Open Edition NFTs.\n   *\n   * @example\n   * ```javascript\n   * const metadata = {\n   *  name: \"My NFT\",\n   *  description: \"This is my NFT\",\n   *  image: ...\n   *  animation_url: ...\n   * };\n   *\n   * const contract = await sdk.getContract(\"{{contract_address}}\");\n   *\n   * const tx = await contract.erc721.sharedMetadata.set(metadata);\n   * ```\n   *\n   * @param metadata - The metadata you want to set for the shared metadata.\n   *\n   * @returns - Receipt for the transaction\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const parsedMetadata = BasicNFTInput.parse(metadata);\n    // cleanup description\n    parsedMetadata.description = this.sanitizeJSONString(parsedMetadata.description);\n\n    // take the input and upload image and animation if it is not a URI already\n    const batch = [];\n    if (isFileOrBuffer(parsedMetadata.image)) {\n      batch.push(this.storage.upload(parsedMetadata.image));\n    } else if (typeof parsedMetadata.image === \"string\") {\n      batch.push(Promise.resolve(parsedMetadata.image));\n    } else {\n      batch.push(Promise.resolve(undefined));\n    }\n    if (isFileOrBuffer(parsedMetadata.animation_url)) {\n      batch.push(this.storage.upload(parsedMetadata.animation_url));\n    } else if (typeof parsedMetadata.animation_url === \"string\") {\n      batch.push(Promise.resolve(parsedMetadata.animation_url));\n    } else {\n      batch.push(Promise.resolve(undefined));\n    }\n    const [imageUri, animationUri] = await Promise.all(batch);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setSharedMetadata\",\n      args: [{\n        name: `${parsedMetadata.name || \"\"}`,\n        description: parsedMetadata.description || \"\",\n        imageURI: imageUri || \"\",\n        animationURI: animationUri || \"\"\n      }]\n    });\n  });\n  sanitizeJSONString(val) {\n    if (!val) {\n      return val;\n    }\n    const sanitized = JSON.stringify(val);\n    return sanitized.slice(1, sanitized.length - 1);\n  }\n}\n\n/**\n * Enables generating dynamic ERC721 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nclass Erc721WithQuantitySignatureMintable {\n  featureName = FEATURE_NFT_SIGNATURE_MINTABLE_V2.name;\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc721.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc721.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc721WithQuantitySignatureMintable.generate}\n   * @twfeature ERC721SignatureMint\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const overrides = await this.contractWrapper.getCallOverrides();\n    const parse = receipt => {\n      const t = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n      if (t.length === 0) {\n        throw new Error(\"No MintWithSignature event found\");\n      }\n      const id = t[0].args.tokenIdMinted;\n      return {\n        id,\n        receipt\n      };\n    };\n    if (await this.isLegacyNFTContract()) {\n      const message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      const price = message.price;\n\n      // TODO: Transaction Sequence Pattern\n      await setErc20Allowance(this.contractWrapper, price, mintRequest.currencyAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"mintWithSignature\",\n        args: [message, signature],\n        overrides,\n        parse\n      });\n    } else {\n      const message = await this.mapPayloadToContractStruct(mintRequest);\n      const price = message.pricePerToken.mul(message.quantity);\n\n      // TODO: Transaction Sequence Pattern\n      await setErc20Allowance(this.contractWrapper, price, mintRequest.currencyAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"mintWithSignature\",\n        args: [message, signature],\n        overrides,\n        parse\n      });\n    }\n  });\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC721SignatureMint\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const contractPayloads = (await Promise.all(signedPayloads.map(s => isLegacyNFTContract ? this.mapLegacyPayloadToContractStruct(s.payload) : this.mapPayloadToContractStruct(s.payload)))).map((message, index) => {\n      const s = signedPayloads[index];\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    });\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = contractPayloads.map(p => {\n      if (isLegacyNFTContract) {\n        return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n      } else {\n        return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n      }\n    });\n    if (hasFunction(\"multicall\", this.contractWrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n          if (events.length === 0) {\n            throw new Error(\"No MintWithSignature event found\");\n          }\n          return events.map(log => ({\n            id: log.args.tokenIdMinted,\n            receipt\n          }));\n        }\n      });\n    } else {\n      throw new Error(\"Multicall not available on this contract!\");\n    }\n  });\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC721SignatureMint\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   * // Now you can verify if the signed payload is valid\n   * const isValid = await contract.erc721.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    let message;\n    let verification;\n    if (isLegacyNFTContract) {\n      message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    } else {\n      message = await this.mapPayloadToContractStruct(mintRequest);\n      verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    }\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc721.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC721SignatureMint\n   */\n  async generate(mintRequest) {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721WithQuantitySignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC721SignatureMint\n   */\n  async generateBatch(payloadsToSign) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const parsedRequests = await Promise.all(payloadsToSign.map(m => Signature721WithQuantityInput.parseAsync(m)));\n    const metadatas = parsedRequests.map(r => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    return await Promise.all(parsedRequests.map(async (m, i) => {\n      const uri = uris[i];\n      const finalPayload = await Signature721WithQuantityOutput.parseAsync({\n        ...m,\n        uri\n      });\n      let signature;\n      if (isLegacyNFTContract) {\n        signature = await this.contractWrapper.signTypedData(signer, {\n          name: \"TokenERC721\",\n          version: \"1\",\n          chainId,\n          verifyingContract: this.contractWrapper.address\n        }, {\n          MintRequest: MintRequest721\n        }, await this.mapLegacyPayloadToContractStruct(finalPayload));\n      } else {\n        signature = await this.contractWrapper.signTypedData(signer, {\n          name: \"SignatureMintERC721\",\n          version: \"1\",\n          chainId,\n          verifyingContract: await this.contractWrapper.address\n        }, {\n          MintRequest: MintRequest721withQuantity\n        },\n        // TYPEHASH\n        await this.mapPayloadToContractStruct(finalPayload));\n      }\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid\n    };\n  }\n  async mapLegacyPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      price: normalizedPricePerToken,\n      uri: mintRequest.uri,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient\n    };\n  }\n  async isLegacyNFTContract() {\n    return detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV1\");\n  }\n}\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass Erc721 {\n  featureName = FEATURE_NFT.name;\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.query = this.detectErc721Enumerable();\n    this.mintable = this.detectErc721Mintable();\n    this.burnable = this.detectErc721Burnable();\n    this.lazyMintable = this.detectErc721LazyMintable();\n    this.tieredDropable = this.detectErc721TieredDrop();\n    this.signatureMintable = this.detectErc721SignatureMintable();\n    this.claimWithConditions = this.detectErc721ClaimableWithConditions();\n    this.claimCustom = this.detectErc721Claimable();\n    this.claimZora = this.detectErc721ClaimableZora();\n    this.erc721SharedMetadata = this.detectErc721SharedMetadata();\n    this.loyaltyCard = this.detectErc721LoyaltyCard();\n    this.updatableMetadata = this.detectErc721UpdatableMetadata();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC721 Extension //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc721.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   * @twfeature ERC721\n   */\n  async get(tokenId) {\n    const [owner, metadata] = await Promise.all([this.ownerOf(tokenId).catch(() => constants.AddressZero), this.getTokenMetadata(tokenId).catch(() => ({\n      id: tokenId.toString(),\n      uri: \"\",\n      ...FALLBACK_METADATA\n    }))]);\n    return {\n      owner,\n      metadata,\n      type: \"ERC721\",\n      supply: \"1\"\n    };\n  }\n\n  /**\n   * Get the current owner of an NFT\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   * @twfeature ERC721\n   */\n  async ownerOf(tokenId) {\n    return await this.contractWrapper.read(\"ownerOf\", [tokenId]);\n  }\n\n  /**\n   * Get NFT balance of a specific wallet\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.erc721.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   * @twfeature ERC721\n   */\n  async balanceOf(address) {\n    return await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address)]);\n  }\n\n  /**\n   * Get NFT balance for the currently connected wallet\n   */\n  async balance() {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    const [_address, _operator] = await Promise.all([resolveAddress(address), resolveAddress(operator)]);\n    return await this.contractWrapper.read(\"isApprovedForAll\", [_address, _operator]);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.erc721.transfer(walletAddress, tokenId);\n   * ```\n   * @twfeature ERC721\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    const [from, _to] = await Promise.all([this.contractWrapper.getSignerAddress(), resolveAddress(to)]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"transferFrom(address,address,uint256)\",\n      args: [from, _to, tokenId]\n    });\n  });\n\n  /**\n   * Transfer an NFT from a specific wallet\n   *\n   * @remarks Transfer an NFT from the given wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const fromWalletAddress = \"{{wallet_address}}\";\n   * const toWalletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.erc721.transferFrom(fromWalletAddress, toWalletAddress, tokenId);\n   * ```\n   * @twfeature ERC721\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, tokenId) => {\n    const [fromAddress, toAddress] = await Promise.all([resolveAddress(from), resolveAddress(to)]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"transferFrom(address,address,uint256)\",\n      args: [fromAddress, toAddress, tokenId]\n    });\n  });\n\n  /**\n   * Set approval for all NFTs\n   * @remarks Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @example\n   * ```javascript\n   * const operator = \"{{wallet_address}}\";\n   * await contract.erc721.setApprovalForAll(operator, true);\n   * ```\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   * @twfeature ERC721\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setApprovalForAll\",\n      args: [await resolveAddress(operator), approved]\n    });\n  });\n\n  /**\n   * Set approval for a single NFT\n   * @remarks Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @example\n   * ```javascript\n   * const operator = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.erc721.setApprovalForToken(operator, tokenId);\n   * ```\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n\n  ////// ERC721 Supply Extension //////\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.erc721.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getAll(queryParams) {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).all(queryParams);\n  }\n\n  /**\n   * Get all NFT owners\n   * @example\n   * ```javascript\n   * const owners = await contract.erc721.getAllOwners();\n   * console.log(owners);\n   * ```\n   * @returns an array of token ids and owners\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getAllOwners() {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).allOwners();\n  }\n\n  /**\n   * Get the total number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   * @example\n   * ```javascript\n   * const count = await contract.erc721.totalCount();\n   * console.log(count);\n   * ```\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return this.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the total count NFTs minted in this contract\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async totalCirculatingSupply() {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).totalCirculatingSupply();\n  }\n\n  ////// ERC721 Enumerable Extension //////\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.erc721.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    if (this.query?.owned) {\n      return this.query.owned.all(walletAddress, queryParams);\n    } else {\n      const [address, allOwners] = await Promise.all([walletAddress || this.contractWrapper.getSignerAddress(), this.getAllOwners()]);\n      let ownedTokens = (allOwners || []).filter(i => address?.toLowerCase() === i.owner?.toLowerCase());\n      if (queryParams) {\n        const start = queryParams?.start || 0;\n        const count = queryParams?.count || DEFAULT_QUERY_ALL_COUNT;\n        ownedTokens = ownedTokens.slice(start, start + count);\n      }\n      return await Promise.all(ownedTokens.map(async i => this.get(i.tokenId)));\n    }\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    if (this.query?.owned) {\n      return this.query.owned.tokenIds(walletAddress);\n    } else {\n      const [address, allOwners] = await Promise.all([walletAddress || this.contractWrapper.getSignerAddress(), this.getAllOwners()]);\n      return (allOwners || []).filter(i => address?.toLowerCase() === i.owner?.toLowerCase()).map(i => BigNumber.from(i.tokenId));\n    }\n  }\n\n  ////// ERC721 Mintable Extension //////\n\n  /**\n   * Mint an NFT\n   *\n   * @remarks Mint an NFT to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.erc721.mint(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC721Mintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), metadata);\n  });\n\n  /**\n   * Mint an NFT to a specific wallet\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.erc721.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC721Mintable\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (receiver, metadata) => {\n    return assertEnabled(this.mintable, FEATURE_NFT_MINTABLE).to.prepare(receiver, metadata);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadata - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.erc721.mint.prepare(...args)` instead\n   * @twfeature ERC721Mintable\n   */\n  async getMintTransaction(receiver, metadata) {\n    return this.mintTo.prepare(receiver, metadata);\n  }\n\n  ////// ERC721 Batch Mintable Extension //////\n\n  /**\n   * Mint many NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```typescript\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.erc721.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC721BatchMintable\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadatas => {\n    return this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(), metadatas);\n  });\n\n  /**\n   * Mint many NFTs to a specific wallet\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```typescript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.erc721.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC721BatchMintable\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (receiver, metadatas) => {\n    return assertEnabled(this.mintable?.batch, FEATURE_NFT_BATCH_MINTABLE).to.prepare(receiver, metadatas);\n  });\n\n  ////// ERC721 Burnable Extension //////\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.erc721.burn(tokenId);\n   * ```\n   * @twfeature ERC721Burnable\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return assertEnabled(this.burnable, FEATURE_NFT_BURNABLE).token.prepare(tokenId);\n  });\n\n  ////// ERC721 Loyalty Card Extension //////\n\n  /**\n   * Cancel loyalty card NFTs\n   *\n   * @remarks Cancel loyalty card NFTs held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the loyalty card you want to cancel\n   * const tokenId = 0;\n   *\n   * const result = await contract.erc721.cancel(tokenId);\n   * ```\n   * @twfeature ERC721LoyaltyCard\n   */\n  cancel = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return assertEnabled(this.loyaltyCard, FEATURE_NFT_LOYALTY_CARD).cancel.prepare(tokenId);\n  });\n\n  /**\n   * Revoke loyalty card NFTs\n   *\n   * @remarks Revoke loyalty card NFTs held by some owner.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the loyalty card you want to revoke\n   * const tokenId = 0;\n   *\n   * const result = await contract.erc721.revoke(tokenId);\n   * ```\n   * @twfeature ERC721LoyaltyCard\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return assertEnabled(this.loyaltyCard, FEATURE_NFT_LOYALTY_CARD).revoke.prepare(tokenId);\n  });\n\n  ////// ERC721 LazyMint Extension //////\n\n  /**\n   * Lazy mint NFTs\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   * @twfeature ERC721LazyMintable\n   */\n  lazyMint = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return assertEnabled(this.lazyMintable, FEATURE_NFT_LAZY_MINTABLE).lazyMint.prepare(metadatas, options);\n  });\n\n  ////// ERC721 Metadata Extension //////\n\n  /**\n   * Update the metadata of an NFT\n   *\n   * @remarks Update the metadata of an NFT\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT whose metadata you want to update\n   * const tokenId = 0;\n   * // The new metadata\n   * const metadata = { name: \"My NFT\", description: \"My NFT description\" }\n   *\n   * await contract.erc721.update(tokenId, metadata);\n   * ```\n   * @twfeature ERC721UpdatableMetadata\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (tokenId, metadata) => {\n    return assertEnabled(this.updatableMetadata, FEATURE_NFT_UPDATABLE_METADATA).update.prepare(tokenId, metadata);\n  });\n\n  ////// ERC721 Claimable Extension //////\n\n  /**\n   * Claim NFTs\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claim(quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC721ClaimZora\n   */\n  claim = /* @__PURE__ */buildTransactionFunction(async (quantity, options) => {\n    return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), quantity, options);\n  });\n\n  /**\n   * Claim NFTs to a specific wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - optional claim options\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC721ClaimZora\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    const claimZora = this.claimZora;\n    if (claimWithConditions) {\n      return claimWithConditions.to.prepare(destinationAddress, quantity, options);\n    }\n    if (claim) {\n      return claim.to.prepare(destinationAddress, quantity, options);\n    }\n    if (claimZora) {\n      return claimZora.to.prepare(destinationAddress, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_NFT_CLAIM_CUSTOM);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - optional claim options\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    if (claimWithConditions) {\n      return claimWithConditions.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    }\n    if (claim) {\n      return claim.getClaimTransaction(destinationAddress, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_NFT_CLAIM_CUSTOM);\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async totalClaimedSupply() {\n    const contract = this.contractWrapper;\n    if (hasFunction(\"totalMinted\", contract)) {\n      return this.contractWrapper.read(\"totalMinted\", []);\n    }\n    if (hasFunction(\"nextTokenIdToClaim\", contract)) {\n      return this.contractWrapper.read(\"nextTokenIdToClaim\", []);\n    }\n    throw new Error(\"No function found on contract to get total claimed supply\");\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async totalUnclaimedSupply() {\n    const [nextTokenIdToMint, totalClaimedSupply] = await Promise.all([this.nextTokenIdToMint(), this.totalClaimedSupply()]);\n    return nextTokenIdToMint.sub(totalClaimedSupply);\n  }\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc721.claimConditions.set(claimConditions);\n   * ```\n   * @twfeature ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  get claimConditions() {\n    return assertEnabled(this.claimWithConditions, FEATURE_NFT_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC721 Tiered Drop Extension //////\n\n  /**\n   * Tiered Drop\n   * @remarks Drop lazy minted NFTs using a tiered drop mechanism.\n   * @twfeature ERC721TieredDrop\n   */\n  get tieredDrop() {\n    return assertEnabled(this.tieredDropable, FEATURE_NFT_TIERED_DROP);\n  }\n\n  ////// ERC721 SignatureMint Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc721.signature.generate()` documentation\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = await contract.erc721.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @twfeature ERC721SignatureMintV1 | ERC721SignatureMintV2\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_NFT_SIGNATURE_MINTABLE_V2);\n  }\n\n  ////// ERC721 DelayedReveal Extension //////\n\n  /**\n   * Mint delayed reveal NFTs\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.erc721.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc721.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @twfeature ERC721Revealable\n   */\n  get revealer() {\n    return assertEnabled(this.lazyMintable?.revealer, FEATURE_NFT_REVEALABLE);\n  }\n\n  ////// ERC721 Shared Metadata Extension (Open Edition) //////\n\n  /**\n   * Set shared metadata for all NFTs\n   * @remarks Set shared metadata for all NFTs in the collection. (Open Edition)\n   * @example\n   * ```javascript\n   * // defiine the metadata\n   * const metadata = {\n   *  name: \"Shared Metadata\",\n   *  description: \"Every NFT in this collection will share this metadata.\"\n   * };\n   *\n   *\n   * const tx = contract.erc721.sharedMetadata.set(metadata);\n   * ```\n   * @twfeature ERC721SharedMetadata\n   */\n  get sharedMetadata() {\n    return assertEnabled(this.erc721SharedMetadata, FEATURE_NFT_SHARED_METADATA);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  async getTokenMetadata(tokenId) {\n    const tokenUri = await this.contractWrapper.read(\"tokenURI\", [tokenId]);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  async nextTokenIdToMint() {\n    if (hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      let nextTokenIdToMint = await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n      // handle open editions and contracts with startTokenId\n      if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n        nextTokenIdToMint = nextTokenIdToMint.sub(await this.contractWrapper.read(\"startTokenId\", []));\n      }\n      return nextTokenIdToMint;\n    } else if (hasFunction(\"totalSupply\", this.contractWrapper)) {\n      return await this.contractWrapper.read(\"totalSupply\", []);\n    } else {\n      throw new Error(\"Contract requires either `nextTokenIdToMint` or `totalSupply` function available to determine the next token ID to mint\");\n    }\n  }\n  detectErc721Enumerable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Supply\") || hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return new Erc721Supply(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Mintable\")) {\n      return new Erc721Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Burnable\")) {\n      return new Erc721Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721LazyMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721LazyMintable\")) {\n      return new Erc721LazyMintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721TieredDrop() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721TieredDrop\")) {\n      return new Erc721TieredDrop(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV1\") || detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV2\")) {\n      return new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721ClaimableWithConditions() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimPhasesV2\")) {\n      return new Erc721ClaimableWithConditions(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721Claimable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimCustom\")) {\n      return new Erc721Claimable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721ClaimableZora() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimZora\")) {\n      return new Erc721ClaimableZora(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721SharedMetadata() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721SharedMetadata\")) {\n      return new Erc721SharedMetadata(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721LoyaltyCard() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721LoyaltyCard\")) {\n      return new Erc721LoyaltyCard(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721UpdatableMetadata() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721UpdatableMetadata\")) {\n      return new Erc721UpdatableMetadata(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\nexport { Erc721BatchMintable as E, Erc721ClaimableWithConditions as a, Erc721Claimable as b, Erc721LazyMintable as c, Erc721Mintable as d, Erc721Supply as e, Erc721Enumerable as f, Erc721TieredDrop as g, Erc721 as h, Erc721WithQuantitySignatureMintable as i, Erc721Burnable as j, toWei as t };\n","import { aP as resolveAddress } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { h as Erc721 } from './erc-721-6f1fbec1.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n","import { cA as BigNumberTransformSchema, cB as FileOrBufferOrStringSchema, cC as HexColor, cu as ContractWrapper } from './index-827e427d.browser.esm.js';\nimport { z } from 'zod';\nimport { i as isNativeToken } from './fetchCurrencyValue-39f97190.browser.esm.js';\n\nconst PropertiesInput = /* @__PURE__ */(() => z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = /* @__PURE__ */(() => z.union([z.array(PropertiesInput), PropertiesInput]).optional().nullable())();\n\n/**\n * @internal\n */\nconst BasicNFTInput = /* @__PURE__ */(() => z.object({\n  name: z.union([z.string(), z.number()]).optional().nullable(),\n  description: z.string().nullable().optional().nullable(),\n  image: FileOrBufferOrStringSchema.nullable().optional(),\n  animation_url: FileOrBufferOrStringSchema.optional().nullable()\n}))();\n\n/**\n * @internal\n */\nconst CommonNFTInput = /* @__PURE__ */(() => BasicNFTInput.extend({\n  external_url: FileOrBufferOrStringSchema.nullable().optional(),\n  background_color: HexColor.optional().nullable(),\n  properties: OptionalPropertiesInput,\n  attributes: OptionalPropertiesInput\n}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst NFTInputOrUriSchema = /* @__PURE__ */(() => z.union([CommonNFTInput, z.string()]))();\n\n/**\n * @internal\n */\nconst CommonNFTOutput = /* @__PURE__ */(() => CommonNFTInput.extend({\n  id: z.string(),\n  uri: z.string(),\n  image: z.string().nullable().optional(),\n  external_url: z.string().nullable().optional(),\n  animation_url: z.string().nullable().optional()\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.address;\n    const allowance = await erc20.read(\"allowance\", [owner, spender]);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\nexport { BasicNFTInput as B, CommonNFTOutput as C, NFTInputOrUriSchema as N, CommonNFTInput as a, setErc20Allowance as s };\n","import { Buffer } from 'buffer';\nimport reverse from 'buffer-reverse';\nimport { asTree } from 'treeify';\n\n// ADAPTED FROM https://github.com/merkletreejs/merkletreejs\nclass Base {\n  /**\n   * print\n   * @desc Prints out a visual representation of the merkle tree.\n   * @example\n   *```js\n   *tree.print()\n   *```\n   */\n  print() {\n    Base.print(this);\n  }\n\n  /**\n   * bufferIndexOf\n   * @desc Returns the first index of which given buffer is found in array.\n   * @param {Buffer[]} haystack - Array of buffers.\n   * @param {Buffer} needle - Buffer to find.\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.bufferIndexOf(haystack, needle)\n   *```\n   */\n  bufferIndexOf(array, element) {\n    let isSorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (isSorted) {\n      return this.binarySearch(array, element, Buffer.compare);\n    }\n    const eqChecker = (buffer1, buffer2) => buffer1.equals(buffer2);\n    return this.linearSearch(array, element, eqChecker);\n  }\n\n  /**\n   * binarySearch\n   * @desc Returns the first index of which given item is found in array using binary search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} compareFunction\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = MerkleTree.binarySearch(array, element, Buffer.compare)\n   *```\n   */\n  static binarySearch(array, element, compareFunction) {\n    let start = 0;\n    let end = array.length - 1;\n\n    // Iterate while start not meets end\n    while (start <= end) {\n      // Find the mid index\n      const mid = Math.floor((start + end) / 2);\n\n      // Check if the mid value is greater than, equal to, or less than search element.\n      const ordering = compareFunction(array[mid], element);\n\n      // If element is present at mid, start iterating for searching first appearance.\n      if (ordering === 0) {\n        // Linear reverse iteration until the first matching item index is found.\n        for (let i = mid - 1; i >= 0; i--) {\n          if (compareFunction(array[i], element) === 0) {\n            continue;\n          }\n          return i + 1;\n        }\n        return 0;\n      } /* Else look in left or right half accordingly */else if (ordering < 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * binarySearch\n   * @desc Returns the first index of which given item is found in array using binary search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} compareFunction\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.binarySearch(array, element, Buffer.compare)\n   *```\n   */\n  binarySearch(array, element, compareFunction) {\n    return Base.binarySearch(array, element, compareFunction);\n  }\n\n  /**\n   * linearSearch\n   * @desc Returns the first index of which given item is found in array using linear search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} eqChecker\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = MerkleTree.linearSearch(array, element, (a, b) => a === b)\n   *```\n   */\n  static linearSearch(array, element, eqChecker) {\n    for (let i = 0; i < array.length; i++) {\n      if (eqChecker(array[i], element)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * linearSearch\n   * @desc Returns the first index of which given item is found in array using linear search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} eqChecker\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.linearSearch(array, element, (a, b) => a === b)\n   *```\n   */\n  linearSearch(array, element, eqChecker) {\n    return Base.linearSearch(array, element, eqChecker);\n  }\n\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer|ArrayBuffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = MerkleTree.bufferify('0x1234')\n   *```\n   */\n  static bufferify(value) {\n    if (!Buffer.isBuffer(value)) {\n      // crypto-js support\n      if (typeof value === \"object\" && value.words) {\n        return Buffer.from(value.toString(convertWordsToBuffer), \"hex\");\n      } else if (Base.isHexString(value)) {\n        return Buffer.from(value.replace(/^0x/, \"\"), \"hex\");\n      } else if (typeof value === \"string\") {\n        return Buffer.from(value);\n      } else if (typeof value === \"bigint\") {\n        return Buffer.from(value.toString(16), \"hex\");\n      } else if (value instanceof Uint8Array) {\n        return Buffer.from(value.buffer);\n      } else if (typeof value === \"number\") {\n        let s = value.toString();\n        if (s.length % 2) {\n          s = `0${s}`;\n        }\n        return Buffer.from(s, \"hex\");\n      } else if (ArrayBuffer.isView(value)) {\n        return Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n      }\n    }\n    return value;\n  }\n  bigNumberify(value) {\n    return Base.bigNumberify(value);\n  }\n  static bigNumberify(value) {\n    if (typeof value === \"bigint\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      if (value.startsWith(\"0x\") && Base.isHexString(value)) {\n        return BigInt(\"0x\" + value.replace(\"0x\", \"\").toString());\n      }\n      return BigInt(value);\n    }\n    if (Buffer.isBuffer(value)) {\n      return BigInt(\"0x\" + value.toString(\"hex\"));\n    }\n    if (value instanceof Uint8Array) {\n      return uint8ArrayToBigInt(value);\n    }\n    if (typeof value === \"number\") {\n      return BigInt(value);\n    }\n    throw new Error(\"cannot bigNumberify\");\n  }\n\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n  static isHexString(v) {\n    return typeof v === \"string\" && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n  }\n\n  /**\n   * print\n   * @desc Prints out a visual representation of the given merkle tree.\n   * @param {Object} tree - Merkle tree instance.\n   * @return {String}\n   * @example\n   *```js\n   *MerkleTree.print(tree)\n   *```\n   */\n  static print(tree) {\n    console.log(tree.toString());\n  }\n\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = tree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n  bufferToHex(value) {\n    let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Base.bufferToHex(value, withPrefix);\n  }\n\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n  static bufferToHex(value) {\n    let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return `${withPrefix ? \"0x\" : \"\"}${(value || Buffer.alloc(0)).toString(\"hex\")}`;\n  }\n\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = tree.bufferify('0x1234')\n   *```\n   */\n  bufferify(value) {\n    return Base.bufferify(value);\n  }\n\n  /**\n   * bufferifyFn\n   * @desc Returns a function that will bufferify the return value.\n   * @param {Function}\n   * @return {Function}\n   *\n   * @example\n   * ```js\n   *const fn = tree.bufferifyFn((value) => sha256(value))\n   *```\n   */\n  bufferifyFn(f) {\n    return value => {\n      const v = f(value);\n      if (Buffer.isBuffer(v)) {\n        return v;\n      }\n      if (this.isHexString(v)) {\n        return Buffer.from(v.replace(\"0x\", \"\"), \"hex\");\n      }\n      if (typeof v === \"string\") {\n        return Buffer.from(v);\n      }\n      if (typeof v === \"bigint\") {\n        return Buffer.from(value.toString(16), \"hex\");\n      }\n      if (ArrayBuffer.isView(v)) {\n        return Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n      }\n\n      // crypto-js support\n      const arrayBuffer = hexStringToArrayBuffer(value.toString(\"hex\"));\n      // Assuming f now works with ArrayBuffers\n      const processedBuffer = f(arrayBuffer);\n      const hexResult = arrayBufferToHexString(processedBuffer);\n      return Buffer.from(hexResult, \"hex\");\n    };\n  }\n\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n  isHexString(value) {\n    return Base.isHexString(value);\n  }\n\n  /**\n   * log2\n   * @desc Returns the log2 of number.\n   * @param {Number} value\n   * @return {Number}\n   */\n  log2(n) {\n    return n === 1 ? 0 : 1 + this.log2(n / 2 | 0);\n  }\n\n  /**\n   * zip\n   * @desc Returns true if value is a hex string.\n   * @param {String[]|Number[]|Buffer[]} a - first array\n   * @param {String[]|Number[]|Buffer[]} b -  second array\n   * @return {String[][]|Number[][]|Buffer[][]}\n   *\n   * @example\n   * ```js\n   *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n   *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n   *```\n   */\n  zip(a, b) {\n    return a.map((e, i) => [e, b[i]]);\n  }\n  static hexZeroPad(hexStr, length) {\n    return \"0x\" + hexStr.replace(\"0x\", \"\").padStart(length, \"0\");\n  }\n}\nvar Base$1 = Base;\n\n// UTILS\n\n// replaces CryptoJS.enc.Hex\nfunction convertWordsToBuffer(value) {\n  const wordArray = value.words;\n  const arrayBuffer = new ArrayBuffer(wordArray.length * 4); // 4 bytes per word\n  const uint8View = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < wordArray.length; i++) {\n    uint8View[i * 4] = wordArray[i] >> 24 & 0xff;\n    uint8View[i * 4 + 1] = wordArray[i] >> 16 & 0xff;\n    uint8View[i * 4 + 2] = wordArray[i] >> 8 & 0xff;\n    uint8View[i * 4 + 3] = wordArray[i] & 0xff;\n  }\n  return arrayBuffer;\n}\nfunction hexStringToArrayBuffer(hexString) {\n  const buffer = new Uint8Array(hexString.length / 2);\n  for (let i = 0; i < hexString.length; i += 2) {\n    buffer[i / 2] = parseInt(hexString.substring(i, i + 2), 16);\n  }\n  return buffer.buffer;\n}\nfunction arrayBufferToHexString(arrayBuffer) {\n  const uint8View = new Uint8Array(arrayBuffer);\n  return Array.from(uint8View).map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction uint8ArrayToBigInt(u8a) {\n  const hex = Array.from(u8a).map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n  return BigInt(`0x${hex}`);\n}\n\n// ADAPTED FROM https://github.com/merkletreejs/merkletreejs\n\n// TODO: Clean up and DRY up code\n// Disclaimer: The multiproof code is unaudited and may possibly contain serious issues. It's in a hacky state as is and needs to be rewritten.\n/**\n * Class reprensenting a Merkle Tree\n * @namespace MerkleTree\n */\nclass MerkleTree extends Base$1 {\n  duplicateOdd = false;\n  concatenator = Buffer.concat;\n  hashLeaves = false;\n  isBitcoinTree = false;\n  leaves = [];\n  layers = [];\n  sortLeaves = false;\n  sortPairs = false;\n  sort = false;\n  fillDefaultHash = null;\n  complete = false;\n\n  /**\n   * @desc Constructs a Merkle Tree.\n   * All nodes and leaves are stored as Buffers.\n   * Lonely leaf nodes are promoted to the next level up without being hashed again.\n   * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.\n   * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes\n   * @param {Object} options - Additional options\n   * @example\n   *```js\n   *const MerkleTree = require('merkletreejs')\n   *const crypto = require('crypto')\n   *\n   *function sha256(data) {\n   *  // returns Buffer\n   *  return crypto.createHash('sha256').update(data).digest()\n   *}\n   *\n   *const leaves = ['a', 'b', 'c'].map(value => keccak(value))\n   *\n   *const tree = new MerkleTree(leaves, sha256)\n   *```\n   */\n  constructor(leaves, hashFn) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    if (options.complete) {\n      if (options.isBitcoinTree) {\n        throw new Error('option \"complete\" is incompatible with \"isBitcoinTree\"');\n      }\n      if (options.duplicateOdd) {\n        throw new Error('option \"complete\" is incompatible with \"duplicateOdd\"');\n      }\n    }\n    this.isBitcoinTree = !!options.isBitcoinTree;\n    this.hashLeaves = !!options.hashLeaves;\n    this.sortLeaves = !!options.sortLeaves;\n    this.sortPairs = !!options.sortPairs;\n    this.complete = !!options.complete;\n    if (options.fillDefaultHash) {\n      if (typeof options.fillDefaultHash === \"function\") {\n        this.fillDefaultHash = options.fillDefaultHash;\n      } else if (Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === \"string\") {\n        this.fillDefaultHash = (idx, hashFn) => options.fillDefaultHash;\n      } else {\n        throw new Error('method \"fillDefaultHash\" must be a function, Buffer, or string');\n      }\n    }\n    this.sort = !!options.sort;\n    if (this.sort) {\n      this.sortLeaves = true;\n      this.sortPairs = true;\n    }\n    this.duplicateOdd = !!options.duplicateOdd;\n    if (options.concatenator) {\n      this.concatenator = options.concatenator;\n    }\n    this.hashFn = this.bufferifyFn(hashFn);\n    this.processLeaves(leaves);\n  }\n  getOptions() {\n    return {\n      complete: this.complete,\n      isBitcoinTree: this.isBitcoinTree,\n      hashLeaves: this.hashLeaves,\n      sortLeaves: this.sortLeaves,\n      sortPairs: this.sortPairs,\n      sort: this.sort,\n      fillDefaultHash: this.fillDefaultHash?.toString() ?? null,\n      duplicateOdd: this.duplicateOdd\n    };\n  }\n  processLeaves(leaves) {\n    if (this.hashLeaves) {\n      leaves = leaves.map(this.hashFn);\n    }\n    this.leaves = leaves.map(this.bufferify);\n    if (this.sortLeaves) {\n      this.leaves = this.leaves.sort(Buffer.compare);\n    }\n    if (this.fillDefaultHash) {\n      for (let i = this.leaves.length; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++) {\n        this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));\n      }\n    }\n    this.createHashes(this.leaves);\n  }\n  createHashes(nodes) {\n    this.layers = [nodes];\n    while (nodes.length > 1) {\n      const layerIndex = this.layers.length;\n      this.layers.push([]);\n      const layerLimit = this.complete && layerIndex === 1 && !Number.isInteger(Math.log2(nodes.length)) ? 2 * nodes.length - 2 ** Math.ceil(Math.log2(nodes.length)) : nodes.length;\n      for (let i = 0; i < nodes.length; i += 2) {\n        if (i >= layerLimit) {\n          this.layers[layerIndex].push(...nodes.slice(layerLimit));\n          break;\n        } else if (i + 1 === nodes.length) {\n          if (nodes.length % 2 === 1) {\n            const data = nodes[nodes.length - 1];\n            let hash = data;\n\n            // is bitcoin tree\n            if (this.isBitcoinTree) {\n              // Bitcoin method of duplicating the odd ending nodes\n              hash = this.hashFn(this.concatenator([reverse(data), reverse(data)]));\n              hash = reverse(this.hashFn(hash));\n              this.layers[layerIndex].push(hash);\n              continue;\n            } else {\n              if (this.duplicateOdd) ; else {\n                // push copy of hash and continue iteration\n                this.layers[layerIndex].push(nodes[i]);\n                continue;\n              }\n            }\n          }\n        }\n        const left = nodes[i];\n        const right = i + 1 === nodes.length ? left : nodes[i + 1];\n        let combined = null;\n        if (this.isBitcoinTree) {\n          combined = [reverse(left), reverse(right)];\n        } else {\n          combined = [left, right];\n        }\n        if (this.sortPairs) {\n          combined.sort(Buffer.compare);\n        }\n        let hash = this.hashFn(this.concatenator(combined));\n\n        // double hash if bitcoin tree\n        if (this.isBitcoinTree) {\n          hash = reverse(this.hashFn(hash));\n        }\n        this.layers[layerIndex].push(hash);\n      }\n      nodes = this.layers[layerIndex];\n    }\n  }\n\n  /**\n   * addLeaf\n   * @desc Adds a leaf to the tree and re-calculates layers.\n   * @param {String|Buffer} - Leaf\n   * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.\n   * @example\n   *```js\n   *tree.addLeaf(newLeaf)\n   *```\n   */\n  addLeaf(leaf) {\n    let shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (shouldHash) {\n      leaf = this.hashFn(leaf);\n    }\n    this.processLeaves(this.leaves.concat(leaf));\n  }\n\n  /**\n   * addLeaves\n   * @desc Adds multiple leaves to the tree and re-calculates layers.\n   * @param {String[]|Buffer[]} - Array of leaves\n   * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.\n   * @example\n   *```js\n   *tree.addLeaves(newLeaves)\n   *```\n   */\n  addLeaves(leaves) {\n    let shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (shouldHash) {\n      leaves = leaves.map(this.hashFn);\n    }\n    this.processLeaves(this.leaves.concat(leaves));\n  }\n\n  /**\n   * getLeaves\n   * @desc Returns array of leaves of Merkle Tree.\n   * @return {Buffer[]}\n   * @example\n   *```js\n   *const leaves = tree.getLeaves()\n   *```\n   */\n  getLeaves(values) {\n    if (Array.isArray(values)) {\n      if (this.hashLeaves) {\n        values = values.map(this.hashFn);\n        if (this.sortLeaves) {\n          values = values.sort(Buffer.compare);\n        }\n      }\n      return this.leaves.filter(\n      // @ts-expect-error - issue from original code\n      leaf => this.bufferIndexOf(values, leaf, this.sortLeaves) !== -1);\n    }\n    return this.leaves;\n  }\n\n  /**\n   * getLeaf\n   * @desc Returns the leaf at the given index.\n   * @param {Number} - Index number\n   * @return {Buffer}\n   * @example\n   *```js\n   *const leaf = tree.getLeaf(1)\n   *```\n   */\n  getLeaf(index) {\n    if (index < 0 || index > this.leaves.length - 1) {\n      return Buffer.from([]);\n    }\n    return this.leaves[index];\n  }\n\n  /**\n   * getLeafIndex\n   * @desc Returns the index of the given leaf, or -1 if the leaf is not found.\n   * @param {String|Buffer} - Target leaf\n   * @return {number}\n   * @example\n   *```js\n   *const leaf = Buffer.from('abc')\n   *const index = tree.getLeafIndex(leaf)\n   *```\n   */\n  getLeafIndex(target) {\n    target = this.bufferify(target);\n    const leaves = this.getLeaves();\n    for (let i = 0; i < leaves.length; i++) {\n      const leaf = leaves[i];\n      if (leaf.equals(target)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * getLeafCount\n   * @desc Returns the total number of leaves.\n   * @return {number}\n   * @example\n   *```js\n   *const count = tree.getLeafCount()\n   *```\n   */\n  getLeafCount() {\n    return this.leaves.length;\n  }\n\n  /**\n   * getHexLeaves\n   * @desc Returns array of leaves of Merkle Tree as hex strings.\n   * @return {String[]}\n   * @example\n   *```js\n   *const leaves = tree.getHexLeaves()\n   *```\n   */\n  getHexLeaves() {\n    return this.leaves.map(leaf => this.bufferToHex(leaf));\n  }\n\n  /**\n   * marshalLeaves\n   * @desc Returns array of leaves of Merkle Tree as a JSON string.\n   * @param {String[]|Buffer[]} - Merkle tree leaves\n   * @return {String} - List of leaves as JSON string\n   * @example\n   *```js\n   *const jsonStr = MerkleTree.marshalLeaves(leaves)\n   *```\n   */\n  static marshalLeaves(leaves) {\n    return JSON.stringify(leaves.map(leaf => MerkleTree.bufferToHex(leaf)), null, 2);\n  }\n\n  /**\n   * unmarshalLeaves\n   * @desc Returns array of leaves of Merkle Tree as a Buffers.\n   * @param {String|Object} - JSON stringified leaves\n   * @return {Buffer[]} - Unmarshalled list of leaves\n   * @example\n   *```js\n   *const leaves = MerkleTree.unmarshalLeaves(jsonStr)\n   *```\n   */\n  static unmarshalLeaves(jsonStr) {\n    let parsed = null;\n    if (typeof jsonStr === \"string\") {\n      parsed = JSON.parse(jsonStr);\n    } else if (jsonStr instanceof Object) {\n      parsed = jsonStr;\n    } else {\n      throw new Error(\"Expected type of string or object\");\n    }\n    if (!parsed) {\n      return [];\n    }\n    if (!Array.isArray(parsed)) {\n      throw new Error(\"Expected JSON string to be array\");\n    }\n    return parsed.map(MerkleTree.bufferify);\n  }\n\n  /**\n   * getLayers\n   * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.\n   * @return {Buffer[][]}\n   * @example\n   *```js\n   *const layers = tree.getLayers()\n   *```\n   */\n  getLayers() {\n    return this.layers;\n  }\n\n  /**\n   * getHexLayers\n   * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.\n   * @return {String[][]}\n   * @example\n   *```js\n   *const layers = tree.getHexLayers()\n   *```\n   */\n  getHexLayers() {\n    return this.layers.reduce((acc, item) => {\n      if (Array.isArray(item)) {\n        acc.push(item.map(layer => this.bufferToHex(layer)));\n      } else {\n        acc.push(item);\n      }\n      return acc;\n    }, []);\n  }\n\n  /**\n   * getLayersFlat\n   * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.\n   * @return {Buffer[]}\n   * @example\n   *```js\n   *const layers = tree.getLayersFlat()\n   *```\n   */\n  getLayersFlat() {\n    const layers = this.layers.reduce((acc, item) => {\n      if (Array.isArray(item)) {\n        acc.unshift(...item);\n      } else {\n        acc.unshift(item);\n      }\n      return acc;\n    }, []);\n    layers.unshift(Buffer.from([0]));\n    return layers;\n  }\n\n  /**\n   * getHexLayersFlat\n   * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.\n   * @return {String[]}\n   * @example\n   *```js\n   *const layers = tree.getHexLayersFlat()\n   *```\n   */\n  getHexLayersFlat() {\n    return this.getLayersFlat().map(layer => this.bufferToHex(layer));\n  }\n\n  /**\n   * getLayerCount\n   * @desc Returns the total number of layers.\n   * @return {number}\n   * @example\n   *```js\n   *const count = tree.getLayerCount()\n   *```\n   */\n  getLayerCount() {\n    return this.getLayers().length;\n  }\n\n  /**\n   * getRoot\n   * @desc Returns the Merkle root hash as a Buffer.\n   * @return {Buffer}\n   * @example\n   *```js\n   *const root = tree.getRoot()\n   *```\n   */\n  getRoot() {\n    if (this.layers.length === 0) {\n      return Buffer.from([]);\n    }\n    return this.layers[this.layers.length - 1][0] || Buffer.from([]);\n  }\n\n  /**\n   * getHexRoot\n   * @desc Returns the Merkle root hash as a hex string.\n   * @return {String}\n   * @example\n   *```js\n   *const root = tree.getHexRoot()\n   *```\n   */\n  getHexRoot() {\n    return this.bufferToHex(this.getRoot());\n  }\n\n  /**\n   * getProof\n   * @desc Returns the proof for a target leaf.\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {Object[]} - Array of objects containing a position property of type string\n   * with values of 'left' or 'right' and a data property of type Buffer.\n   * @example\n   * ```js\n   *const proof = tree.getProof(leaves[2])\n   *```\n   *\n   * @example\n   *```js\n   *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n   *const tree = new MerkleTree(leaves, keccak)\n   *const proof = tree.getProof(leaves[2], 2)\n   *```\n   */\n  getProof(leaf, index) {\n    if (typeof leaf === \"undefined\") {\n      throw new Error(\"leaf is required\");\n    }\n    leaf = this.bufferify(leaf);\n    const proof = [];\n    if (!Number.isInteger(index)) {\n      index = -1;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (Buffer.compare(leaf, this.leaves[i]) === 0) {\n          index = i;\n        }\n      }\n    }\n\n    // @ts-expect-error - issue from original code\n    if (index <= -1) {\n      return [];\n    }\n    for (let i = 0; i < this.layers.length; i++) {\n      const layer = this.layers[i];\n      // @ts-expect-error - issue from original code\n      const isRightNode = index % 2;\n      const pairIndex = isRightNode ?\n      // @ts-expect-error - issue from original code\n      index - 1 : this.isBitcoinTree && index === layer.length - 1 && i < this.layers.length - 1 ?\n      // Proof Generation for Bitcoin Trees\n      index :\n      // Proof Generation for Non-Bitcoin Trees\n      // @ts-expect-error - issue from original code\n      index + 1;\n      if (pairIndex < layer.length) {\n        proof.push({\n          position: isRightNode ? \"left\" : \"right\",\n          data: layer[pairIndex]\n        });\n      }\n\n      // set index to parent index\n      // @ts-expect-error - issue from original code\n      index = index / 2 | 0;\n    }\n\n    // @ts-expect-error - issue from original code\n    return proof;\n  }\n\n  /**\n   * getHexProof\n   * @desc Returns the proof for a target leaf as hex strings.\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {String[]} - Proof array as hex strings.\n   * @example\n   * ```js\n   *const proof = tree.getHexProof(leaves[2])\n   *```\n   */\n  getHexProof(leaf, index) {\n    return this.getProof(leaf, index).map(item => this.bufferToHex(item.data));\n  }\n\n  /**\n   * getProofs\n   * @desc Returns the proofs for all leaves.\n   * @return {Object[]} - Array of objects containing a position property of type string\n   * with values of 'left' or 'right' and a data property of type Buffer for all leaves.\n   * @example\n   * ```js\n   *const proofs = tree.getProofs()\n   *```\n   *\n   * @example\n   *```js\n   *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n   *const tree = new MerkleTree(leaves, keccak)\n   *const proofs = tree.getProofs()\n   *```\n   */\n  getProofs() {\n    // @ts-expect-error - issue from original code\n    const proof = [];\n    // @ts-expect-error - issue from original code\n    const proofs = [];\n\n    // @ts-expect-error - issue from original code\n    this.getProofsDFS(this.layers.length - 1, 0, proof, proofs);\n\n    // @ts-expect-error - issue from original code\n    return proofs;\n  }\n\n  /**\n   * getProofsDFS\n   * @desc Get all proofs through single traverse\n   * @param {Number} currentLayer - Current layer index in traverse.\n   * @param {Number} index - Current tarvese node index in traverse.\n   * @param {Object[]} proof - Proof chain for single leaf.\n   * @param {Object[]} proofs - Proofs for all leaves\n   * @example\n   * ```js\n   *const layers = tree.getLayers()\n   *const index = 0;\n   *let proof = [];\n   *let proofs = [];\n   *const proof = tree.getProofsDFS(layers, index, proof, proofs)\n   *```\n   */\n  // @ts-expect-error - issue from original code\n  getProofsDFS(currentLayer, index, proof, proofs) {\n    const isRightNode = index % 2;\n    if (currentLayer === -1) {\n      if (!isRightNode) {\n        proofs.push([...proof].reverse());\n      }\n      // @ts-expect-error - issue from original code\n      return;\n    }\n    if (index >= this.layers[currentLayer].length) {\n      // @ts-expect-error - issue from original code\n      return;\n    }\n    const layer = this.layers[currentLayer];\n    const pairIndex = isRightNode ? index - 1 : index + 1;\n    let pushed = false;\n    if (pairIndex < layer.length) {\n      pushed = true;\n      proof.push({\n        position: isRightNode ? \"left\" : \"right\",\n        data: layer[pairIndex]\n      });\n    }\n    const leftchildIndex = index * 2;\n    const rightchildIndex = index * 2 + 1;\n    this.getProofsDFS(currentLayer - 1, leftchildIndex, proof, proofs);\n    this.getProofsDFS(currentLayer - 1, rightchildIndex, proof, proofs);\n    if (pushed) {\n      proof.splice(proof.length - 1, 1);\n    }\n  }\n\n  /**\n   * getHexProofs\n   * @desc Returns the proofs for all leaves as hex strings.\n   * @return {String[]} - Proofs array as hex strings.\n   * @example\n   * ```js\n   *const proofs = tree.getHexProofs()\n   *```\n   */\n  getHexProofs() {\n    return this.getProofs().map(item => this.bufferToHex(item.data));\n  }\n\n  /**\n   * getPositionalHexProof\n   * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {(string | number)[][]} - Proof array as hex strings. position at index 0\n   * @example\n   * ```js\n   *const proof = tree.getPositionalHexProof(leaves[2])\n   *```\n   */\n  getPositionalHexProof(leaf, index) {\n    return this.getProof(leaf, index).map(item => {\n      return [item.position === \"left\" ? 0 : 1, this.bufferToHex(item.data)];\n    });\n  }\n\n  /**\n   * getProofIndices\n   * @desc Returns the proof indices for given tree indices.\n   * @param {Number[]} treeIndices - Tree indices\n   * @param {Number} depth - Tree depth; number of layers.\n   * @return {Number[]} - Proof indices\n   * @example\n   * ```js\n   *const proofIndices = tree.getProofIndices([2,5,6], 4)\n   *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]\n   *```\n   */\n  getProofIndices(treeIndices, depth) {\n    const leafCount = 2 ** depth;\n    let maximalIndices = new Set();\n    for (const index of treeIndices) {\n      let x = leafCount + index;\n      while (x > 1) {\n        maximalIndices.add(x ^ 1);\n        x = x / 2 | 0;\n      }\n    }\n    const a = treeIndices.map(index => leafCount + index);\n    const b = Array.from(maximalIndices).sort((x, y) => x - y).reverse();\n    maximalIndices = a.concat(b);\n    const redundantIndices = new Set();\n    const proof = [];\n    for (let index of maximalIndices) {\n      if (!redundantIndices.has(index)) {\n        proof.push(index);\n        while (index > 1) {\n          redundantIndices.add(index);\n          if (!redundantIndices.has(index ^ 1)) {\n            break;\n          }\n          index = index / 2 | 0;\n        }\n      }\n    }\n    return proof.filter(index => {\n      return !treeIndices.includes(index - leafCount);\n    });\n  }\n  getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {\n    const depth = Math.ceil(Math.log2(leavesCount));\n    const unevenLayers = [];\n    for (let index = 0; index < depth; index++) {\n      const unevenLayer = leavesCount % 2 !== 0;\n      if (unevenLayer) {\n        unevenLayers.push({\n          index,\n          leavesCount\n        });\n      }\n      leavesCount = Math.ceil(leavesCount / 2);\n    }\n    const proofIndices = [];\n    let layerNodes = sortedLeafIndices;\n    for (let layerIndex = 0; layerIndex < depth; layerIndex++) {\n      const siblingIndices = layerNodes.map(index => {\n        if (index % 2 === 0) {\n          return index + 1;\n        }\n        return index - 1;\n      });\n      let proofNodeIndices = siblingIndices.filter(index => !layerNodes.includes(index));\n      const unevenLayer = unevenLayers.find(_ref => {\n        let {\n          index\n        } = _ref;\n        return index === layerIndex;\n      });\n      if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {\n        proofNodeIndices = proofNodeIndices.slice(0, -1);\n      }\n      proofIndices.push(proofNodeIndices);\n      layerNodes = [...new Set(layerNodes.map(index => {\n        if (index % 2 === 0) {\n          return index / 2;\n        }\n        if (index % 2 === 0) {\n          return (index + 1) / 2;\n        }\n        return (index - 1) / 2;\n      }))];\n    }\n    return proofIndices;\n  }\n\n  /**\n   * getMultiProof\n   * @desc Returns the multiproof for given tree indices.\n   * @param {Number[]} indices - Tree indices.\n   * @return {Buffer[]} - Multiproofs\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getMultiProof(indices)\n   *```\n   */\n  getMultiProof(tree, indices) {\n    if (!this.complete) {\n      console.warn(\"Warning: For correct multiProofs it's strongly recommended to set complete: true\");\n    }\n    if (!indices) {\n      indices = tree;\n      tree = this.getLayersFlat();\n    }\n    const isUneven = this.isUnevenTree();\n    if (isUneven) {\n      // @ts-expect-error - issue from original code\n      if (indices.every(Number.isInteger)) {\n        return this.getMultiProofForUnevenTree(indices);\n      }\n    }\n    // @ts-expect-error - issue from original code\n    if (!indices.every(Number.isInteger)) {\n      let els = indices;\n      if (this.sortPairs) {\n        // @ts-expect-error - issue from original code\n        els = els.sort(Buffer.compare);\n      }\n\n      // @ts-expect-error - issue from original code\n      let ids = els.map(el => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n      if (!ids.every(idx => idx !== -1)) {\n        throw new Error(\"Element does not exist in Merkle tree\");\n      }\n\n      // @ts-expect-error - issue from original code\n      const hashes = [];\n      const proof = [];\n      let nextIds = [];\n      for (let i = 0; i < this.layers.length; i++) {\n        const layer = this.layers[i];\n        for (let j = 0; j < ids.length; j++) {\n          const idx = ids[j];\n          const pairElement = this.getPairNode(layer, idx);\n          hashes.push(layer[idx]);\n          if (pairElement) {\n            proof.push(pairElement);\n          }\n          nextIds.push(idx / 2 | 0);\n        }\n        ids = nextIds.filter((value, j, self) => self.indexOf(value) === j);\n        nextIds = [];\n      }\n\n      // @ts-expect-error - issue from original code\n      return proof.filter(value => !hashes.includes(value));\n    }\n\n    // @ts-expect-error - issue from original code\n    return this.getProofIndices(indices, Math.log2(tree.length / 2 | 0)).map(\n    // @ts-expect-error - issue from original code\n    index => tree[index]);\n  }\n  getMultiProofForUnevenTree(tree, indices) {\n    if (!indices) {\n      indices = tree;\n      tree = this.getLayers();\n    }\n    let proofHashes = [];\n    // @ts-expect-error - issue from original code\n    let currentLayerIndices = indices;\n    // @ts-expect-error - issue from original code\n    for (const treeLayer of tree) {\n      const siblings = [];\n      for (const index of currentLayerIndices) {\n        if (index % 2 === 0) {\n          const idx = index + 1;\n          if (!currentLayerIndices.includes(idx)) {\n            if (treeLayer[idx]) {\n              siblings.push(treeLayer[idx]);\n              continue;\n            }\n          }\n        }\n        const idx = index - 1;\n        if (!currentLayerIndices.includes(idx)) {\n          if (treeLayer[idx]) {\n            siblings.push(treeLayer[idx]);\n            continue;\n          }\n        }\n      }\n      proofHashes = proofHashes.concat(siblings);\n      const uniqueIndices = new Set();\n      for (const index of currentLayerIndices) {\n        if (index % 2 === 0) {\n          uniqueIndices.add(index / 2);\n          continue;\n        }\n        if (index % 2 === 0) {\n          uniqueIndices.add((index + 1) / 2);\n          continue;\n        }\n        uniqueIndices.add((index - 1) / 2);\n      }\n      currentLayerIndices = Array.from(uniqueIndices);\n    }\n    return proofHashes;\n  }\n\n  /**\n   * getHexMultiProof\n   * @desc Returns the multiproof for given tree indices as hex strings.\n   * @param {Number[]} indices - Tree indices.\n   * @return {String[]} - Multiproofs as hex strings.\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getHexMultiProof(indices)\n   *```\n   */\n  getHexMultiProof(tree, indices) {\n    return this.getMultiProof(tree, indices).map(x => this.bufferToHex(x));\n  }\n\n  /**\n   * getProofFlags\n   * @desc Returns list of booleans where proofs should be used instead of hashing.\n   * Proof flags are used in the Solidity multiproof verifiers.\n   * @param {Number[]|Buffer[]} leaves\n   * @param {Buffer[]} proofs\n   * @return {Boolean[]} - Boolean flags\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getMultiProof(indices)\n   *const proofFlags = tree.getProofFlags(leaves, proof)\n   *```\n   */\n  getProofFlags(leaves, proofs) {\n    if (!Array.isArray(leaves) || leaves.length <= 0) {\n      throw new Error(\"Invalid Inputs!\");\n    }\n    let ids;\n    if (leaves.every(Number.isInteger)) {\n      ids = [...leaves].sort((a, b) => a === b ? 0 : a > b ? 1 : -1); // Indices where passed\n    } else {\n      ids = leaves.map(el => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n    }\n    if (!ids.every(idx => idx !== -1)) {\n      throw new Error(\"Element does not exist in Merkle tree\");\n    }\n    const _proofs = proofs.map(item => this.bufferify(item));\n\n    // @ts-expect-error - issue from original code\n    const tested = [];\n    // @ts-expect-error - issue from original code\n    const flags = [];\n    for (let index = 0; index < this.layers.length; index++) {\n      const layer = this.layers[index];\n      ids = ids.reduce((ids_, idx) => {\n        // @ts-expect-error - issue from original code\n        const skipped = tested.includes(layer[idx]);\n        if (!skipped) {\n          const pairElement = this.getPairNode(layer, idx);\n          const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);\n          // eslint-disable-next-line no-unused-expressions\n          pairElement && flags.push(!proofUsed);\n          tested.push(layer[idx]);\n          tested.push(pairElement);\n        }\n        // @ts-expect-error - issue from original code\n        ids_.push(idx / 2 | 0);\n        return ids_;\n      }, []);\n    }\n\n    // @ts-expect-error - issue from original code\n    return flags;\n  }\n\n  /**\n   * verify\n   * @desc Returns true if the proof path (array of hashes) can connect the target node\n   * to the Merkle root.\n   * @param {Object[]} proof - Array of proof objects that should connect\n   * target node to Merkle root.\n   * @param {Buffer} targetNode - Target node Buffer\n   * @param {Buffer} root - Merkle root Buffer\n   * @return {Boolean}\n   * @example\n   *```js\n   *const root = tree.getRoot()\n   *const proof = tree.getProof(leaves[2])\n   *const verified = tree.verify(proof, leaves[2], root)\n   *```\n   */\n  verify(proof, targetNode, root) {\n    let hash = this.bufferify(targetNode);\n    root = this.bufferify(root);\n    if (!Array.isArray(proof) || !targetNode || !root) {\n      return false;\n    }\n    for (let i = 0; i < proof.length; i++) {\n      const node = proof[i];\n      let data = null;\n      let isLeftNode = null;\n\n      // case for when proof is hex values only\n      if (typeof node === \"string\") {\n        data = this.bufferify(node);\n        isLeftNode = true;\n      } else if (Array.isArray(node)) {\n        isLeftNode = node[0] === 0;\n        data = this.bufferify(node[1]);\n      } else if (Buffer.isBuffer(node)) {\n        data = node;\n        isLeftNode = true;\n      } else if (node instanceof Object) {\n        data = this.bufferify(node.data);\n        isLeftNode = node.position === \"left\";\n      } else {\n        throw new Error(\"Expected node to be of type string or object\");\n      }\n      const buffers = [];\n      if (this.isBitcoinTree) {\n        buffers.push(reverse(hash));\n        buffers[isLeftNode ? \"unshift\" : \"push\"](reverse(data));\n        hash = this.hashFn(this.concatenator(buffers));\n        hash = reverse(this.hashFn(hash));\n      } else {\n        if (this.sortPairs) {\n          if (Buffer.compare(hash, data) === -1) {\n            buffers.push(hash, data);\n            hash = this.hashFn(this.concatenator(buffers));\n          } else {\n            buffers.push(data, hash);\n            hash = this.hashFn(this.concatenator(buffers));\n          }\n        } else {\n          buffers.push(hash);\n          buffers[isLeftNode ? \"unshift\" : \"push\"](data);\n          hash = this.hashFn(this.concatenator(buffers));\n        }\n      }\n    }\n    return Buffer.compare(hash, root) === 0;\n  }\n\n  /**\n   * verifyMultiProof\n   * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.\n   * @param {Buffer} root - Merkle tree root\n   * @param {Number[]} proofIndices - Leave indices for proof\n   * @param {Buffer[]} proofLeaves - Leaf values at indices for proof\n   * @param {Number} leavesCount - Count of original leaves\n   * @param {Buffer[]} proof - Multiproofs given indices\n   * @return {Boolean}\n   * @example\n   *```js\n   *const leaves = tree.getLeaves()\n   *const root = tree.getRoot()\n   *const treeFlat = tree.getLayersFlat()\n   *const leavesCount = leaves.length\n   *const proofIndices = [2, 5, 6]\n   *const proofLeaves = proofIndices.map(i => leaves[i])\n   *const proof = tree.getMultiProof(treeFlat, indices)\n   *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)\n   *```\n   */\n  verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {\n    const isUneven = this.isUnevenTree();\n    if (isUneven) {\n      // TODO: combine these functions and simplify\n      return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);\n    }\n    const depth = Math.ceil(Math.log2(leavesCount));\n    root = this.bufferify(root);\n    proofLeaves = proofLeaves.map(leaf => this.bufferify(leaf));\n    proof = proof.map(leaf => this.bufferify(leaf));\n    const tree = {};\n    for (const [index, leaf] of this.zip(proofIndices, proofLeaves)) {\n      // @ts-expect-error - issue from original code\n      tree[2 ** depth + index] = leaf;\n    }\n    for (const [index, proofitem] of this.zip(this.getProofIndices(proofIndices, depth), proof)) {\n      // @ts-expect-error - issue from original code\n      tree[index] = proofitem;\n    }\n    let indexqueue = Object.keys(tree).map(value => Number(value)).sort((a, b) => a - b);\n    indexqueue = indexqueue.slice(0, indexqueue.length - 1);\n    let i = 0;\n    while (i < indexqueue.length) {\n      const index = indexqueue[i];\n      if (index >= 2 && {}.hasOwnProperty.call(tree, index ^ 1)) {\n        // @ts-expect-error - issue from original code\n        let pair = [tree[index - index % 2], tree[index - index % 2 + 1]];\n        if (this.sortPairs) {\n          pair = pair.sort(Buffer.compare);\n        }\n        const hash = pair[1] ? this.hashFn(this.concatenator(pair)) : pair[0];\n        // @ts-expect-error - issue from original code\n        tree[index / 2 | 0] = hash;\n        indexqueue.push(index / 2 | 0);\n      }\n      i += 1;\n    }\n    return !proofIndices.length ||\n    // @ts-expect-error - issue from original code\n    {}.hasOwnProperty.call(tree, 1) && tree[1].equals(root);\n  }\n  verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {\n    root = this.bufferify(root);\n    leaves = leaves.map(this.bufferify);\n    proofs = proofs.map(this.bufferify);\n    const leavesLen = leaves.length;\n    const totalHashes = proofFlag.length;\n    const hashes = [];\n    let leafPos = 0;\n    let hashPos = 0;\n    let proofPos = 0;\n    for (let i = 0; i < totalHashes; i++) {\n      const bufA = proofFlag[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proofs[proofPos++];\n      const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n      const buffers = [bufA, bufB].sort(Buffer.compare);\n      hashes[i] = this.hashFn(this.concatenator(buffers));\n    }\n    return Buffer.compare(hashes[totalHashes - 1], root) === 0;\n  }\n  verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {\n    root = this.bufferify(root);\n    leaves = leaves.map(leaf => this.bufferify(leaf));\n    proof = proof.map(leaf => this.bufferify(leaf));\n    const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);\n    return root.equals(computedRoot);\n  }\n\n  /**\n   * getDepth\n   * @desc Returns the tree depth (number of layers)\n   * @return {Number}\n   * @example\n   *```js\n   *const depth = tree.getDepth()\n   *```\n   */\n  getDepth() {\n    return this.getLayers().length - 1;\n  }\n\n  /**\n   * getLayersAsObject\n   * @desc Returns the layers as nested objects instead of an array.\n   * @example\n   *```js\n   *const layersObj = tree.getLayersAsObject()\n   *```\n   */\n  getLayersAsObject() {\n    const layers = this.getLayers().map(layer => layer.map(value => this.bufferToHex(value, false)));\n    const objs = [];\n    for (let i = 0; i < layers.length; i++) {\n      const arr = [];\n      for (let j = 0; j < layers[i].length; j++) {\n        const obj = {\n          [layers[i][j]]: null\n        };\n        if (objs.length) {\n          // @ts-expect-error - issue from original code\n          obj[layers[i][j]] = {};\n          const a = objs.shift();\n          // @ts-expect-error - issue from original code\n          const akey = Object.keys(a)[0];\n          // @ts-expect-error - issue from original code\n          obj[layers[i][j]][akey] = a[akey];\n          if (objs.length) {\n            const b = objs.shift();\n            // @ts-expect-error - issue from original code\n            const bkey = Object.keys(b)[0];\n            // @ts-expect-error - issue from original code\n            obj[layers[i][j]][bkey] = b[bkey];\n          }\n        }\n        arr.push(obj);\n      }\n      objs.push(...arr);\n    }\n    return objs[0];\n  }\n\n  /**\n   * resetTree\n   * @desc Resets the tree by clearing the leaves and layers.\n   * @example\n   *```js\n   *tree.resetTree()\n   *```\n   */\n  resetTree() {\n    this.leaves = [];\n    this.layers = [];\n  }\n\n  /**\n   * getPairNode\n   * @desc Returns the node at the index for given layer.\n   * @param {Buffer[]} layer - Tree layer\n   * @param {Number} index - Index at layer.\n   * @return {Buffer} - Node\n   *\n   *@example\n   * ```js\n   *const node = tree.getPairNode(layer, index)\n   *```\n   */\n  getPairNode(layer, idx) {\n    const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n    if (pairIdx < layer.length) {\n      return layer[pairIdx];\n    } else {\n      // @ts-expect-error - issue from original code\n      return null;\n    }\n  }\n\n  /**\n   * toTreeString\n   * @desc Returns a visual representation of the merkle tree as a string.\n   * @return {String}\n   * @example\n   *```js\n   *console.log(tree.toTreeString())\n   *```\n   */\n  toTreeString() {\n    const obj = this.getLayersAsObject();\n    return asTree(obj, true, false);\n  }\n\n  /**\n   * toString\n   * @desc Returns a visual representation of the merkle tree as a string.\n   * @example\n   *```js\n   *console.log(tree.toString())\n   *```\n   */\n  toString() {\n    return this.toTreeString();\n  }\n  isUnevenTree(treeLayers) {\n    const depth = treeLayers?.length || this.getDepth();\n    return !this.isPowOf2(depth);\n  }\n  isPowOf2(v) {\n    return v && !(v & v - 1);\n  }\n  calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {\n    const leafTuples = this.zip(leafIndices, leafHashes).sort((_ref2, _ref3) => {\n      let [indexA] = _ref2;\n      let [indexB] = _ref3;\n      return indexA - indexB;\n    });\n    const leafTupleIndices = leafTuples.map(_ref4 => {\n      let [index] = _ref4;\n      return index;\n    });\n    const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);\n    let nextSliceStart = 0;\n    const proofTuplesByLayers = [];\n    for (let i = 0; i < proofIndices.length; i++) {\n      const indices = proofIndices[i];\n      const sliceStart = nextSliceStart;\n      nextSliceStart += indices.length;\n      proofTuplesByLayers[i] = this.zip(indices, proofHashes.slice(sliceStart, nextSliceStart));\n    }\n    const tree = [leafTuples];\n    for (let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {\n      const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex])\n      // @ts-expect-error - issue from original code\n      .sort((_ref5, _ref6) => {\n        let [indexA] = _ref5;\n        let [indexB] = _ref6;\n        return indexA - indexB;\n      })\n      // @ts-expect-error - issue from original code\n      .map(_ref7 => {\n        let [, hash] = _ref7;\n        return hash;\n      });\n      const s = tree[layerIndex].map(_ref8 => {\n        let [layerIndex_] = _ref8;\n        return layerIndex_;\n      });\n      const parentIndices = [...new Set(s.map(index => {\n        if (index % 2 === 0) {\n          return index / 2;\n        }\n        if (index % 2 === 0) {\n          return (index + 1) / 2;\n        }\n        return (index - 1) / 2;\n      }))];\n      const parentLayer = [];\n      for (let i = 0; i < parentIndices.length; i++) {\n        const parentNodeTreeIndex = parentIndices[i];\n        const bufA = currentLayer[i * 2];\n        const bufB = currentLayer[i * 2 + 1];\n        const hash = bufB ? this.hashFn(this.concatenator([bufA, bufB])) : bufA;\n        parentLayer.push([parentNodeTreeIndex, hash]);\n      }\n      tree.push(parentLayer);\n    }\n    return tree[tree.length - 1][0][1];\n  }\n}\n\nexport { MerkleTree };\n","import { constants, utils, BigNumber } from 'ethers';\nimport { bO as SnapshotInputSchema, bP as SnapshotEntryWithProofSchema, bQ as SnapshotSchema, cu as ContractWrapper, b9 as BigNumberSchema, aZ as NATIVE_TOKEN_ADDRESS, cz as AmountSchema, cD as QuantitySchema, ba as BigNumberishSchema, cE as BytesLikeSchema, s as DuplicateLeafsError, bd as AddressOrEnsSchema, bc as AddressSchema, cF as BasisPointsSchema } from './index-827e427d.browser.esm.js';\nimport { f as fetchCurrencyMetadata, i as isNativeToken, a as fetchCurrencyValue } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-3b8bca4f.browser.esm.js';\nimport { MerkleTree } from '@thirdweb-dev/merkletree';\nimport { S as StartDateSchema, E as EndDateSchema } from './assertEnabled-ea837eec.browser.esm.js';\nimport { z } from 'zod';\nimport { N as NFTInputOrUriSchema } from './setErc20Allowance-7df9a12a.browser.esm.js';\nimport { v4 } from 'uuid';\n\nfunction abstractContractModelToLegacy(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerTransaction: model.maxClaimablePerWallet,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims || 0\n  };\n}\n\nfunction abstractContractModelToNew(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerWallet: model.maxClaimablePerWallet,\n    metadata: model.metadata || \"\"\n  };\n}\n\n/**\n * @internal\n * @param quantity - The quantity to convert\n * @param tokenDecimals - The token decimals to use\n */\nfunction convertQuantityToBigNumber(quantity, tokenDecimals) {\n  if (quantity === \"unlimited\") {\n    return constants.MaxUint256;\n  } else {\n    return utils.parseUnits(quantity, tokenDecimals);\n  }\n}\n\nasync function parseSnapshotInputs(inputs) {\n  const chunkSize = 25000;\n  const chunks = Array.from({\n    length: Math.ceil(inputs.length / chunkSize)\n  }, (_, i) => inputs.slice(i * chunkSize, i * chunkSize + chunkSize));\n  const results = [];\n  const parsedChunks = await Promise.all(chunks.map(chunk => SnapshotInputSchema.parseAsync(chunk)));\n  for (const chunk of parsedChunks) {\n    results.push(...chunk);\n  }\n  return results;\n}\n\n// shard using the first 2 hex character of the address\n// this splits the merkle tree into 256 shards\n// shard files will be 00.json, 01.json, 02.json, ..., ff.json\nconst SHARD_NYBBLES = 2;\nlet SnapshotFormatVersion = /*#__PURE__*/function (SnapshotFormatVersion) {\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V1\"] = 1] = \"V1\";\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V2\"] = 2] = \"V2\";\n  return SnapshotFormatVersion;\n}({}); // address, maxClaimable, price, currencyAddress\nclass ShardedMerkleTree {\n  constructor(storage, baseUri, originalEntriesUri, shardNybbles, tokenDecimals) {\n    this.storage = storage;\n    this.shardNybbles = shardNybbles;\n    this.baseUri = baseUri;\n    this.originalEntriesUri = originalEntriesUri;\n    this.tokenDecimals = tokenDecimals;\n    this.shards = {};\n    this.trees = {};\n  }\n  static async fromUri(uri, storage) {\n    try {\n      const shardedMerkleTreeInfo = await storage.downloadJSON(uri);\n      if (shardedMerkleTreeInfo.isShardedMerkleTree) {\n        return ShardedMerkleTree.fromShardedMerkleTreeInfo(shardedMerkleTreeInfo, storage);\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n  static async fromShardedMerkleTreeInfo(info, storage) {\n    return new ShardedMerkleTree(storage, info.baseUri, info.originalEntriesUri, info.shardNybbles, info.tokenDecimals);\n  }\n  static hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion) {\n    switch (snapshotFormatVersion) {\n      case SnapshotFormatVersion.V1:\n        return utils.solidityKeccak256([\"address\", \"uint256\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals)]);\n      case SnapshotFormatVersion.V2:\n        return utils.solidityKeccak256([\"address\", \"uint256\", \"uint256\", \"address\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals), convertQuantityToBigNumber(entry.price || \"unlimited\", currencyDecimals), entry.currencyAddress || constants.AddressZero]);\n    }\n  }\n  static async fetchAndCacheDecimals(cache, provider, currencyAddress) {\n    if (!currencyAddress) {\n      return 18;\n    }\n    // cache decimals for each currency to avoid refetching for every address\n    let currencyDecimals = cache[currencyAddress];\n    if (currencyDecimals === undefined) {\n      const currencyMetadata = await fetchCurrencyMetadata(provider, currencyAddress);\n      currencyDecimals = currencyMetadata.decimals;\n      cache[currencyAddress] = currencyDecimals;\n    }\n    return currencyDecimals;\n  }\n  static async buildAndUpload(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n    let shardNybbles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : SHARD_NYBBLES;\n    const inputs = await parseSnapshotInputs(snapshotInput);\n\n    // TODO Could also derive shardNybbles from input size\n    const shards = {};\n    for (const snapshotEntry of inputs) {\n      const shard = snapshotEntry.address.slice(2, 2 + shardNybbles).toLowerCase();\n      if (shards[shard] === undefined) {\n        shards[shard] = [];\n      }\n      shards[shard].push(snapshotEntry);\n    }\n    const currencyDecimalMap = {};\n    // create shard => subtree root map\n    const subTrees = await Promise.all(Object.entries(shards).map(async _ref => {\n      let [shard, entries] = _ref;\n      return [shard, new MerkleTree(await Promise.all(entries.map(async entry => {\n        // cache decimals for each currency to avoid refetching for every address\n        const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n        return ShardedMerkleTree.hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion);\n      })), utils.keccak256, {\n        sort: true\n      }).getHexRoot()];\n    }));\n    const roots = Object.fromEntries(subTrees);\n    // create master tree from shard => subtree root map\n    const tree = new MerkleTree(Object.values(roots), utils.keccak256, {\n      sort: true\n    });\n    const shardsToUpload = [];\n    for (const [shardId, entries] of Object.entries(shards)) {\n      const data = {\n        proofs: tree.getProof(roots[shardId]).map(value => \"0x\" + value.data.toString(\"hex\")),\n        entries\n      };\n      shardsToUpload.push({\n        data: JSON.stringify(data),\n        name: `${shardId}.json`\n      });\n    }\n    const uris = await storage.uploadBatch(shardsToUpload);\n    const baseUri = uris[0].slice(0, uris[0].lastIndexOf(\"/\"));\n    const originalEntriesUri = await storage.upload(inputs);\n    const shardedMerkleInfo = {\n      merkleRoot: tree.getHexRoot(),\n      baseUri,\n      originalEntriesUri,\n      shardNybbles,\n      tokenDecimals,\n      isShardedMerkleTree: true\n    };\n    const masterUri = await storage.upload(shardedMerkleInfo);\n    return {\n      shardedMerkleInfo,\n      uri: masterUri\n    };\n  }\n  async getProof(address, provider, snapshotFormatVersion) {\n    const shardId = address.slice(2, 2 + this.shardNybbles).toLowerCase();\n    let shard = this.shards[shardId];\n    const currencyDecimalMap = {};\n    if (shard === undefined) {\n      try {\n        const uri = this.baseUri.endsWith(\"/\") ? this.baseUri : `${this.baseUri}/`;\n        shard = this.shards[shardId] = await this.storage.downloadJSON(`${uri}${shardId}.json`);\n        const hashedEntries = await Promise.all(shard.entries.map(async entry => {\n          // cache decimals for each currency to avoid refetching for every address\n          const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n          return ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n        }));\n        this.trees[shardId] = new MerkleTree(hashedEntries, utils.keccak256, {\n          sort: true\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n    const entry = shard.entries.find(i => i.address.toLowerCase() === address.toLowerCase());\n    if (!entry) {\n      return null;\n    }\n    const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n    const leaf = ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n    const proof = this.trees[shardId].getProof(leaf).map(i => \"0x\" + i.data.toString(\"hex\"));\n    return SnapshotEntryWithProofSchema.parseAsync({\n      ...entry,\n      proof: proof.concat(shard.proofs)\n    });\n  }\n  async getAllEntries() {\n    try {\n      return await this.storage.downloadJSON(this.originalEntriesUri);\n    } catch (e) {\n      console.warn(\"Could not fetch original snapshot entries\", e);\n      return [];\n    }\n  }\n}\n\nasync function fetchSnapshotEntryForAddress(address, merkleRoot, merkleMetadata, provider, storage, snapshotFormatVersion) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const merkleTree = await ShardedMerkleTree.fromShardedMerkleTreeInfo(raw, storage);\n      return await merkleTree.getProof(address, provider, snapshotFormatVersion);\n    }\n    // legacy non-sharded, just fetch it all and filter out\n    const snapshotData = await SnapshotSchema.parseAsync(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      return snapshotData.claims.find(c => c.address.toLowerCase() === address.toLowerCase()) || null;\n    }\n  }\n  return null;\n}\n\nfunction legacyContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims\n  };\n}\n\nfunction newContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerWallet,\n    waitTimeInSecondsBetweenClaims: 0,\n    metadata: model.metadata\n  };\n}\n\nasync function approveErc20Allowance(contractToApprove, currencyAddress, price, quantity, tokenDecimals) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n  const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  const totalPrice = BigNumber.from(price).mul(BigNumber.from(quantity)).div(utils.parseUnits(\"1\", tokenDecimals));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [spender, allowance.add(totalPrice)]);\n  }\n}\n\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns - `overrides` and `proofs` as an object.\n */\nasync function prepareClaim(addressToClaim, quantity, activeClaimCondition, merkleMetadataFetcher, tokenDecimals, contractWrapper, storage, checkERC20Allowance, snapshotFormatVersion) {\n  let maxClaimable = convertQuantityToBigNumber(activeClaimCondition.maxClaimablePerWallet, tokenDecimals);\n  let proofs = [utils.hexZeroPad([0], 32)];\n  let priceInProof = activeClaimCondition.price; // the price to send to the contract in claim proofs\n  let currencyAddressInProof = activeClaimCondition.currencyAddress;\n  try {\n    if (!activeClaimCondition.merkleRootHash.toString().startsWith(constants.AddressZero)) {\n      const snapshotEntry = await fetchSnapshotEntryForAddress(addressToClaim, activeClaimCondition.merkleRootHash.toString(), await merkleMetadataFetcher(), contractWrapper.getProvider(), storage, snapshotFormatVersion);\n      if (snapshotEntry) {\n        proofs = snapshotEntry.proof;\n        // override only if not default values (unlimited for quantity, zero addr for currency)\n        maxClaimable = snapshotEntry.maxClaimable === \"unlimited\" ? constants.MaxUint256 : utils.parseUnits(snapshotEntry.maxClaimable, tokenDecimals);\n        priceInProof = snapshotEntry.price === undefined || snapshotEntry.price === \"unlimited\" ? constants.MaxUint256 : await normalizePriceValue(contractWrapper.getProvider(), snapshotEntry.price, snapshotEntry.currencyAddress || constants.AddressZero);\n        currencyAddressInProof = snapshotEntry.currencyAddress || constants.AddressZero;\n      } else {\n        // if no snapshot entry, and it's a v1 format (exclusive allowlist) then address can't claim\n        if (snapshotFormatVersion === SnapshotFormatVersion.V1) {\n          throw new Error(\"No claim found for this address\");\n        }\n        // but if its snapshot v2 (override list behavior) then address can still claim with default settings\n      }\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if (e?.message === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\"failed to check claim condition merkle root hash, continuing anyways\", e);\n  }\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  // the actual price to check allowance against\n  // if proof price is unlimited, then we use the price from the claim condition\n  // this mimics the contract behavior\n  const pricePerToken = priceInProof.toString() !== constants.MaxUint256.toString() ? priceInProof : activeClaimCondition.price;\n  // same for currency address\n  const currencyAddress = currencyAddressInProof !== constants.AddressZero ? currencyAddressInProof : activeClaimCondition.currencyAddress;\n  if (pricePerToken.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = BigNumber.from(pricePerToken).mul(quantity).div(utils.parseUnits(\"1\", tokenDecimals));\n    } else if (checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currencyAddress, pricePerToken, quantity, tokenDecimals);\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxClaimable,\n    price: pricePerToken,\n    currencyAddress: currencyAddress,\n    priceInProof,\n    currencyAddressInProof\n  };\n}\n\n/**\n * @internal\n */\nconst CurrencySchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  symbol: z.string(),\n  decimals: z.number()\n}))();\n\n/**\n * @internal\n */\nconst CurrencyValueSchema = /* @__PURE__ */(() => CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: z.string()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionMetadataSchema = /* @__PURE__ */(() => z.object({\n  name: z.string().optional()\n}).catchall(z.unknown()))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputSchema = /* @__PURE__ */(() => z.object({\n  startTime: StartDateSchema,\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: AmountSchema.default(0),\n  maxClaimableSupply: QuantitySchema,\n  maxClaimablePerWallet: QuantitySchema,\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: BytesLikeSchema.default(utils.hexZeroPad([0], 32)),\n  snapshot: z.optional(SnapshotInputSchema).nullable(),\n  metadata: ClaimConditionMetadataSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputArray = /* @__PURE__ */(() => z.array(ClaimConditionInputSchema))();\n\n/**\n * @internal\n */\nconst PartialClaimConditionInputSchema = /* @__PURE__ */(() => ClaimConditionInputSchema.partial())();\n\n/**\n * @internal\n */\nconst ClaimConditionOutputSchema = /* @__PURE__ */(() => ClaimConditionInputSchema.extend({\n  availableSupply: QuantitySchema,\n  currentMintSupply: QuantitySchema,\n  currencyMetadata: CurrencyValueSchema.default({\n    value: BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\"\n  }),\n  price: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform(n => new Date(n.toNumber() * 1000)),\n  snapshot: SnapshotInputSchema.optional().nullable()\n}))();\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param tokenDecimals - the token decimals\n * @param provider - the provider to use\n * @param storage - the storage to upload to\n * @param snapshotFormatVersion - the snapshot format version\n * @returns the generated snapshot and URI\n * @internal\n */\nasync function createSnapshot(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const input = await parseSnapshotInputs(snapshotInput);\n  const addresses = input.map(i => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n  const tree = await ShardedMerkleTree.buildAndUpload(input, tokenDecimals, provider, storage, snapshotFormatVersion);\n  return {\n    merkleRoot: tree.shardedMerkleInfo.merkleRoot,\n    snapshotUri: tree.uri\n  };\n}\n\nfunction compare(a, b) {\n  const left = BigNumber.from(a);\n  const right = BigNumber.from(b);\n  if (left.eq(right)) {\n    return 0;\n  } else if (left.gt(right)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * @internal\n * Decorates claim conditions with merkle roots from snapshots if present\n * @param claimConditionInputs - The claim conditions to process\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @param snapshotFormatVersion - The snapshot format version to use\n */\nasync function processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const snapshotInfos = [];\n  const inputsWithSnapshots = await Promise.all(claimConditionInputs.map(async conditionInput => {\n    // check snapshots and upload if provided\n    if (conditionInput.snapshot && conditionInput.snapshot.length > 0) {\n      const snapshotInfo = await createSnapshot(conditionInput.snapshot, tokenDecimals, provider, storage, snapshotFormatVersion);\n      snapshotInfos.push(snapshotInfo);\n      conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n    } else {\n      // if no snapshot is passed or empty, reset the merkle root\n      conditionInput.merkleRootHash = utils.hexZeroPad([0], 32);\n    }\n    // fill condition with defaults values if not provided\n    return conditionInput;\n  }));\n  return {\n    inputsWithSnapshots,\n    snapshotInfos\n  };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c - The condition input\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @internal\n */\nasync function convertToContractModel(c, tokenDecimals, provider, storage) {\n  const currency = c.currencyAddress === constants.AddressZero ? NATIVE_TOKEN_ADDRESS : c.currencyAddress;\n  const maxClaimableSupply = convertQuantityToBigNumber(c.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertQuantityToBigNumber(c.maxClaimablePerWallet, tokenDecimals);\n  let metadataOrUri;\n  if (c.metadata) {\n    if (typeof c.metadata === \"string\") {\n      metadataOrUri = c.metadata;\n    } else {\n      metadataOrUri = await storage.upload(c.metadata);\n    }\n  }\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply,\n    supplyClaimed: 0,\n    maxClaimablePerWallet,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash.toString(),\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds || 0,\n    metadata: metadataOrUri\n  };\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs - The claim conditions to process\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @param snapshotFormatVersion - The snapshot format version to use\n * @internal\n */\nasync function processClaimConditionInputs(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const {\n    inputsWithSnapshots,\n    snapshotInfos\n  } = await processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion);\n  const parsedInputs = await ClaimConditionInputArray.parseAsync(inputsWithSnapshots);\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions = (await Promise.all(parsedInputs.map(c => convertToContractModel(c, tokenDecimals, provider, storage)))).sort((a, b) => {\n    return compare(a.startTimestamp, b.startTimestamp);\n  });\n  return {\n    snapshotInfos,\n    sortedConditions\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot - The merkle root to fetch the snapshot for\n * @param merkleMetadata - The merkle metadata to use\n * @param storage - The storage to use\n */\nasync function fetchSnapshot(merkleRoot, merkleMetadata, storage) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const smt = await ShardedMerkleTree.fromUri(snapshotUri, storage);\n      return smt?.getAllEntries() || null;\n    } else {\n      const snapshotData = await SnapshotSchema.parseAsync(raw);\n      if (merkleRoot === snapshotData.merkleRoot) {\n        return snapshotData.claims.map(claim => ({\n          address: claim.address,\n          maxClaimable: claim.maxClaimable,\n          price: claim.price,\n          currencyAddress: claim.currencyAddress\n        }));\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * @internal\n * @param bn - The big number to convert\n * @param tokenDecimals - The token decimals to use\n */\nfunction convertToReadableQuantity(bn, tokenDecimals) {\n  if (bn.toString() === constants.MaxUint256.toString()) {\n    return \"unlimited\";\n  } else {\n    return utils.formatUnits(bn, tokenDecimals);\n  }\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm - The contract model to transform\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param merkleMetadata - The merkle metadata to use\n * @param storage - The storage to use\n * @param shouldDownloadSnapshot - Whether to download the snapshot\n * @internal\n */\nasync function transformResultToClaimCondition(pm, tokenDecimals, provider, merkleMetadata, storage, shouldDownloadSnapshot) {\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const maxClaimableSupply = convertToReadableQuantity(pm.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertToReadableQuantity(pm.maxClaimablePerWallet, tokenDecimals);\n  const availableSupply = convertToReadableQuantity(BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed), tokenDecimals);\n  const currentMintSupply = convertToReadableQuantity(pm.supplyClaimed, tokenDecimals);\n  let resolvedMetadata;\n  if (pm.metadata) {\n    resolvedMetadata = await storage.downloadJSON(pm.metadata);\n  }\n  return ClaimConditionOutputSchema.parseAsync({\n    startTime: pm.startTimestamp,\n    maxClaimableSupply,\n    maxClaimablePerWallet,\n    currentMintSupply,\n    availableSupply,\n    waitInSeconds: pm.waitTimeInSecondsBetweenClaims?.toString(),\n    price: BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: shouldDownloadSnapshot ? await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage) : undefined,\n    metadata: resolvedMetadata\n  });\n}\n\n/**\n * @internal\n * @param index - The index of the condition to update\n * @param claimConditionInput - The input claim condition to update\n * @param existingConditions - The existing claim conditions\n */\nasync function updateExistingClaimConditions(index, claimConditionInput, existingConditions) {\n  if (index >= existingConditions.length) {\n    throw Error(`Index out of bounds - got index: ${index} with ${existingConditions.length} conditions`);\n  }\n  // merge input with existing claim condition\n  const priceDecimals = existingConditions[index].currencyMetadata.decimals;\n  const priceInWei = existingConditions[index].price;\n  const priceInTokens = utils.formatUnits(priceInWei, priceDecimals);\n\n  // merge existing (output format) with incoming (input format)\n  const newConditionParsed = await ClaimConditionInputSchema.parseAsync({\n    ...existingConditions[index],\n    price: priceInTokens,\n    ...claimConditionInput\n  });\n\n  // convert to output claim condition\n  const mergedConditionOutput = await ClaimConditionOutputSchema.parseAsync({\n    ...newConditionParsed,\n    price: priceInWei\n  });\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    const formattedPrice = utils.formatUnits(newConditionAtIndex.price, priceDecimals);\n    return {\n      ...newConditionAtIndex,\n      price: formattedPrice // manually transform back to input price type\n    };\n  });\n}\n\nlet ClaimEligibility = /*#__PURE__*/function (ClaimEligibility) {\n  ClaimEligibility[\"NotEnoughSupply\"] = \"There is not enough supply to claim.\";\n  ClaimEligibility[\"AddressNotAllowed\"] = \"This address is not on the allowlist.\";\n  ClaimEligibility[\"WaitBeforeNextClaimTransaction\"] = \"Not enough time since last claim transaction. Please wait.\";\n  ClaimEligibility[\"ClaimPhaseNotStarted\"] = \"Claim phase has not started yet.\";\n  ClaimEligibility[\"AlreadyClaimed\"] = \"You have already claimed the token.\";\n  ClaimEligibility[\"WrongPriceOrCurrency\"] = \"Incorrect price or currency.\";\n  ClaimEligibility[\"OverMaxClaimablePerWallet\"] = \"Cannot claim more than maximum allowed quantity.\";\n  ClaimEligibility[\"NotEnoughTokens\"] = \"There are not enough tokens in the wallet to pay for the claim.\";\n  ClaimEligibility[\"NoActiveClaimPhase\"] = \"There is no active claim phase at the moment. Please check back in later.\";\n  ClaimEligibility[\"NoClaimConditionSet\"] = \"There is no claim condition set.\";\n  ClaimEligibility[\"NoWallet\"] = \"No wallet connected.\";\n  ClaimEligibility[\"Unknown\"] = \"No claim conditions found.\";\n  return ClaimEligibility;\n}({});\n\nfunction resolveOrGenerateId(requestUId) {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    v4({}, buffer);\n    return utils.hexlify(utils.toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return utils.hexlify(requestUId);\n  }\n}\n\n/**\n * @internal\n */\nconst BaseSignaturePayloadInput = /* @__PURE__ */(() => z.object({\n  to: AddressOrEnsSchema.refine(address => address.toLowerCase() !== constants.AddressZero, {\n    message: \"Cannot create payload to mint to zero address\"\n  }),\n  price: AmountSchema.default(0),\n  currencyAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: z.string().optional().transform(arg => resolveOrGenerateId(arg)),\n  primarySaleRecipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst Signature20PayloadInput = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  quantity: AmountSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature20PayloadOutput = /* @__PURE__ */(() => Signature20PayloadInput.extend({\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature721PayloadInput = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  metadata: NFTInputOrUriSchema,\n  royaltyRecipient: z.string().default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0)\n}))();\n\n/**\n * @internal\n */\nconst Signature721PayloadOutput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  uri: z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInputWithTokenId = /* @__PURE__ */(() => Signature1155PayloadInput.extend({\n  tokenId: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadOutput = /* @__PURE__ */(() => Signature721PayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature721WithQuantityInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @internal\n */\nconst Signature721WithQuantityOutput = /* @__PURE__ */(() => Signature721PayloadOutput.extend({\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nconst MintRequest20 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest1155 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"tokenId\",\n  type: \"uint256\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721withQuantity = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst GenericRequest = [{\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\n\nexport { SnapshotFormatVersion as A, BaseSignaturePayloadInput as B, ClaimEligibility as C, processClaimConditionInputs as D, abstractContractModelToLegacy as E, abstractContractModelToNew as F, GenericRequest as G, updateExistingClaimConditions as H, resolveOrGenerateId as I, MintRequest20 as M, PartialClaimConditionInputSchema as P, Signature20PayloadInput as S, approveErc20Allowance as a, createSnapshot as b, convertToReadableQuantity as c, ClaimConditionMetadataSchema as d, ClaimConditionInputSchema as e, fetchSnapshotEntryForAddress as f, ClaimConditionInputArray as g, ClaimConditionOutputSchema as h, CurrencySchema as i, CurrencyValueSchema as j, Signature20PayloadOutput as k, Signature721PayloadInput as l, Signature721PayloadOutput as m, Signature1155PayloadInput as n, Signature1155PayloadInputWithTokenId as o, Signature1155PayloadOutput as p, Signature721WithQuantityInput as q, Signature721WithQuantityOutput as r, MintRequest721 as s, MintRequest1155 as t, MintRequest721withQuantity as u, transformResultToClaimCondition as v, legacyContractModelToAbstract as w, newContractModelToAbstract as x, convertQuantityToBigNumber as y, prepareClaim as z };\n","import { BigNumber, constants } from 'ethers';\nimport { D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-feab8e08.browser.esm.js';\nimport { dz as NFT_BASE_CONTRACT_ROLES, cu as ContractWrapper, bn as AbiSchema, bV as DropErc721ContractSchema, cQ as FEATURE_NFT_REVEALABLE, H as getRoleHash } from './index-827e427d.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-ec5ea12e.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-4e9cb063.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-39f97190.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-6f8989ff.browser.esm.js';\nimport { C as ContractRoyalty, D as DelayedReveal, a as ContractOwner } from './contract-owner-1378b25d.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-dba35fa6.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-94655dc4.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-51f40eba.browser.esm.js';\nimport { D as DropClaimConditions } from './drop-claim-conditions-6a7767e6.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-d20eb498.browser.esm.js';\nimport { i as Erc721WithQuantitySignatureMintable } from './erc-721-6f1fbec1.browser.esm.js';\nimport { a as PaperCheckout } from './thirdweb-checkout-9c1024c5.browser.esm.js';\nimport './setErc20Allowance-7df9a12a.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './signature-ab20f9e3.browser.esm.js';\nimport './normalizePriceValue-3b8bca4f.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-ea837eec.browser.esm.js';\nimport 'uuid';\nimport 'fast-deep-equal';\n\n/**\n * Setup a collection of NFTs where when it comes to minting, you can authorize\n * some external party to mint tokens on your contract, and specify what exactly\n * will be minted by that external party..\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"signature-drop\");\n * ```\n *\n * @public\n */\nclass SignatureDrop extends StandardErc721 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const claimCondition = {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   * };\n   * await contract.claimConditions.set([claimCondition]);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, SignatureDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const [claimed, unclaimed] = await Promise.all([this.totalClaimedSupply(), this.totalUnclaimedSupply()]);\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.read(\"nextTokenIdToMint\", [])).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the claimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return this.erc721.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    return this.erc721.claimTo.prepare(destinationAddress, quantity, options);\n  });\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claim = /* @__PURE__ */buildTransactionFunction(async (quantity, options) => {\n    return this.erc721.claim.prepare(quantity, options);\n  });\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { SignatureDrop };\n","import { aW as ChainId } from './index-827e427d.browser.esm.js';\nimport invariant from 'tiny-invariant';\n\nconst PAPER_API_BASE = `https://paper.xyz/api`;\nconst PAPER_API_VERSION = `2022-08-12`;\n\n/**\n * @internal\n */\nconst PAPER_API_URL = `${PAPER_API_BASE}/${PAPER_API_VERSION}/platform/thirdweb`;\nconst PAPER_CHAIN_ID_MAP = {\n  [ChainId.Mainnet]: \"Ethereum\",\n  [ChainId.Goerli]: \"Goerli\",\n  [ChainId.Polygon]: \"Polygon\",\n  [ChainId.Mumbai]: \"Mumbai\",\n  [ChainId.Avalanche]: \"Avalanche\"\n};\n\n/**\n * @internal\n */\nfunction parseChainIdToPaperChain(chainId) {\n  invariant(chainId in PAPER_CHAIN_ID_MAP, `chainId not supported by paper: ${chainId}`);\n  return PAPER_CHAIN_ID_MAP[chainId];\n}\n/**\n *\n * @param contractAddress - the contract address\n * @param chainId - the chain id\n * @internal\n * @returns the paper xyz contract id\n * @throws if the contract is not registered on paper xyz\n */\nasync function fetchRegisteredCheckoutId(contractAddress, chainId) {\n  const paperChain = parseChainIdToPaperChain(chainId);\n  const res = await fetch(`${PAPER_API_URL}/register-contract?contractAddress=${contractAddress}&chain=${paperChain}`);\n  const json = await res.json();\n  invariant(json.result.id, \"Contract is not registered with paper\");\n  return json.result.id;\n}\n\n/**\n * The parameters for creating a paper.xyz checkout link.\n * @public\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\nconst DEFAULT_PARAMS = {\n  expiresInMinutes: 15,\n  feeBearer: \"BUYER\",\n  sendEmailOnSuccess: true,\n  redirectAfterPayment: false\n};\n\n/**\n * @internal\n */\nasync function createCheckoutLinkIntent(contractId, params) {\n  const res = await fetch(`${PAPER_API_URL}/checkout-link-intent`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      contractId,\n      ...DEFAULT_PARAMS,\n      ...params,\n      metadata: {\n        ...params.metadata,\n        via_platform: \"thirdweb\"\n      },\n      // overrides that are hard coded\n      hideNativeMint: true,\n      hidePaperWallet: !!params.walletAddress,\n      hideExternalWallet: true,\n      hidePayWithCrypto: true,\n      usePaperKey: false\n    })\n  });\n  const json = await res.json();\n  invariant(json.checkoutLinkIntentUrl, \"Failed to create checkout link intent\");\n  return json.checkoutLinkIntentUrl;\n}\n\n/**\n * @internal\n */\nclass PaperCheckout {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  async getCheckoutId() {\n    return fetchRegisteredCheckoutId(this.contractWrapper.address, await this.contractWrapper.getChainID());\n  }\n  async isEnabled() {\n    try {\n      return !!(await this.getCheckoutId());\n    } catch (err) {\n      return false;\n    }\n  }\n  async createLinkIntent(params) {\n    return await createCheckoutLinkIntent(await this.getCheckoutId(), params);\n  }\n}\n\nexport { PAPER_API_URL as P, PaperCheckout as a, createCheckoutLinkIntent as c, fetchRegisteredCheckoutId as f, parseChainIdToPaperChain as p };\n","module.exports = function reverse (src) {\n  var buffer = new Buffer(src.length)\n\n  for (var i = 0, j = src.length - 1; i <= j; ++i, --j) {\n    buffer[i] = src[j]\n    buffer[j] = src[i]\n  }\n\n  return buffer\n}\n","//     treeify.js\n//     Luke Plaster <notatestuser@gmail.com>\n//     https://github.com/notatestuser/treeify.js\n\n// do the universal module definition dance\n(function (root, factory) {\n\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.treeify = factory();\n  }\n\n}(this, function() {\n\n  function makePrefix(key, last) {\n    var str = (last ? '└' : '├');\n    if (key) {\n      str += '─ ';\n    } else {\n      str += '──┐';\n    }\n    return str;\n  }\n\n  function filterKeys(obj, hideFunctions) {\n    var keys = [];\n    for (var branch in obj) {\n      // always exclude anything in the object's prototype\n      if (!obj.hasOwnProperty(branch)) {\n        continue;\n      }\n      // ... and hide any keys mapped to functions if we've been told to\n      if (hideFunctions && ((typeof obj[branch])===\"function\")) {\n        continue;\n      }\n      keys.push(branch);\n    }\n    return keys;\n  }\n\n  function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {\n    var line = '', index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);\n\n    if (lastStatesCopy.push([ root, last ]) && lastStates.length > 0) {\n      // based on the \"was last element\" states of whatever we're nested within,\n      // we need to append either blankness or a branch to our line\n      lastStates.forEach(function(lastState, idx) {\n        if (idx > 0) {\n          line += (lastState[1] ? ' ' : '│') + '  ';\n        }\n        if ( ! circular && lastState[0] === root) {\n          circular = true;\n        }\n      });\n\n      // the prefix varies based on whether the key contains something to show and\n      // whether we're dealing with the last element in this collection\n      line += makePrefix(key, last) + key;\n\n      // append values and the circular reference indicator\n      showValues && (typeof root !== 'object' || root instanceof Date) && (line += ': ' + root);\n      circular && (line += ' (circular ref.)');\n\n      callback(line);\n    }\n\n    // can we descend into the next item?\n    if ( ! circular && typeof root === 'object') {\n      var keys = filterKeys(root, hideFunctions);\n      keys.forEach(function(branch){\n        // the last key is always printed with a different prefix, so we'll need to know if we have it\n        lastKey = ++index === keys.length;\n\n        // hold your breath for recursive action\n        growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);\n      });\n    }\n  };\n\n  // --------------------\n\n  var Treeify = {};\n\n  // Treeify.asLines\n  // --------------------\n  // Outputs the tree line-by-line, calling the lineCallback when each one is available.\n\n  Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {\n    /* hideFunctions and lineCallback are curried, which means we don't break apps using the older form */\n    var hideFunctionsArg = typeof hideFunctions !== 'function' ? hideFunctions : false;\n    growBranch('.', obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);\n  };\n\n  // Treeify.asTree\n  // --------------------\n  // Outputs the entire tree, returning it as a string with line breaks.\n\n  Treeify.asTree = function(obj, showValues, hideFunctions) {\n    var tree = '';\n    growBranch('.', obj, false, [], showValues, hideFunctions, function(line) {\n      tree += line + '\\n';\n    });\n    return tree;\n  };\n\n  // --------------------\n\n  return Treeify;\n\n}));\n"],"names":["InterfaceId_IERC721","InterfaceId_IERC1155","FALLBACK_METADATA","name","async","fetchTokenMetadata","tokenId","tokenUri","storage","startsWith","Buffer","base64","split","jsonMetadata","JSON","parse","from","toString","C","id","uri","parsedUri","replace","toHexString","slice","downloadJSON","err","unparsedTokenIdUri","e","console","warn","stringify","fetchTokenMetadataForContract","contractAddress","provider","ERC165MetadataAbi","default","erc165","isERC721","isERC1155","Promise","all","supportsInterface","ERC721MetadataAbi","erc721","tokenURI","Error","ERC1155MetadataAbi","erc1155","uploadOrExtractURI","metadata","upload","uploadOrExtractURIs","metadatas","startNumber","options","undefined","find","m","isUriList","isMetadataList","uploadBatch","map","rewriteFileNames","fileStartNumber","onProgress","getBaseUriFromBatch","uris","baseUri","substring","lastIndexOf","i","length","DEFAULT_QUERY_ALL_COUNT","RawDateSchema","z","union","date","transform","Math","floor","getTime","number","StartDateSchema","Date","EndDateSchema","now","assertEnabled","namespace","feature","detectContractFeature","contractWrapper","featureName","abi","hasFunction","functionName","readContract","functions","ContractMetadata","constructor","schema","this","parseOutputMetadata","output","parseAsync","parseInputMetadata","input","get","data","supportsContractMetadata","read","includes","contractName","contractSymbol","publishedMetadata","address","getProvider","symbol","description","info","title","set","_parseAndUploadMetadata","wrapper","T","fromContractWrapper","method","args","receipt","update","prepare","parsedMetadata","ContractEvents","addTransactionListener","listener","addListener","Transaction","removeTransactionListener","off","addEventListener","eventName","event","interface","getEvent","filter","topics","getEventTopic","wrappedListener","log","parsedLog","parseLog","toContractEvent","eventFragment","on","listenToAllEvents","error","removeEventListener","removeAllListeners","getAllEvents","filters","arguments","fromBlock","toBlock","order","orderedEvents","queryFilter","sort","a","b","blockNumber","parseEvents","getEvents","eventInterface","inputs","events","transaction","Object","fromEntries","entries","key","value","rawLog","results","forEach","param","index","Array","isArray","components","arr","type","objArray","tuple","obj","j","push","GasCostEstimator","gasCostOf","fn","price","gasUnits","getGasPrice","estimateGas","mul","gasLimitOf","currentGasPriceInGwei","ContractAppURI","app_uri","getGatewayUrls","appURI","ContractInterceptor","overrideNextTransaction","hook","withTransactionOverride","ContractRoyalty","getDefaultRoyaltyInfo","royaltyRecipient","royaltyBps","fee_recipient","seller_fee_basis_points","getTokenRoyaltyInfo","setDefaultRoyaltyInfo","oldMetadata","mergedMetadata","royaltyData","contractURI","h","contractEncoder","encoded","encode","setTokenRoyaltyInfo","parsedRoyaltyData","DelayedReveal","nextTokenIdToMintFn","createDelayedRevealBatch","placeholder","password","placeholderUris","placeholderUri","g","startFileNumber","toNumber","baseUriId","hashedPassword","hashDelayRevealPassword","encryptedBaseUri","isLegacyContract","chainId","getChainID","provenanceHash","endsWith","parseLogs","logs","startingIndex","startTokenId","endingIndex","endTokenId","lte","add","reveal","batchId","decryptedUri","callStatic","getBatchesToReveal","count","isZero","countRangeArray","keys","uriIndices","uriIndicesWithZeroStart","tokenMetadatas","getNftMetadata","legacyContract","encryptedBaseUris","getLegacyEncryptedData","decode","meta","batchUri","placeholderMetadata","_","batchTokenIndex","DeprecatedAbi","legacy","result","calculateClaimCost","pricePerToken","quantity","currencyAddress","checkERC20Allowance","overrides","currency","totalCost","n","gt","ContractOwner","resolvedAddress","ContractPlatformFee","platformFeeRecipient","platformFeeBps","platform_fee_recipient","platform_fee_basis_points","parsed","platformFeeInfo","ContractRoles","roles","getAll","_ref","role","item","roleHash","setAll","rolesWithAddresses","every","currentRoles","sortedRoles","addresses","currentAddresses","addressOrEns","toAdd","toRemove","getRevokeRoleFunctionName","revokeFunctionName","verify","members","toLowerCase","grant","revoke","signerAddress","getSignerAddress","ContractPrimarySale","getRecipient","setRecipient","recipient","DropClaimConditions","getActive","cc","tokenDecimals","getTokenDecimals","merkle","withAllowList","conditionId","isLegacySinglePhaseDrop","contractModel","isLegacyMultiPhaseDrop","isNewSinglePhaseDrop","isNewMultiphaseDrop","currentStartId","countBn","startId","conditions","decimals","fetchedConditions","c","canClaim","addressToCheck","getClaimIneligibilityReasons","reasons","activeConditionIndex","claimCondition","NoWallet","quantityWithDecimals","NoClaimConditionSet","Unknown","availableSupply","lt","NotEnoughSupply","hasAllowList","merkleRootHash","allowListEntry","getClaimerProofs","AddressNotAllowed","claimVerification","prepareClaim","validMerkleProof","proofs","maxClaimable","proof","maxQuantityInAllowlist","quantityLimitPerWallet","currencyAddressInProof","priceInProof","reason","OverMaxClaimablePerWallet","WrongPriceOrCurrency","ClaimPhaseNotStarted","claimedSupply","maxClaimablePerWallet","getSupplyClaimedByWallet","eq","lastClaimedTimestamp","timestampForNextClaim","div","AlreadyClaimed","WaitBeforeNextClaimTransaction","totalPrice","getBalance","NotEnoughTokens","ERC20Abi","erc20","claimerAddress","claimConditionId","merkleRoot","f","getSnapshotFormatVersion","walletAddress","activeClaimConditionId","_this","claimConditionInputs","resetClaimEligibilityForAll","claimConditionsProcessed","startTime","maxClaimableSupply","waitInSeconds","snapshot","s","Number","reduce","acc","current","snapshotInfos","sortedConditions","merkleInfo","snapshotUri","cw","baseContractEncoder","contractEncoderLegacy","claimConditionInput","existingConditions","newConditionInputs","d","resolve","addressToClaim","activeClaimConditions","getClaimArguments","destinationAddress","getClaimTransaction","V1","V2","Erc721BatchMintable","to","u","tokenIdMinted","Erc721ClaimableWithConditions","D","tx","setParse","Erc721Claimable","Erc721LazyMintable","revealer","detectErc721Revealable","lazyMint","nextTokenIdToMint","batch","getTokenMetadata","Erc721Mintable","detectErc721BatchMintable","toAddress","getMintTransaction","Erc721Enumerable","queryParams","tokenIds","start","balance","indices","Erc721AQueryable","Erc721Supply","owned","detectErc721Owned","maxSupply","maxId","min","allOwners","totalCount","totalClaimedSupply","owners","ownerOf","catch","owner","o","totalCirculatingSupply","TieredDropPayloadSchema","B","extend","tierPriority","array","string","GenericRequest","Erc721TieredDrop","getMetadataInTier","tier","batches","t","ranges","range","nftsInRange","baseURIs","startIdInclusive","endIdNonInclusive","flat","getTokensInTier","endIndex","createBatchWithTier","createDelayedRevealBatchWithTier","generate","payloadToSign","payload","generateBatch","payloadsToSign","parsedPayloads","signer","getSigner","signature","signTypedData","version","verifyingContract","mapPayloadToContractStruct","signedPayload","message","claimWithSignature","normalizedTotalPrice","getCallOverrides","sendTransaction","quantityClaimed","primarySaleRecipient","uid","validityStartTimestamp","mintStartTime","validityEndTimestamp","mintEndTime","Erc721Burnable","token","Erc721ClaimableZora","getAddress","getSaleDetails","publicSalePrice","zoraFee","amount","firstPurchasedTokenId","Erc721LoyaltyCard","cancel","Erc721UpdatableMetadata","Erc721SharedMetadata","image","imageURI","animation_url","animationURI","sanitizeJSONString","imageUri","animationUri","val","sanitized","Erc721WithQuantitySignatureMintable","mint","mintRequest","isLegacyNFTContract","mapLegacyPayloadToContractStruct","mintBatch","contractPayloads","signedPayloads","p","verification","parsedRequests","r","finalPayload","MintRequest","normalizedPricePerToken","Erc721","_chainId","query","detectErc721Enumerable","mintable","detectErc721Mintable","burnable","detectErc721Burnable","lazyMintable","detectErc721LazyMintable","tieredDropable","detectErc721TieredDrop","signatureMintable","detectErc721SignatureMintable","claimWithConditions","detectErc721ClaimableWithConditions","claimCustom","detectErc721Claimable","claimZora","detectErc721ClaimableZora","erc721SharedMetadata","detectErc721SharedMetadata","loyaltyCard","detectErc721LoyaltyCard","updatableMetadata","detectErc721UpdatableMetadata","onNetworkUpdated","network","updateSignerOrProvider","F","supply","balanceOf","isApproved","operator","_address","_operator","transfer","_to","transferFrom","fromAddress","setApprovalForAll","approved","setApprovalForToken","getAllOwners","getOwned","ownedTokens","getOwnedTokenIds","mintTo","receiver","mintBatchTo","burn","claim","claimTo","contract","totalUnclaimedSupply","sub","claimConditions","tieredDrop","sharedMetadata","StandardErc721","totalSupply","PropertiesInput","object","catchall","unknown","OptionalPropertiesInput","optional","nullable","BasicNFTInput","CommonNFTInput","external_url","background_color","properties","attributes","NFTInputOrUriSchema","CommonNFTOutput","setErc20Allowance","contractToApprove","spender","Base","print","bufferIndexOf","element","binarySearch","compare","linearSearch","buffer1","buffer2","equals","compareFunction","end","mid","ordering","eqChecker","bufferify","isBuffer","words","convertWordsToBuffer","isHexString","Uint8Array","buffer","ArrayBuffer","isView","byteOffset","byteLength","bigNumberify","BigInt","u8a","hex","byte","padStart","join","uint8ArrayToBigInt","v","test","tree","bufferToHex","withPrefix","alloc","bufferifyFn","arrayBuffer","hexString","parseInt","hexStringToArrayBuffer","hexResult","uint8View","arrayBufferToHexString","log2","zip","hexZeroPad","hexStr","Base$1","wordArray","MerkleTree","duplicateOdd","concatenator","concat","hashLeaves","isBitcoinTree","leaves","layers","sortLeaves","sortPairs","fillDefaultHash","complete","hashFn","super","idx","processLeaves","getOptions","pow","ceil","createHashes","nodes","layerIndex","layerLimit","isInteger","hash","left","right","combined","addLeaf","leaf","addLeaves","getLeaves","values","getLeaf","getLeafIndex","target","getLeafCount","getHexLeaves","marshalLeaves","unmarshalLeaves","jsonStr","getLayers","getHexLayers","layer","getLayersFlat","unshift","getHexLayersFlat","getLayerCount","getRoot","getHexRoot","getProof","isRightNode","pairIndex","position","getHexProof","getProofs","getProofsDFS","currentLayer","reverse","pushed","leftchildIndex","rightchildIndex","splice","getHexProofs","getPositionalHexProof","getProofIndices","treeIndices","depth","leafCount","maximalIndices","Set","x","y","redundantIndices","has","getProofIndicesForUnevenTree","sortedLeafIndices","leavesCount","unevenLayers","proofIndices","layerNodes","proofNodeIndices","unevenLayer","getMultiProof","isUnevenTree","getMultiProofForUnevenTree","els","ids","el","hashes","nextIds","pairElement","getPairNode","self","indexOf","proofHashes","currentLayerIndices","treeLayer","siblings","uniqueIndices","getHexMultiProof","getProofFlags","_proofs","tested","flags","ids_","proofUsed","targetNode","root","node","isLeftNode","buffers","verifyMultiProof","proofLeaves","verifyMultiProofForUnevenTree","proofitem","indexqueue","hasOwnProperty","call","pair","verifyMultiProofWithFlags","proofFlag","leavesLen","totalHashes","leafPos","hashPos","proofPos","computedRoot","calculateRootForUnevenTree","getDepth","getLayersAsObject","objs","shift","akey","bkey","resetTree","pairIdx","toTreeString","asTree","treeLayers","isPowOf2","leafIndices","leafHashes","totalLeavesCount","leafTuples","_ref2","_ref3","indexA","indexB","leafTupleIndices","_ref4","nextSliceStart","proofTuplesByLayers","sliceStart","_ref5","_ref6","_ref7","_ref8","layerIndex_","parentIndices","parentLayer","parentNodeTreeIndex","bufA","bufB","abstractContractModelToLegacy","model","startTimestamp","supplyClaimed","quantityLimitPerTransaction","waitTimeInSecondsBetweenClaims","abstractContractModelToNew","convertQuantityToBigNumber","parseSnapshotInputs","chunkSize","chunks","parsedChunks","chunk","SnapshotFormatVersion","ShardedMerkleTree","originalEntriesUri","shardNybbles","shards","trees","fromUri","shardedMerkleTreeInfo","isShardedMerkleTree","fromShardedMerkleTreeInfo","hashEntry","entry","currencyDecimals","snapshotFormatVersion","fetchAndCacheDecimals","cache","buildAndUpload","snapshotInput","snapshotEntry","shard","currencyDecimalMap","subTrees","roots","shardsToUpload","shardId","shardedMerkleInfo","hashedEntries","getAllEntries","fetchSnapshotEntryForAddress","merkleMetadata","raw","merkleTree","snapshotData","claims","legacyContractModelToAbstract","newContractModelToAbstract","approveErc20Allowance","allowance","activeClaimCondition","merkleMetadataFetcher","CurrencySchema","CurrencyValueSchema","displayValue","ClaimConditionMetadataSchema","ClaimConditionInputSchema","S","ClaimConditionInputArray","ClaimConditionOutputSchema","currentMintSupply","currencyMetadata","processSnapshotData","inputsWithSnapshots","conditionInput","snapshotInfo","size","createSnapshot","processClaimConditionInputs","parsedInputs","metadataOrUri","convertToContractModel","fetchSnapshot","smt","convertToReadableQuantity","bn","transformResultToClaimCondition","pm","shouldDownloadSnapshot","cv","resolvedMetadata","updateExistingClaimConditions","priceDecimals","priceInWei","priceInTokens","newConditionParsed","mergedConditionOutput","existingOutput","newConditionAtIndex","formattedPrice","ClaimEligibility","resolveOrGenerateId","requestUId","v4","BaseSignaturePayloadInput","refine","E","arg","Signature20PayloadInput","Signature20PayloadOutput","Signature721PayloadInput","N","Signature721PayloadOutput","Signature1155PayloadInput","Signature1155PayloadInputWithTokenId","Signature1155PayloadOutput","Signature721WithQuantityInput","Signature721WithQuantityOutput","MintRequest20","MintRequest721","MintRequest1155","MintRequest721withQuantity","SignatureDrop","static","app","contractRoles","royalties","sales","encoder","estimator","G","platformFees","interceptor","checkout","claimed","unclaimed","getAllClaimed","getAllUnclaimed","firstTokenId","max","isTransferRestricted","createBatch","PAPER_API_URL","PAPER_CHAIN_ID_MAP","Mainnet","Goerli","Polygon","Mumbai","Avalanche","fetchRegisteredCheckoutId","paperChain","parseChainIdToPaperChain","res","fetch","json","DEFAULT_PARAMS","expiresInMinutes","feeBearer","sendEmailOnSuccess","redirectAfterPayment","PaperCheckout","getCheckoutId","isEnabled","createLinkIntent","params","contractId","headers","body","via_platform","hideNativeMint","hidePaperWallet","hideExternalWallet","hidePayWithCrypto","usePaperKey","checkoutLinkIntentUrl","createCheckoutLinkIntent","module","exports","src","makePrefix","last","str","filterKeys","hideFunctions","branch","growBranch","lastStates","showValues","callback","lastKey","circular","line","lastStatesCopy","lastState","Treeify","lineCallback","factory"],"sourceRoot":""}
{"version":3,"file":"js/4481.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/dist/errors-3055a99c.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/dist/url-bc88b2b6.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.browser.esm.js","webpack:///./node_modules/@thirdweb-dev/wallets/evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","function normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { getValidChainRPCs } from '@thirdweb-dev/chains';\n\nfunction isTwUrl(url) {\n  const host = new URL(url).hostname;\n  return host.endsWith(\".thirdweb.com\") || host === \"localhost\" || host === \"0.0.0.0\";\n}\nfunction getValidPublicRPCUrl(chain) {\n  return getValidChainRPCs(chain).map(rpc => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch (e) {\n      return rpc;\n    }\n  });\n}\n\nexport { getValidPublicRPCUrl as g, isTwUrl as i };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError } from '../../../../dist/errors-3055a99c.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-006a648a.browser.esm.js';\nimport { InjectedConnector } from '../../injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js';\nimport { utils } from 'ethers';\nimport { g as getInjectedCoin98Provider } from '../../../../dist/getInjectedCoin98Provider-85eb6a2d.browser.esm.js';\nimport '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\nimport '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\n\nclass Coin98Connector extends InjectedConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      name: \"Coin98 Wallet\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider: getInjectedCoin98Provider\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options,\n      connectorStorage: arg.connectorStorage\n    });\n    _defineProperty(this, \"id\", walletIds.coin98);\n  }\n\n  /**\n   * Connect to injected Coin98Wallet provider\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // Attempt to show wallet select prompt with `wallet_requestPermissions` when\n      // `shimDisconnect` is active and account is in disconnected state (flag in storage)\n      let account = null;\n      if (this.options?.shimDisconnect && !Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        account = await this.getAccount().catch(() => null);\n        const isConnected = !!account;\n        if (isConnected) {\n          // Attempt to show another prompt for selecting wallet if already connected\n          try {\n            await provider.request({\n              method: \"wallet_requestPermissions\",\n              params: [{\n                eth_accounts: {}\n              }]\n            });\n          } catch (error) {\n            // Not all injected providers support `wallet_requestPermissions` (e.g. iOS).\n            // Only bubble up error if user rejects request\n            if (this.isUserRejectedRequestError(error)) {\n              throw new UserRejectedRequestError(error);\n            }\n          }\n        }\n      }\n\n      // if account is not already set, request accounts and use the first account\n      if (!account) {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        account = utils.getAddress(accounts[0]);\n      }\n\n      // get currently connected chainId\n      let connectedChainId = await this.getChainId();\n      // check if connected chain is unsupported\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is given, but does not match the currently connected chainId, switch to the given chainId\n      if (options.chainId && connectedChainId !== options.chainId) {\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate the chainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id : ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options?.shimDisconnect) {\n        // add shimDisconnectKey in storage - this signals that connector is \"connected\"\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider: provider,\n        account\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n}\n\nexport { Coin98Connector };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-3055a99c.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nfunction getInjectedName(ethereum) {\n  if (!ethereum) {\n    return \"Injected\";\n  }\n  const getName = provider => {\n    if (provider.isAvalanche) {\n      return \"Core Wallet\";\n    }\n    if (provider.isBitKeep) {\n      return \"BitKeep\";\n    }\n    if (provider.isBraveWallet) {\n      return \"Brave Wallet\";\n    }\n    if (provider.isCoinbaseWallet) {\n      return \"Coinbase Wallet\";\n    }\n    if (provider.isExodus) {\n      return \"Exodus\";\n    }\n    if (provider.isFrame) {\n      return \"Frame\";\n    }\n    if (provider.isKuCoinWallet) {\n      return \"KuCoin Wallet\";\n    }\n    if (provider.isMathWallet) {\n      return \"MathWallet\";\n    }\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) {\n      return \"1inch Wallet\";\n    }\n    if (provider.isOpera) {\n      return \"Opera\";\n    }\n    if (provider.isPortal) {\n      return \"Ripio Portal\";\n    }\n    if (provider.isTally) {\n      return \"Tally\";\n    }\n    if (provider.isTokenPocket) {\n      return \"TokenPocket\";\n    }\n    if (provider.isTokenary) {\n      return \"Tokenary\";\n    }\n    if (provider.isTrust || provider.isTrustWallet) {\n      return \"Trust Wallet\";\n    }\n    if (provider.isMetaMask) {\n      return \"MetaMask\";\n    }\n  };\n\n  // Some injected providers detect multiple other providers and create a list at `ethers.providers`\n  if (ethereum.providers?.length) {\n    // Deduplicate names using Set\n    // Coinbase Wallet puts multiple providers in `ethereum.providers`\n    const nameSet = new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) {\n      return names;\n    }\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\nvar _provider = /*#__PURE__*/new WeakMap();\nclass InjectedConnector extends WagmiConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      shimDisconnect: true,\n      getProvider: () => {\n        if (assertWindowEthereum(globalThis.window)) {\n          return globalThis.window.ethereum;\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options\n    });\n    /**\n     * Name of the injected connector\n     */\n    /**\n     * Whether the connector is ready to be used\n     *\n     * `true` if the injected provider is found\n     */\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    /**\n     * handles the `accountsChanged` event from the provider\n     * * emits `change` event if connected to a different account\n     * * emits `disconnect` event if no accounts available\n     */\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    /**\n     * handles the `chainChanged` event from the provider\n     * * emits `change` event if connected to a different chain\n     */\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    /**\n     * handles the `disconnect` event from the provider\n     * * emits `disconnect` event\n     */\n    _defineProperty(this, \"onDisconnect\", async error => {\n      // We need this as MetaMask can emit the \"disconnect\" event upon switching chains.\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          try {\n            const isAuthorized = await this.getAccount();\n            if (isAuthorized) {\n              return;\n            }\n          } catch {\n            // If we can't get the account anymore, continue with disconnect\n          }\n        }\n      }\n      this.emit(\"disconnect\");\n\n      // Remove `shimDisconnect` => it signals that wallet is disconnected\n      if (this.options.shimDisconnect) {\n        await this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    const _provider2 = options.getProvider();\n\n    // set the name of the connector\n    if (typeof options.name === \"string\") {\n      // if name is given, use that\n      this.name = options.name;\n    } else if (_provider2) {\n      // if injected provider is detected, get name from it\n      const detectedName = getInjectedName(_provider2);\n      if (options.name) {\n        this.name = options.name(detectedName);\n      } else {\n        if (typeof detectedName === \"string\") {\n          this.name = detectedName;\n        } else {\n          this.name = detectedName[0];\n        }\n      }\n    } else {\n      // else default to \"Injected\"\n      this.name = \"Injected\";\n    }\n    this.id = \"injected\";\n    this.ready = !!_provider2;\n    this.connectorStorage = arg.connectorStorage;\n  }\n\n  /**\n   * * Connect to the injected provider\n   * * switch to the given chain if `chainId` is specified as an argument\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // request account addresses from injected provider\n      const accountAddresses = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // get the first account address\n      const firstAccountAddress = utils.getAddress(accountAddresses[0]);\n\n      // Switch to given chain if a chainId is specified\n      let connectedChainId = await this.getChainId();\n      // Check if currently connected chain is unsupported\n      // chainId is considered unsupported if chainId is not in the list of this.chains array\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is specified and it is not the same as the currently connected chain\n      if (options.chainId && connectedChainId !== options.chainId) {\n        // switch to the given chain\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate connectedChainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id: ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options.shimDisconnect) {\n        // add the shim shimDisconnectKey => it signals that wallet is connected\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        account: firstAccountAddress,\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * disconnect from the injected provider\n   */\n  async disconnect() {\n    // perform cleanup\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n\n    // if shimDisconnect is enabled\n    if (this.options.shimDisconnect) {\n      // Remove the shimDisconnectKey => it signals that wallet is disconnected\n      await this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n\n  /**\n   * @returns The first account address from the injected provider\n   */\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n\n    // return checksum address\n    // https://docs.ethers.org/v5/api/utils/address/#utils-getAddress\n    return utils.getAddress(accounts[0]);\n  }\n\n  /**\n   * @returns The `chainId` of the currently connected chain from injected provider normalized to a `number`\n   */\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n\n  /**\n   * get the injected provider\n   */\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) {\n      _classPrivateFieldSet(this, _provider, provider);\n      // setting listeners\n    }\n\n    return _classPrivateFieldGet(this, _provider);\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n\n  /**\n   *\n   * @returns `true` if the connector is connected and address is available, else `false`\n   */\n  async isAuthorized() {\n    try {\n      // `false` if connector is disconnected\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      // `false` if no account address available, else `true`\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      // `false` if any error thrown\n      return false;\n    }\n  }\n\n  /**\n   * switch to given chain\n   */\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      // request provider to switch to given chainIdHex\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      });\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (chain) {\n        return chain;\n      }\n      return {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (error) {\n      // if could not switch to given chainIdHex\n\n      // if tried to connect to a chain that is not configured\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // if chain is not added to provider\n      if (error.code === 4902 ||\n      // Unwrapping for MetaMask Mobile\n      // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n      error?.data?.originalError?.code === 4902) {\n        try {\n          // request provider to add chain\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addError)) {\n            throw new UserRejectedRequestError(error);\n          }\n\n          // else other error\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n}\n\nexport { InjectedConnector };\n"],"names":["WagmiConnector","constructor","_ref","chains","options","super","this","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","RpcError","Error","message","cause","code","data","Number","isInteger","JSON","stringify","ProviderRpcError","AddChainError","arguments","_","ChainNotConfiguredError","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","normalizeChainId","parseInt","trim","substring","isTwUrl","host","URL","hostname","endsWith","getValidPublicRPCUrl","rpc","pathname","search","toString","e","Coin98Connector","InjectedConnector","arg","name","shimDisconnect","shimChainChangedDisconnect","getProvider","g","connectorStorage","w","coin98","connect","provider","setupListeners","emit","type","account","Boolean","getItem","shimDisconnectKey","getAccount","catch","request","method","params","eth_accounts","error","isUserRejectedRequestError","U","accounts","connectedChainId","getChainId","isUnsupported","switchChain","console","setItem","connectionInfo","id","unsupported","R","_provider","WeakMap","W","a","globalThis","window","ethereum","writable","value","async","n","removeItem","_provider2","detectedName","getName","isAvalanche","isBitKeep","isBraveWallet","isCoinbaseWallet","isExodus","isFrame","isKuCoinWallet","isMathWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPortal","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isMetaMask","providers","nameSet","Set","unknownCount","add","names","getInjectedName","ready","accountAddresses","firstAccountAddress","disconnect","removeListener","onAccountsChanged","onChainChanged","onDisconnect","then","getSigner","Promise","all","isAuthorized","chainIdHex","find","_chain","slug","nativeCurrency","decimals","symbol","shortName","testnet","C","originalError","chainName","rpcUrls","blockExplorerUrls","addError","A","S","on"],"sourceRoot":""}